{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"picked",
				"pickedLink"
			],
			[
				"parse",
				"parseRgb"
			],
			[
				"attr",
				"attribute"
			],
			[
				"FontC",
				"FontColorPicker"
			],
			[
				"pic",
				"pickedColor"
			],
			[
				"wid",
				"widgetView"
			],
			[
				"link",
				"linkPickerConfig"
			],
			[
				"wi",
				"widgetView"
			],
			[
				"out",
				"outMsg"
			],
			[
				"widge",
				"widgetView"
			],
			[
				"widget",
				"widgetConfig"
			],
			[
				"colo",
				"colorPickerView"
			],
			[
				"Edo",
				"EditorViewConfig"
			],
			[
				"glo",
				"globalAttributes"
			],
			[
				"r",
				"rx"
			],
			[
				"x",
				"x2"
			],
			[
				"ec",
				"extractAlphaValue"
			],
			[
				"trix",
				"trix-toolbar"
			],
			[
				"showOn",
				"showOnlyHidden"
			],
			[
				"ToogleShow",
				"ToogleShowOnlyHidden"
			],
			[
				"show",
				"showOnlyHidden"
			],
			[
				"arts",
				"arts_"
			],
			[
				"ToogleS",
				"ToogleShowOnlyHidden"
			],
			[
				"Path",
				"PatchUpload"
			],
			[
				"Pat",
				"PatchUpload"
			],
			[
				"to",
				"toMaybe"
			],
			[
				"Pa",
				"Patch"
			],
			[
				"pat",
				"patch"
			],
			[
				"saveS",
				"saveStatePatch"
			],
			[
				"load",
				"loadedStateValue"
			],
			[
				"current",
				"currentState"
			],
			[
				"saveSt",
				"saveStatePatch"
			],
			[
				"SetS",
				"SetSaveMode"
			],
			[
				"save",
				"saveMode"
			],
			[
				"mo",
				"model"
			],
			[
				"Sa",
				"SaveMode"
			],
			[
				"Save",
				"SaveWholeState"
			],
			[
				"Too",
				"ToogleArtworkIsVisible"
			],
			[
				"date",
				"datePickerData"
			],
			[
				"Date",
				"DatePickerHandler"
			],
			[
				"dat",
				"datePickerData"
			],
			[
				"Dom",
				"DominantColorHandler"
			],
			[
				"sele",
				"selected"
			],
			[
				"opt",
				"option"
			],
			[
				"lan",
				"language"
			],
			[
				"top",
				"topPanelViewHeight"
			],
			[
				"topP",
				"topPanelViewHeight"
			],
			[
				"la",
				"label"
			],
			[
				"cent",
				"centerX"
			],
			[
				"u",
				"uuid"
			],
			[
				"dev",
				"devicePixelRatio"
			],
			[
				"devi",
				"devicePixelRatio"
			],
			[
				"devie",
				"devicePixelRatio"
			],
			[
				"sa",
				"saveState"
			],
			[
				"isA",
				"isOnSingleArtwork"
			],
			[
				"padd",
				"paddingEach"
			],
			[
				"html",
				"htmlAttribute"
			],
			[
				"B",
				"Background"
			],
			[
				"El",
				"Element"
			],
			[
				"att",
				"attribute"
			],
			[
				"pad",
				"paddingXY"
			],
			[
				"is",
				"isOnSingleArtwork"
			],
			[
				"SetCss",
				"SetBorderCssValue"
			],
			[
				"setS",
				"setSingle"
			],
			[
				"SetBor",
				"SetMasonryBorder"
			],
			[
				"set",
				"setMasonry"
			],
			[
				"light",
				"lightGrey"
			],
			[
				"isO",
				"isOnSingleArtwork"
			],
			[
				"sh",
				"shadow"
			],
			[
				"ToogleSho",
				"ToogleShowDebug"
			],
			[
				"sho",
				"showDebug"
			],
			[
				"cont",
				"controlDown"
			],
			[
				"ini",
				"initialSeed"
			],
			[
				"customSe",
				"customSelectionIds"
			],
			[
				"cu",
				"customSelection"
			],
			[
				"filter",
				"filterUploadedToday"
			],
			[
				"No",
				"Nothing"
			],
			[
				"mbS",
				"mbSelectedArtwork"
			],
			[
				"a",
				"art"
			],
			[
				"mb",
				"mbControls"
			],
			[
				"lig",
				"lightBlue"
			],
			[
				"Back",
				"Background"
			],
			[
				"c",
				"customSelection"
			],
			[
				"art",
				"artOrder"
			],
			[
				"wei",
				"weightTag"
			],
			[
				"sort",
				"sortedPicsIds"
			],
			[
				"filterO",
				"filterOutHaveCreationDate"
			],
			[
				"filterOu",
				"filterOutHaveCreationDate"
			],
			[
				"filet",
				"filterOutHaveCreationDate"
			],
			[
				"conta",
				"containerWidth"
			],
			[
				"displ",
				"displayMinHeight"
			],
			[
				"di",
				"displayWidth"
			],
			[
				"no",
				"noAttr"
			],
			[
				"ali",
				"alignBottom"
			],
			[
				"max",
				"maxH2"
			],
			[
				"com",
				"computeBestSize"
			],
			[
				"img",
				"imgsScaledToMinHeight"
			],
			[
				"Url",
				"UrlBuilder"
			],
			[
				"St",
				"String"
			],
			[
				"cen",
				"centerY"
			],
			[
				"p",
				"paddingEach"
			],
			[
				"paddin",
				"paddingEach"
			],
			[
				"con",
				"config"
			],
			[
				"tag",
				"tagsView"
			],
			[
				"mainMenu",
				"mainMenuView"
			],
			[
				"text",
				"textM"
			],
			[
				"li",
				"lightGrey"
			],
			[
				"Bat",
				"BatchUnsetTag"
			],
			[
				"onC",
				"onClick"
			],
			[
				"menu",
				"menuView"
			],
			[
				"check",
				"checkSquare"
			],
			[
				"men",
				"currentMenuEntryFocus"
			],
			[
				"mas",
				"masonrySettingsChanged"
			],
			[
				"mbSe",
				"mbSelectedArtwork"
			],
			[
				"isSe",
				"isSelected"
			],
			[
				"def",
				"defEntry"
			],
			[
				"json",
				"json_encode"
			],
			[
				"enc",
				"encoder"
			],
			[
				"state",
				"stateValue"
			],
			[
				"sta",
				"stateValue"
			],
			[
				"E",
				"English"
			],
			[
				"lang",
				"langQueryParser"
			],
			[
				"l",
				"lang"
			],
			[
				"tags",
				"tagsView"
			],
			[
				"ta",
				"tagsView"
			],
			[
				"visi",
				"visibleArtworks"
			],
			[
				"al",
				"alignLeft"
			],
			[
				"SetMA",
				"SetMasonryRowHeight"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/eniac314/prog/elm/murol2.0/src/PageEditor/EditorPlugins/TrixTextBlockPlugin.elm",
			"settings":
			{
				"buffer_size": 63084,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					169,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAbPYAAAAAAABs9gAAcG9ydCBtb2R1bGUgUGFnZUVkaXRvci5FZGl0b3JQbHVnaW5zLlRyaXhUZXh0QmxvY2tQbHVnaW4gZXhwb3NpbmcgKE1vZGVsLCBNc2csIGNvbnZlcnRUZXh0QmxvY2tzLCBpbml0LCBuZXdzRWRpdG9yVmlldywgcGFyc2VyT3V0cHV0LCBzdWJzY3JpcHRpb25zLCB0ZXh0QmxvY2tQcmV2aWV3LCB1cGRhdGUsIHZpZXcpCgotLWltcG9ydCBVcmwuQnVpbGRlciBleHBvc2luZyAoYWJzb2x1dGUpCgppbXBvcnQgQXV0aC5BdXRoUGx1Z2luIGV4cG9zaW5nIChMb2dJbmZvKQppbXBvcnQgQnJvd3NlciBleHBvc2luZyAoZWxlbWVudCkKaW1wb3J0IEJyb3dzZXIuRXZlbnRzIGV4cG9zaW5nIChvbk1vdXNlRG93bikKaW1wb3J0IERpY3QgZXhwb3NpbmcgKC4uKQppbXBvcnQgRG9jdW1lbnQuRG9jdW1lbnQgYXMgRG9jdW1lbnQgZXhwb3NpbmcgKC4uKQppbXBvcnQgRG9jdW1lbnQuRG9jdW1lbnRWaWV3cy5Eb2N1bWVudFZpZXcgZXhwb3NpbmcgKHJlbmRlclRleHRCbG9jaykKaW1wb3J0IERvY3VtZW50LkRvY3VtZW50Vmlld3MuUmVuZGVyQ29uZmlnIGV4cG9zaW5nIChDb25maWcpCmltcG9ydCBEb2N1bWVudC5Eb2N1bWVudFZpZXdzLlN0eWxlU2hlZXRzIGV4cG9zaW5nIChTdHlsZVNoZWV0LCBkZWZhdWx0U3R5bGVTaGVldCwgZGVmYXVsdFN0eWxlU2hlZXRDc3MsIGRvY0F0dHJUb0NzcywgZW1iZWRkZWRTdHlsZVNoZWV0KQppbXBvcnQgRWxlbWVudCBleHBvc2luZyAoLi4pCmltcG9ydCBFbGVtZW50LkJhY2tncm91bmQgYXMgQmFja2dyb3VuZAppbXBvcnQgRWxlbWVudC5Cb3JkZXIgYXMgQm9yZGVyCmltcG9ydCBFbGVtZW50LkV2ZW50cyBhcyBFdmVudHMKaW1wb3J0IEVsZW1lbnQuRm9udCBhcyBGb250CmltcG9ydCBFbGVtZW50LklucHV0IGFzIElucHV0CmltcG9ydCBFbGVtZW50LktleWVkIGFzIEtleWVkCmltcG9ydCBFbGVtZW50LkxhenkgYXMgTGF6eQppbXBvcnQgRWxlbWVudC5SZWdpb24gYXMgUmVnaW9uCmltcG9ydCBGaWxlRXhwbG9yZXIuRmlsZUV4cGxvcmVyIGFzIEZpbGVFeHBsb3JlcgppbXBvcnQgSGV4IGV4cG9zaW5nIChmcm9tU3RyaW5nKQppbXBvcnQgSHRtbCBhcyBIdG1sCmltcG9ydCBIdG1sLkF0dHJpYnV0ZXMgYXMgSHRtbEF0dHIKaW1wb3J0IEh0bWwuRXZlbnRzIGFzIEh0bWxFdmVudHMgZXhwb3NpbmcgKG9uKQppbXBvcnQgSHRtbC5LZXllZCBhcyBIdG1sS2V5ZWQKaW1wb3J0IEh0bWwuUGFyc2VyIGV4cG9zaW5nICguLikKaW1wb3J0IEh0bWwuUGFyc2VyLlV0aWwgZXhwb3NpbmcgKHRvVmlydHVhbERvbSkKaW1wb3J0IEludGVybmFscy5Db21tb25IZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IEludGVybmFscy5Db21tb25TdHlsZUhlbHBlcnMgZXhwb3NpbmcgKC4uKQppbXBvcnQgSW50ZXJuYWxzLkljb25zIGFzIEljb25zIGV4cG9zaW5nICguLikKaW1wb3J0IEpzb24uRGVjb2RlIGFzIEQKaW1wb3J0IEpzb24uRW5jb2RlIGFzIEUKaW1wb3J0IExpc3QuRXh0cmEgZXhwb3NpbmcgKHJlbW92ZSkKaW1wb3J0IFBhZ2VFZGl0b3IuSW50ZXJuYWxzLkRvY3VtZW50RWRpdG9ySGVscGVycyBleHBvc2luZyAoLi4pCmltcG9ydCBQYWdlVHJlZUVkaXRvci5QYWdlVHJlZUVkaXRvciBhcyBQYWdlVHJlZUVkaXRvcgppbXBvcnQgU2V0IGV4cG9zaW5nICguLikKaW1wb3J0IFN0cmluZy5FeHRyYSBleHBvc2luZyAobGVmdE9mQmFjaywgcmlnaHRPZkJhY2spCmltcG9ydCBUaW1lIGV4cG9zaW5nIChab25lKQppbXBvcnQgVVVJRCBleHBvc2luZyAodG9TdHJpbmcpCmltcG9ydCBVcmwgZXhwb3NpbmcgKGZyb21TdHJpbmcsIHBlcmNlbnREZWNvZGUsIHBlcmNlbnRFbmNvZGUsIHRvU3RyaW5nKQoKCnBvcnQgYWN0aXZhdGVBdHRyaWJ1dGUgOiBFLlZhbHVlIC0+IENtZCBtc2cKCgpwb3J0IGRlYWN0aXZhdGVBdHRyaWJ1dGVzIDogRS5WYWx1ZSAtPiBDbWQgbXNnCgoKcG9ydCBpbnNlcnRIdG1sIDogRS5WYWx1ZSAtPiBDbWQgbXNnCgoKcG9ydCBsb2FkSHRtbCA6IEUuVmFsdWUgLT4gQ21kIG1zZwoKCnBvcnQgZ2V0U2VsZWN0aW9uIDogKCkgLT4gQ21kIG1zZwoKCnBvcnQgc2VsZWN0aW9uIDogKEUuVmFsdWUgLT4gbXNnKSAtPiBTdWIgbXNnCgoKcG9ydCB0cml4UmVhZHkgOiAoRS5WYWx1ZSAtPiBtc2cpIC0+IFN1YiBtc2cKCgpwYXJzZXJPdXRwdXQgOiBNb2RlbCBtc2cgLT4geyB0YkVsZW1zIDogTGlzdCBUZXh0QmxvY2tFbGVtZW50LCBhdHRycyA6IExpc3QgRG9jQXR0cmlidXRlIH0KcGFyc2VyT3V0cHV0IG1vZGVsID0KICAgIHsgdGJFbGVtcyA9IG1vZGVsLm91dHB1dAogICAgLCBhdHRycyA9IG1vZGVsLndob2xlVGV4dEJsb2NBdHRyCiAgICB9CgoKY29udmVydFRleHRCbG9ja3MgOiBEaWN0IFN0cmluZyB7IHBhdGggOiBTdHJpbmcsIG5hbWUgOiBTdHJpbmcgfSAtPiBEb2N1bWVudC5Eb2N1bWVudCAtPiBEb2N1bWVudC5Eb2N1bWVudApjb252ZXJ0VGV4dEJsb2NrcyBwYWdlSW5kZXggZG9jID0KICAgIGNhc2UgZG9jIG9mCiAgICAgICAgQ29udGFpbmVyIHZhbHVlIGRvY3MgLT4KICAgICAgICAgICAgQ29udGFpbmVyIHZhbHVlIChMaXN0Lm1hcCAoY29udmVydFRleHRCbG9ja3MgcGFnZUluZGV4KSBkb2NzKQoKICAgICAgICBDZWxsIHsgY2VsbENvbnRlbnQsIGlkLCBhdHRycyB9IC0+CiAgICAgICAgICAgIGNhc2UgY2VsbENvbnRlbnQgb2YKICAgICAgICAgICAgICAgIFRleHRCbG9jayB0YkVsZW1lbnRzIC0+CiAgICAgICAgICAgICAgICAgICAgQ2VsbAogICAgICAgICAgICAgICAgICAgICAgICB7IGNlbGxDb250ZW50ID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHRCbG9jawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgTGlzdC5jb25jYXRNYXAgKHRleHRCbG9ja0VsZW1lbnRUb05vZGUgcGFnZUluZGV4KSB0YkVsZW1lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IExpc3QubWFwIEh0bWwuUGFyc2VyLm5vZGVUb1N0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBTdHJpbmcuam9pbiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBUcml4SHRtbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgLCBpZCA9IGlkCiAgICAgICAgICAgICAgICAgICAgICAgICwgYXR0cnMgPSBhdHRycwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgb3RoZXIgLT4KICAgICAgICAgICAgICAgICAgICBDZWxsIHsgY2VsbENvbnRlbnQgPSBvdGhlciwgaWQgPSBpZCwgYXR0cnMgPSBhdHRycyB9CgoKdHlwZSBhbGlhcyBNb2RlbCBtc2cgPQogICAgeyBodG1sQ29udGVudCA6IEh0bWxDb250ZW50CiAgICAsIHNlbGVjdGlvbiA6IE1heWJlIFNlbGVjdGlvbgogICAgLCBvdXRwdXQgOiBMaXN0IFRleHRCbG9ja0VsZW1lbnQKICAgICwgbmV4dFVpZCA6IEludAogICAgLCB3aG9sZVRleHRCbG9jQXR0ciA6IExpc3QgRG9jQXR0cmlidXRlCiAgICAsIG9wZW5lZFdpZGdldCA6IE1heWJlIFdpZGdldAogICAgLCBleHRlcm5hbE1zZyA6IE1zZyAtPiBtc2cKICAgIH0KCgp0eXBlIGFsaWFzIEh0bWxDb250ZW50ID0KICAgIHsgaHRtbCA6IFN0cmluZwogICAgLCB0ZXh0IDogU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBTZWxlY3Rpb24gPQogICAgeyBzdGFydCA6IEludAogICAgLCBlbmQgOiBJbnQKICAgICwgYXR0cnMgOiBEaWN0IFN0cmluZyBTdHJpbmcKICAgICwgdGV4dCA6IFN0cmluZwogICAgfQoKCnR5cGUgV2lkZ2V0CiAgICA9IEZvbnRDb2xvclBpY2tlcgogICAgfCBCYWNrZ3JvdW5kQ29sb3JQaWNrZXIKICAgIHwgSW50ZXJuYWxMaW5rcwogICAgfCBJbWFnZVBpY2tlcgogICAgfCBEb2NQaWNrZXIKCgpzdWJzY3JpcHRpb25zIG1vZGVsID0KICAgIFN1Yi5iYXRjaAogICAgICAgIFsgY2FzZSBtb2RlbC5vcGVuZWRXaWRnZXQgb2YKICAgICAgICAgICAgSnVzdCBGb250Q29sb3JQaWNrZXIgLT4KICAgICAgICAgICAgICAgIEJyb3dzZXIuRXZlbnRzLm9uTW91c2VEb3duIChvdXRzaWRlVGFyZ2V0SGFuZGxlciAiZm9udENvbG9yUGlja2VyIiBDbG9zZSkKCiAgICAgICAgICAgIEp1c3QgQmFja2dyb3VuZENvbG9yUGlja2VyIC0+CiAgICAgICAgICAgICAgICBCcm93c2VyLkV2ZW50cy5vbk1vdXNlRG93biAob3V0c2lkZVRhcmdldEhhbmRsZXIgImJhY2tncm91bmRDb2xvclBpY2tlciIgQ2xvc2UpCgogICAgICAgICAgICBKdXN0IEludGVybmFsTGlua3MgLT4KICAgICAgICAgICAgICAgIEJyb3dzZXIuRXZlbnRzLm9uTW91c2VEb3duIChvdXRzaWRlVGFyZ2V0SGFuZGxlciAiaW50ZXJuYWxMaW5rUGlja2VyIiBDbG9zZSkKCiAgICAgICAgICAgIEp1c3QgRG9jUGlja2VyIC0+CiAgICAgICAgICAgICAgICBCcm93c2VyLkV2ZW50cy5vbk1vdXNlRG93biAob3V0c2lkZVRhcmdldEhhbmRsZXIgImRvY1BpY2tlciIgQ2xvc2UpCgogICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICBTdWIubm9uZQogICAgICAgICwgc2VsZWN0aW9uIEdvdFNlbGVjdGlvbgogICAgICAgICwgdHJpeFJlYWR5IChhbHdheXMgTG9hZENvbnRlbnRJblRyaXgpCiAgICAgICAgXQoKCnR5cGUgTXNnCiAgICA9IEdldEh0bWxDb250ZW50IEh0bWxDb250ZW50CiAgICB8IEdldFNlbGVjdGlvbgogICAgfCBHb3RTZWxlY3Rpb24gRS5WYWx1ZQogICAgfCBMb2FkQ29udGVudEluVHJpeAogICAgfCBPcGVuRm9udENvbG9yUGlja2VyCiAgICB8IE9wZW5CYWNrZ3JvdW5kQ29sb3JQaWNrZXIKICAgIHwgT3BlbkludGVybmFsTGlua3MKICAgIHwgSW5zZXJ0SW50ZXJuYWxMaW5rIFN0cmluZwogICAgfCBPcGVuRG9jUGlja2VyCiAgICB8IEluc2VydERvY0xpbmsgU3RyaW5nCiAgICB8IFNldFRleHRDb2xvciBCb29sIFN0cmluZwogICAgfCBTZXRCYWNrZ3JvdW5kQ29sb3IgQm9vbCBTdHJpbmcKICAgIHwgU2V0Rm9udCBCb29sIFN0cmluZwogICAgfCBTZXRGb250U2l6ZSBCb29sIEludAogICAgfCBTZXRBbGlnbk1lbnQgRG9jdW1lbnQuRG9jQXR0cmlidXRlCiAgICAgIC0tfCBTZXRHbG9iYWxBdHRyaWJ1dGUgQm9vbCAoIFN0cmluZywgU3RyaW5nICkKICAgIHwgVW5kb1N0eWxlCiAgICB8IENsb3NlCiAgICB8IFNhdmVBbmRRdWl0CiAgICB8IFF1aXQKICAgIHwgTm9PcAoKCmluaXQgOgogICAgTGlzdCBEb2NBdHRyaWJ1dGUKICAgIC0+IE1heWJlIChMaXN0IFRleHRCbG9ja0VsZW1lbnQpCiAgICAtPiAoTXNnIC0+IG1zZykKICAgIC0+ICggTW9kZWwgbXNnLCBDbWQgbXNnICkKaW5pdCBhdHRycyBtYklucHV0IGV4dGVybmFsTXNnID0KICAgICggeyBodG1sQ29udGVudCA9IEh0bWxDb250ZW50ICIiICIiCiAgICAgICwgc2VsZWN0aW9uID0gTm90aGluZwogICAgICAsIG91dHB1dCA9CiAgICAgICAgICAgIG1iSW5wdXQKICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0IFtdCiAgICAgICwgbmV4dFVpZCA9IDAKICAgICAgLCB3aG9sZVRleHRCbG9jQXR0ciA9CiAgICAgICAgICAgIGlmIGF0dHJzID09IFtdIHRoZW4KICAgICAgICAgICAgICAgIFsgRm9udCAiQXJpYWwiCiAgICAgICAgICAgICAgICAsIEZvbnRTaXplIDE2CiAgICAgICAgICAgICAgICBdCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBhdHRycwogICAgICAsIG9wZW5lZFdpZGdldCA9IE5vdGhpbmcKICAgICAgLCBleHRlcm5hbE1zZyA9IGV4dGVybmFsTXNnCiAgICAgIH0KICAgICwgQ21kLm5vbmUKICAgICkKCgp1cGRhdGUgOgogICAgeyBjb25maWcgfCBwYWdlVHJlZUVkaXRvciA6IFBhZ2VUcmVlRWRpdG9yLk1vZGVsIG1zZyB9CiAgICAtPiBNc2cKICAgIC0+IE1vZGVsIG1zZwogICAgLT4gKCBNb2RlbCBtc2csIENtZCBtc2csIE1heWJlIChFZGl0b3JQbHVnaW5SZXN1bHQgKCBMaXN0IFRleHRCbG9ja0VsZW1lbnQsIExpc3QgRG9jQXR0cmlidXRlICkpICkKdXBkYXRlIGNvbmZpZyBtc2cgbW9kZWwgPQogICAgY2FzZSBtc2cgb2YKICAgICAgICBHZXRIdG1sQ29udGVudCBjb250ZW50IC0+CiAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgb3V0cHV0ID0KICAgICAgICAgICAgICAgICAgICBbIFRyaXhIdG1sIGNvbnRlbnQuaHRtbCBdCgogICAgICAgICAgICAgICAgLS1IdG1sLlBhcnNlci5ydW4gY29udGVudC5odG1sCiAgICAgICAgICAgICAgICAtLSAgICB8PiBSZXN1bHQubWFwIChMaXN0Lm1hcCB0b1RleHRCbG9ja0VsZW1lbnRzKQogICAgICAgICAgICAgICAgLS0gICAgfD4gUmVzdWx0LndpdGhEZWZhdWx0IFtdCiAgICAgICAgICAgIGluCiAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgfCBodG1sQ29udGVudCA9IGNvbnRlbnQKICAgICAgICAgICAgICAgICwgb3V0cHV0ID0gb3V0cHV0CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIGdldFNlbGVjdGlvbiAoKQogICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgKQoKICAgICAgICBHZXRTZWxlY3Rpb24gLT4KICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAsIGdldFNlbGVjdGlvbiAoKQogICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgKQoKICAgICAgICBHb3RTZWxlY3Rpb24gdmFsdWUgLT4KICAgICAgICAgICAgY2FzZSBELmRlY29kZVZhbHVlIGRlY29kZVNlbGVjdGlvbiB2YWx1ZSBvZgogICAgICAgICAgICAgICAgT2sgKCBzZWwsIGlkcyApIC0+CiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICAgICAgICAgIHwgc2VsZWN0aW9uID0gSnVzdCBzZWwKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tLCBhdHRhY2htZW50c0lkcyA9IGlkcwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgRXJyIF8gLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgTG9hZENvbnRlbnRJblRyaXggLT4KICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICByZW1vdmVIaWdobGlnaHQgbm9kZSA9CiAgICAgICAgICAgICAgICAgICAgY2FzZSBub2RlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEVsZW1lbnQgdGFnIGF0dHJzIG5vZGVzIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbGVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKExpc3QuZm9sZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwoIGF0dHIsIHZhbHVlICkgYWNjIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaWYgYXR0ciA9PSAic3R5bGUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIGF0dHIsIFN0cmluZy5yZXBsYWNlICJiYWNrZ3JvdW5kLWNvbG9yOiBoaWdobGlnaHQ7IiAiIiB2YWx1ZSApCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIGF0dHIsIHZhbHVlICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OiBhY2MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTGlzdC5tYXAgcmVtb3ZlSGlnaGxpZ2h0IG5vZGVzKQoKICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyCiAgICAgICAgICAgIGluCiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBtb2RlbC5vdXRwdXQKICAgICAgICAgICAgICAgIHw+IExpc3QuY29uY2F0TWFwICh0ZXh0QmxvY2tFbGVtZW50VG9Ob2RlIChQYWdlVHJlZUVkaXRvci5wYWdlSW5kZXggY29uZmlnLnBhZ2VUcmVlRWRpdG9yKSkKICAgICAgICAgICAgICAgIC0tbmVlZGVkIHRvIGZpeCBleHRlcm5hbCBsaW5rIHdpZGdlZCBsZWF2aW5nIGNvbnRlbnQgaGlnaGxpZ2h0ZWQgd2hlbiBzd2FwaW5nIGludGVybmFsIHRhYnMKICAgICAgICAgICAgICAgIHw+IExpc3QubWFwIHJlbW92ZUhpZ2hsaWdodAogICAgICAgICAgICAgICAgfD4gTGlzdC5tYXAgSHRtbC5QYXJzZXIubm9kZVRvU3RyaW5nCiAgICAgICAgICAgICAgICB8PiBTdHJpbmcuam9pbiAiIgogICAgICAgICAgICAgICAgfD4gKFxodG1sIC0+CiAgICAgICAgICAgICAgICAgICAgICAgIEUub2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbICggInRhZ05hbWUiLCBFLnN0cmluZyAiaW5pdGlhbCBsb2FkIiApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImh0bWwiLCBFLnN0cmluZyBodG1sICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHw+IGxvYWRIdG1sCiAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICApCgogICAgICAgIE9wZW5Gb250Q29sb3JQaWNrZXIgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IG9wZW5lZFdpZGdldCA9CiAgICAgICAgICAgICAgICAgICAgaWYgbW9kZWwub3BlbmVkV2lkZ2V0ID09IEp1c3QgRm9udENvbG9yUGlja2VyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgTm90aGluZwoKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgRm9udENvbG9yUGlja2VyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIENtZC5ub25lCiAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICApCgogICAgICAgIE9wZW5CYWNrZ3JvdW5kQ29sb3JQaWNrZXIgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IG9wZW5lZFdpZGdldCA9CiAgICAgICAgICAgICAgICAgICAgaWYgbW9kZWwub3BlbmVkV2lkZ2V0ID09IEp1c3QgQmFja2dyb3VuZENvbG9yUGlja2VyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgTm90aGluZwoKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgQmFja2dyb3VuZENvbG9yUGlja2VyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIENtZC5ub25lCiAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICApCgogICAgICAgIE9wZW5JbnRlcm5hbExpbmtzIC0+CiAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgfCBvcGVuZWRXaWRnZXQgPQogICAgICAgICAgICAgICAgICAgIGlmIG1vZGVsLm9wZW5lZFdpZGdldCA9PSBKdXN0IEludGVybmFsTGlua3MgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCgogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBJbnRlcm5hbExpbmtzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIENtZC5ub25lCiAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICApCgogICAgICAgIEluc2VydEludGVybmFsTGluayBjSWQgLT4KICAgICAgICAgICAgY2FzZSBtb2RlbC5zZWxlY3Rpb24gb2YKICAgICAgICAgICAgICAgIEp1c3QgeyBzdGFydCwgZW5kLCBhdHRycywgdGV4dCB9IC0+CiAgICAgICAgICAgICAgICAgICAgaWYgc3RhcnQgLz0gZW5kIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tU3RyaW5nLnNsaWNlIHN0YXJ0IGVuZCBtb2RlbC5odG1sQ29udGVudC50ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXBhdGggPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gICAgUGFnZVRyZWVFZGl0b3IuZ2V0UGF0aEZyb21JZCBjb25maWcucGFnZVRyZWVFZGl0b3IgY0lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSAgICAgICAgfD4gTWF5YmUud2l0aERlZmF1bHQgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tICAgICAgICB8PiBTdHJpbmcucmVwbGFjZSAiICIgIl8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPGEgaHJlZj1saWVuLWludGVybmU6IiArKyBjSWQgKysgIj4iICsrIHNlbGVjdGVkICsrICI8Lz4iCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5vYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAoICJzZWxlY3Rpb25TdGFydCIsIEUuaW50IHN0YXJ0ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJzZWxlY3Rpb25FbmQiLCBFLmludCBlbmQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInRhZ05hbWUiLCBFLnN0cmluZyAiaW50ZXJuYWwgbGluayIgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImh0bWwiLCBFLnN0cmluZyBsaW5rICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBvcGVuZWRXaWRnZXQgPSBOb3RoaW5nIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBpbnNlcnRIdG1sIGRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSwgTm90aGluZyApCgogICAgICAgICAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lLCBOb3RoaW5nICkKCiAgICAgICAgT3BlbkRvY1BpY2tlciAtPgogICAgICAgICAgICAoIHsgbW9kZWwKICAgICAgICAgICAgICAgIHwgb3BlbmVkV2lkZ2V0ID0KICAgICAgICAgICAgICAgICAgICBpZiBtb2RlbC5vcGVuZWRXaWRnZXQgPT0gSnVzdCBEb2NQaWNrZXIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCgogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBEb2NQaWNrZXIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICkKCiAgICAgICAgSW5zZXJ0RG9jTGluayB1cmwgLT4KICAgICAgICAgICAgY2FzZSBtb2RlbC5zZWxlY3Rpb24gb2YKICAgICAgICAgICAgICAgIEp1c3QgeyBzdGFydCwgZW5kLCBhdHRycywgdGV4dCB9IC0+CiAgICAgICAgICAgICAgICAgICAgaWYgc3RhcnQgLz0gZW5kIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybF8gPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIFN0cmluZy5jb250YWlucyAiPyIgdXJsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nLkV4dHJhLmxlZnRPZkJhY2sgIj8iIHVybAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI8YSBocmVmPWRvYzoiICsrIHBlcmNlbnRFbmNvZGUgdXJsXyArKyAiPiIgKysgc2VsZWN0ZWQgKysgIjwvPiIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFLm9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbICggInNlbGVjdGlvblN0YXJ0IiwgRS5pbnQgc3RhcnQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInNlbGVjdGlvbkVuZCIsIEUuaW50IGVuZCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAidGFnTmFtZSIsIEUuc3RyaW5nICJkb2N1bWVudCBsaW5rIiApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAiaHRtbCIsIEUuc3RyaW5nIGxpbmsgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IG9wZW5lZFdpZGdldCA9IE5vdGhpbmcgfQogICAgICAgICAgICAgICAgICAgICAgICAsIGluc2VydEh0bWwgZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lLCBOb3RoaW5nICkKCiAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUsIE5vdGhpbmcgKQoKICAgICAgICBTZXRUZXh0Q29sb3IgaXNXaG9sZVRleHRBdHRyIGNvbG9yIC0+CiAgICAgICAgICAgIGlmIGlzV2hvbGVUZXh0QXR0ciB0aGVuCiAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICBjb2xvcl8gPQogICAgICAgICAgICAgICAgICAgICAgICBEaWN0LmdldCBjb2xvciB3ZWJDb2xvcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0ICIwMDAwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBoZXhUb0RvY0NvbG9yCiAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICAgICAgfCB3aG9sZVRleHRCbG9jQXR0ciA9CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUF0dHJzIGlzRm9udENvbG9yQXR0ciBGb250Q29sb3IgY29sb3JfIG1vZGVsLndob2xlVGV4dEJsb2NBdHRyCiAgICAgICAgICAgICAgICAgICAgLCBvcGVuZWRXaWRnZXQgPSBOb3RoaW5nCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICwgQ21kLmJhdGNoCiAgICAgICAgICAgICAgICAgICAgW10KICAgICAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgY2FzZSBtb2RlbC5zZWxlY3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICBKdXN0IHsgc3RhcnQsIGVuZCwgYXR0cnMgfSAtPgogICAgICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUub2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgKCAic2VsZWN0aW9uU3RhcnQiLCBFLmludCBzdGFydCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAic2VsZWN0aW9uRW5kIiwgRS5pbnQgZW5kICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJhdHRyaWJ1dGUiLCBFLnN0cmluZyAiZm9yZWdyb3VuZENvbG9yIiApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAidmFsdWUiLCBFLnN0cmluZyAoIiMiICsrIChEaWN0LmdldCBjb2xvciB3ZWJDb2xvcnMgfD4gTWF5YmUud2l0aERlZmF1bHQgIjAwMDAwMCIpKSApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwgb3BlbmVkV2lkZ2V0ID0gTm90aGluZyB9CiAgICAgICAgICAgICAgICAgICAgICAgICwgYWN0aXZhdGVBdHRyaWJ1dGUgZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lLCBOb3RoaW5nICkKCiAgICAgICAgU2V0QmFja2dyb3VuZENvbG9yIGlzV2hvbGVUZXh0QXR0ciBjb2xvciAtPgogICAgICAgICAgICBpZiBpc1dob2xlVGV4dEF0dHIgdGhlbgogICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgY29sb3JfID0KICAgICAgICAgICAgICAgICAgICAgICAgRGljdC5nZXQgY29sb3Igd2ViQ29sb3JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBNYXliZS53aXRoRGVmYXVsdCAiMDAwMDAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfD4gaGV4VG9Eb2NDb2xvcgogICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgICAgIHwgd2hvbGVUZXh0QmxvY0F0dHIgPQogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBdHRycyBpc0JhY2tncm91bmRDb2xvckF0dHIgQmFja2dyb3VuZENvbG9yIGNvbG9yXyBtb2RlbC53aG9sZVRleHRCbG9jQXR0cgogICAgICAgICAgICAgICAgICAgICwgb3BlbmVkV2lkZ2V0ID0gTm90aGluZwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAsIENtZC5iYXRjaAogICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGNhc2UgbW9kZWwuc2VsZWN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgSnVzdCB7IHN0YXJ0LCBlbmQsIGF0dHJzIH0gLT4KICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFLm9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbICggInNlbGVjdGlvblN0YXJ0IiwgRS5pbnQgc3RhcnQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInNlbGVjdGlvbkVuZCIsIEUuaW50IGVuZCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAiYXR0cmlidXRlIiwgRS5zdHJpbmcgImJhY2tncm91bmRDb2xvciIgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInZhbHVlIiwgRS5zdHJpbmcgKCIjIiArKyAoRGljdC5nZXQgY29sb3Igd2ViQ29sb3JzIHw+IE1heWJlLndpdGhEZWZhdWx0ICIwMDAwMDAiKSkgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IG9wZW5lZFdpZGdldCA9IE5vdGhpbmcgfQogICAgICAgICAgICAgICAgICAgICAgICAsIGFjdGl2YXRlQXR0cmlidXRlIGRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSwgTm90aGluZyApCgogICAgICAgIFNldEZvbnQgaXNXaG9sZVRleHRBdHRyIGZvbnQgLT4KICAgICAgICAgICAgaWYgaXNXaG9sZVRleHRBdHRyIHRoZW4KICAgICAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgICAgIHwgd2hvbGVUZXh0QmxvY0F0dHIgPQogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBdHRycyBpc0ZvbnRBdHRyIEZvbnQgZm9udCBtb2RlbC53aG9sZVRleHRCbG9jQXR0cgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAsIENtZC5iYXRjaAogICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGNhc2UgbW9kZWwuc2VsZWN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgSnVzdCB7IHN0YXJ0LCBlbmQsIGF0dHJzIH0gLT4KICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFLm9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbICggInNlbGVjdGlvblN0YXJ0IiwgRS5pbnQgc3RhcnQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInNlbGVjdGlvbkVuZCIsIEUuaW50IGVuZCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAiYXR0cmlidXRlIiwgRS5zdHJpbmcgInRleHRGb250IiApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAidmFsdWUiLCBFLnN0cmluZyBmb250ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBvcGVuZWRXaWRnZXQgPSBOb3RoaW5nIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBhY3RpdmF0ZUF0dHJpYnV0ZSBkYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUsIE5vdGhpbmcgKQoKICAgICAgICBTZXRGb250U2l6ZSBpc1dob2xlVGV4dEF0dHIgbiAtPgogICAgICAgICAgICBpZiBpc1dob2xlVGV4dEF0dHIgdGhlbgogICAgICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICAgICAgfCB3aG9sZVRleHRCbG9jQXR0ciA9CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUF0dHJzIGlzRm9udFNpemVBdHRyIEZvbnRTaXplIG4gbW9kZWwud2hvbGVUZXh0QmxvY0F0dHIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBDbWQuYmF0Y2gKICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBjYXNlIG1vZGVsLnNlbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIEp1c3QgeyBzdGFydCwgZW5kLCBhdHRycyB9IC0+CiAgICAgICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5vYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAoICJzZWxlY3Rpb25TdGFydCIsIEUuaW50IHN0YXJ0ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJzZWxlY3Rpb25FbmQiLCBFLmludCBlbmQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImF0dHJpYnV0ZSIsIEUuc3RyaW5nICJmb250U2l6ZSIgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInZhbHVlIiwgRS5zdHJpbmcgPHwgU3RyaW5nLmZyb21JbnQgbiArKyAicHgiICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBvcGVuZWRXaWRnZXQgPSBOb3RoaW5nIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBhY3RpdmF0ZUF0dHJpYnV0ZSBkYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUsIE5vdGhpbmcgKQoKICAgICAgICBTZXRBbGlnbk1lbnQgYSAtPgogICAgICAgICAgICAoIHsgbW9kZWwgfCB3aG9sZVRleHRCbG9jQXR0ciA9IHNldEFsaWduTWVudCBtb2RlbC53aG9sZVRleHRCbG9jQXR0ciBhIH0KICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgKQoKICAgICAgICBVbmRvU3R5bGUgLT4KICAgICAgICAgICAgY2FzZSBtb2RlbC5zZWxlY3Rpb24gb2YKICAgICAgICAgICAgICAgIEp1c3QgeyBzdGFydCwgZW5kLCBhdHRycyB9IC0+CiAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5vYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbICggInNlbGVjdGlvblN0YXJ0IiwgRS5pbnQgc3RhcnQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAic2VsZWN0aW9uRW5kIiwgRS5pbnQgZW5kICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImF0dHJpYnV0ZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIERpY3Qua2V5cyBhdHRycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfD4gRS5saXN0IEUuc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwgb3BlbmVkV2lkZ2V0ID0gTm90aGluZyB9CiAgICAgICAgICAgICAgICAgICAgLCBkZWFjdGl2YXRlQXR0cmlidXRlcyBkYXRhCiAgICAgICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgQ2xvc2UgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IG9wZW5lZFdpZGdldCA9IE5vdGhpbmcKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICkKCiAgICAgICAgU2F2ZUFuZFF1aXQgLT4KICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAsIENtZC5ub25lCiAgICAgICAgICAgICwgSnVzdCA8fAogICAgICAgICAgICAgICAgRWRpdG9yUGx1Z2luRGF0YQogICAgICAgICAgICAgICAgICAgICggbW9kZWwub3V0cHV0CiAgICAgICAgICAgICAgICAgICAgLCBtb2RlbC53aG9sZVRleHRCbG9jQXR0cgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKQoKICAgICAgICBRdWl0IC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICAsIEp1c3QgRWRpdG9yUGx1Z2luUXVpdAogICAgICAgICAgICApCgogICAgICAgIC0tTm9PcCAtPgogICAgICAgIC0tKCBtb2RlbCwgQ21kLm5vbmUsIE5vdGhpbmcgKQogICAgICAgIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUsIE5vdGhpbmcgKQoKCnZpZXcgOgogICAgeyBhCiAgICAgICAgfCBmaWxlRXhwbG9yZXIgOiBGaWxlRXhwbG9yZXIuTW9kZWwgbXNnCiAgICAgICAgLCBwYWdlVHJlZUVkaXRvciA6IFBhZ2VUcmVlRWRpdG9yLk1vZGVsIG1zZwogICAgICAgICwgbG9nSW5mbyA6IEF1dGguQXV0aFBsdWdpbi5Mb2dJbmZvCiAgICAgICAgLCB6b25lIDogVGltZS5ab25lCiAgICAgICAgLCBtYXhIZWlnaHQgOiBJbnQKICAgIH0KICAgIC0+IENvbmZpZyBtc2cKICAgIC0+IE1vZGVsIG1zZwogICAgLT4gRWxlbWVudC5FbGVtZW50IG1zZwp2aWV3IGNvbmZpZyByZW5kZXJDb25maWcgbW9kZWwgPQogICAgY29sdW1uCiAgICAgICAgWyBoZWlnaHQgZmlsbAogICAgICAgICwgd2lkdGggZmlsbAogICAgICAgIF0KICAgICAgICBbIGVtYmVkZGVkU3R5bGVTaGVldCByZW5kZXJDb25maWcgbW9kZWwud2hvbGVUZXh0QmxvY0F0dHIKICAgICAgICAsIGNvbHVtbgogICAgICAgICAgICBbIHBhZGRpbmcgMTUKICAgICAgICAgICAgLCBzcGFjaW5nIDE1CiAgICAgICAgICAgICwgc2Nyb2xsYmFyWQogICAgICAgICAgICAsIGhlaWdodCBmaWxsCiAgICAgICAgICAgICwgd2lkdGggZmlsbAogICAgICAgICAgICBdCiAgICAgICAgICAgIFsgZWRpdG9yIEZhbHNlIGNvbmZpZyBtb2RlbAoKICAgICAgICAgICAgLS0sIHRleHRCbG9ja1ByZXZpZXcgbW9kZWwgcmVuZGVyQ29uZmlnCiAgICAgICAgICAgICwgcm93CiAgICAgICAgICAgICAgICBbIHNwYWNpbmcgMTUKICAgICAgICAgICAgICAgICwgRm9udC5zaXplIDE2CiAgICAgICAgICAgICAgICAsIHBhZGRpbmdFYWNoCiAgICAgICAgICAgICAgICAgICAgeyB0b3AgPSAwCiAgICAgICAgICAgICAgICAgICAgLCBib3R0b20gPSAxNQogICAgICAgICAgICAgICAgICAgICwgcmlnaHQgPSAwCiAgICAgICAgICAgICAgICAgICAgLCBsZWZ0ID0gMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIFsgSW5wdXQuYnV0dG9uIChidXR0b25TdHlsZSBUcnVlKQogICAgICAgICAgICAgICAgICAgIHsgb25QcmVzcyA9IEp1c3QgKG1vZGVsLmV4dGVybmFsTXNnIFF1aXQpCiAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9IHRleHQgIlF1aXR0ZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBJbnB1dC5idXR0b24gKGJ1dHRvblN0eWxlIFRydWUpCiAgICAgICAgICAgICAgICAgICAgeyBvblByZXNzID0gSnVzdCAobW9kZWwuZXh0ZXJuYWxNc2cgU2F2ZUFuZFF1aXQpCiAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9IHRleHQgIlZhbGlkZXIgZXQgUXVpdHRlciIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIF0KICAgICAgICBdCgoKc3RyaW5naWZ5QXR0cmlidXRlcyA6IExpc3QgKCBTdHJpbmcsIFN0cmluZyApIC0+IFN0cmluZwpzdHJpbmdpZnlBdHRyaWJ1dGVzIGF0dHJpYnV0ZXMgPQogICAgTGlzdC5tYXAgKFwoIGF0dHIsIHZhbHVlICkgLT4gYXR0ciArKyAiOiAiICsrIHZhbHVlICsrICI7IikgYXR0cmlidXRlcwogICAgICAgIHw+IFN0cmluZy5qb2luICIgIgoKCmVkaXRvciA6CiAgICBCb29sCiAgICAtPgogICAgICAgIHsgYQogICAgICAgICAgICB8IGZpbGVFeHBsb3JlciA6IEZpbGVFeHBsb3Jlci5Nb2RlbCBtc2cKICAgICAgICAgICAgLCBwYWdlVHJlZUVkaXRvciA6IFBhZ2VUcmVlRWRpdG9yLk1vZGVsIG1zZwogICAgICAgICAgICAsIGxvZ0luZm8gOiBBdXRoLkF1dGhQbHVnaW4uTG9nSW5mbwogICAgICAgICAgICAsIHpvbmUgOiBUaW1lLlpvbmUKICAgICAgICAgICAgLCBtYXhIZWlnaHQgOiBJbnQKICAgICAgICB9CiAgICAtPiBNb2RlbCBtc2cKICAgIC0+IEVsZW1lbnQuRWxlbWVudCBtc2cKZWRpdG9yIGlzSW5OZXdzRWRpdG9yIGNvbmZpZyBtb2RlbCA9CiAgICBjb2x1bW4KICAgICAgICBbIHNwYWNpbmcgMTAKICAgICAgICBdCiAgICAgICAgWyB0cml4RWRpdG9yIGlzSW5OZXdzRWRpdG9yIGNvbmZpZyBtb2RlbAoKICAgICAgICAtLSwgcGFyYWdyYXBoIFtdIFsgdGV4dCA8fCBtb2RlbC5odG1sQ29udGVudC5odG1sIF0KICAgICAgICAtLSwgY2FzZSBtb2RlbC5vdXRwdXQgb2YKICAgICAgICAtLSAgICAoVHJpeEh0bWwgcykgOjogeHMgLT4KICAgICAgICAtLSAgICAgICAgcGFyYWdyYXBoIFtdIFsgdGV4dCA8fCBzIF0KICAgICAgICAtLSAgICBfIC0+CiAgICAgICAgLS0gICAgICAgIEVsZW1lbnQubm9uZQogICAgICAgIF0KCgp0cml4RWRpdG9yIDoKICAgIEJvb2wKICAgIC0+CiAgICAgICAgeyBhCiAgICAgICAgICAgIHwgZmlsZUV4cGxvcmVyIDogRmlsZUV4cGxvcmVyLk1vZGVsIG1zZwogICAgICAgICAgICAsIHBhZ2VUcmVlRWRpdG9yIDogUGFnZVRyZWVFZGl0b3IuTW9kZWwgbXNnCiAgICAgICAgICAgICwgbG9nSW5mbyA6IEF1dGguQXV0aFBsdWdpbi5Mb2dJbmZvCiAgICAgICAgICAgICwgem9uZSA6IFRpbWUuWm9uZQogICAgICAgICAgICAsIG1heEhlaWdodCA6IEludAogICAgICAgIH0KICAgIC0+IE1vZGVsIG1zZwogICAgLT4gRWxlbWVudC5FbGVtZW50IG1zZwp0cml4RWRpdG9yIGlzSW5OZXdzRWRpdG9yIGNvbmZpZyBtb2RlbCA9CiAgICBjb2x1bW4KICAgICAgICBbIHNwYWNpbmcgMTAgXQogICAgICAgIFsgY3VzdG9tVG9vbGJhciBjb25maWcgbW9kZWwKICAgICAgICAsIEVsZW1lbnQubWFwIG1vZGVsLmV4dGVybmFsTXNnIDx8CiAgICAgICAgICAgIHBhcmFncmFwaAogICAgICAgICAgICAgICAgWyB3aWR0aCAocHggNzAwKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgWyBodG1sIDx8CiAgICAgICAgICAgICAgICAgICAgSHRtbC5kaXYKICAgICAgICAgICAgICAgICAgICAgICAgW10KICAgICAgICAgICAgICAgICAgICAgICAgWyBIdG1sLm5vZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0cml4LXRvb2xiYXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIEh0bWxBdHRyLmlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIGlzSW5OZXdzRWRpdG9yIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRyaXgtdG9vbGJhci1uZXdzIgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHJpeC10b29sYmFyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAgICAgICAgICwgSHRtbC5ub2RlICJpbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgSHRtbEF0dHIudHlwZV8gImhpZGRlbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgSHRtbEF0dHIuaWQgInJlc2V0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBIdG1sQXR0ci52YWx1ZSAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW10KICAgICAgICAgICAgICAgICAgICAgICAgLCBIdG1sLm5vZGUgInRyaXgtZWRpdG9yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBvbiAidHJpeC1jaGFuZ2UiIChELm1hcCBHZXRIdG1sQ29udGVudCBkZWNvZGVFZGl0b3JNYXJrdXApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIG9uICJ0cml4LXNlbGVjdGlvbi1jaGFuZ2UiIChELm1hcCAoYWx3YXlzIEdldFNlbGVjdGlvbikgKEQuc3VjY2VlZCAoKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIEh0bWxBdHRyLmNsYXNzICJ0cml4LWNvbnRlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIEh0bWxBdHRyLmNsYXNzICJ0cml4LWNvbnRlbnQtZWRpdG9yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBIdG1sQXR0ci5hdHRyaWJ1dGUgInRvb2xiYXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIGlzSW5OZXdzRWRpdG9yIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRyaXgtdG9vbGJhci1uZXdzIgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHJpeC10b29sYmFyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgSHRtbEF0dHIuYXR0cmlidXRlICJpbnB1dCIgInJlc2V0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBIdG1sQXR0ci5zdHlsZSAibWF4SGVpZ2h0IiAoU3RyaW5nLmZyb21JbnQgKGNvbmZpZy5tYXhIZWlnaHQgLSAxNTUpICsrICJweCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIEh0bWxBdHRyLnN0eWxlICJvdmVyZmxvdy15IiAiYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIF0KICAgICAgICBdCgoKaWNvblNpemUgPQogICAgMTgKCgpjdXN0b21Ub29sYmFyIGNvbmZpZyBtb2RlbCA9CiAgICBsZXQKICAgICAgICBzZWxlY3Rpb25Db2xsYXBzZWQgPQogICAgICAgICAgICBjYXNlIG1vZGVsLnNlbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICAgICAgICAgIE5vdGhpbmcKCiAgICAgICAgICAgICAgICBKdXN0IHsgc3RhcnQsIGVuZCB9IC0+CiAgICAgICAgICAgICAgICAgICAgSnVzdCAoc3RhcnQgPT0gZW5kKQoKICAgICAgICBjYW5VcGRhdGVHbG9iYWxBdHRyID0KICAgICAgICAgICAgY2FzZSBtb2RlbC5zZWxlY3Rpb24gb2YKICAgICAgICAgICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgICAgICAgICBUcnVlCgogICAgICAgICAgICAgICAgSnVzdCB7IHN0YXJ0LCBlbmQgfSAtPgogICAgICAgICAgICAgICAgICAgIHN0YXJ0ID09IGVuZAoKICAgICAgICBzZWxlY3Rpb25BdHRycyA9CiAgICAgICAgICAgIE1heWJlLm1hcCAuYXR0cnMgbW9kZWwuc2VsZWN0aW9uCgogICAgICAgIHdob2xlVGV4dEJsb2NBdHRycyA9CiAgICAgICAgICAgIExpc3QuY29uY2F0TWFwIGRvY0F0dHJUb0NzcyBtb2RlbC53aG9sZVRleHRCbG9jQXR0cgogICAgICAgICAgICAgICAgfD4gRGljdC5mcm9tTGlzdAoKICAgICAgICBmb250Q29sb3IgPQogICAgICAgICAgICBjYXNlCiAgICAgICAgICAgICAgICBNYXliZS5hbmRUaGVuIChEaWN0LmdldCAiZm9yZWdyb3VuZENvbG9yIikgc2VsZWN0aW9uQXR0cnMKICAgICAgICAgICAgICAgICAgICB8PiBNYXliZS5hbmRUaGVuIHBhcnNlQ29sb3IKICAgICAgICAgICAgb2YKICAgICAgICAgICAgICAgIEp1c3QgYyAtPgogICAgICAgICAgICAgICAgICAgIEp1c3QgYwoKICAgICAgICAgICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgICAgICAgICBjYXNlCiAgICAgICAgICAgICAgICAgICAgICAgIERpY3QuZ2V0ICJjb2xvciIgd2hvbGVUZXh0QmxvY0F0dHJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBNYXliZS5hbmRUaGVuIHBhcnNlQ29sb3IKICAgICAgICAgICAgICAgICAgICBvZgogICAgICAgICAgICAgICAgICAgICAgICBKdXN0IGMgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgYwoKICAgICAgICAgICAgICAgICAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCAiYmxhY2siCgogICAgICAgIGJhY2tncm91bmRDb2xvciA9CiAgICAgICAgICAgIGNhc2UKICAgICAgICAgICAgICAgIE1heWJlLmFuZFRoZW4gKERpY3QuZ2V0ICJiYWNrZ3JvdW5kQ29sb3IiKSBzZWxlY3Rpb25BdHRycwogICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLmFuZFRoZW4gcGFyc2VDb2xvcgogICAgICAgICAgICBvZgogICAgICAgICAgICAgICAgSnVzdCBjIC0+CiAgICAgICAgICAgICAgICAgICAgSnVzdCBjCgogICAgICAgICAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICAgICAgICAgIGNhc2UKICAgICAgICAgICAgICAgICAgICAgICAgRGljdC5nZXQgImJhY2tncm91bmQtY29sb3IiIHdob2xlVGV4dEJsb2NBdHRycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUuYW5kVGhlbiBwYXJzZUNvbG9yCiAgICAgICAgICAgICAgICAgICAgb2YKICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBjIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdXN0IGMKCiAgICAgICAgICAgICAgICAgICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgIndoaXRlIgoKICAgICAgICB0ZXh0Rm9udCA9CiAgICAgICAgICAgIE1heWJlLmFuZFRoZW4gKERpY3QuZ2V0ICJ0ZXh0Rm9udCIpIHNlbGVjdGlvbkF0dHJzCiAgICAgICAgICAgICAgICB8PiBNYXliZS53aXRoRGVmYXVsdCAiQXJpYWwiCgogICAgICAgIGZvbnRTaXplID0KICAgICAgICAgICAgTWF5YmUuYW5kVGhlbiAoRGljdC5nZXQgImZvbnRTaXplIikgc2VsZWN0aW9uQXR0cnMKICAgICAgICAgICAgICAgIHw+IE1heWJlLm1hcCAoU3RyaW5nLnJlcGxhY2UgInB4IiAiIikKICAgICAgICAgICAgICAgIHw+IE1heWJlLmFuZFRoZW4gU3RyaW5nLnRvSW50CiAgICAgICAgICAgICAgICB8PiBNYXliZS53aXRoRGVmYXVsdCAxNgoKICAgICAgICBocmVmID0KICAgICAgICAgICAgTWF5YmUuYW5kVGhlbiAoRGljdC5nZXQgImhyZWYiKSBzZWxlY3Rpb25BdHRycwoKICAgICAgICBmb250T3B0aW9uVmlldyBzZWxlY3RlZEZvbnQgZiA9CiAgICAgICAgICAgIEh0bWwub3B0aW9uCiAgICAgICAgICAgICAgICBbIEh0bWxBdHRyLnZhbHVlIGYKICAgICAgICAgICAgICAgICwgSHRtbEF0dHIuc2VsZWN0ZWQgKHNlbGVjdGVkRm9udCA9PSBmKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgWyBIdG1sLnRleHQgZiBdCgogICAgICAgIGZvbnRTaXplT3B0aW9uVmlldyBzZWxlY3RlZFNpemUgZnMgPQogICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0KICAgICAgICAgICAgICAgICAgICBTdHJpbmcudG9JbnQgZnMKICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUubWFwIChcZnNfIC0+IHNlbGVjdGVkU2l6ZSA9PSBmc18pCiAgICAgICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0IEZhbHNlCiAgICAgICAgICAgIGluCiAgICAgICAgICAgIEh0bWwub3B0aW9uCiAgICAgICAgICAgICAgICBbIEh0bWxBdHRyLnZhbHVlIGZzCiAgICAgICAgICAgICAgICAsIEh0bWxBdHRyLnNlbGVjdGVkIHNlbGVjdGVkCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICBbIEh0bWwudGV4dCBmcyBdCiAgICBpbgogICAgcm93CiAgICAgICAgWyBzcGFjaW5nIDEwCiAgICAgICAgLCB3aWR0aCBmaWxsCiAgICAgICAgXQogICAgICAgIFsgbGlua1BpY2tlciBjb25maWcKICAgICAgICAgICAgbW9kZWwuZXh0ZXJuYWxNc2cKICAgICAgICAgICAgImludGVybmFsTGlua1BpY2tlciIKICAgICAgICAgICAgLS0oTWF5YmUubWFwIChTdHJpbmcuc3RhcnRzV2l0aCAibGllbi1pbnRlcm5lOiIpIGhyZWYKICAgICAgICAgICAgLS0gICAgfD4gTWF5YmUud2l0aERlZmF1bHQgRmFsc2UKICAgICAgICAgICAgLS0pCiAgICAgICAgICAgIChzZWxlY3Rpb25Db2xsYXBzZWQgPT0gSnVzdCBGYWxzZSkKICAgICAgICAgICAgKG1vZGVsLm9wZW5lZFdpZGdldCA9PSBKdXN0IEludGVybmFsTGlua3MpCiAgICAgICAgICAgIGhyZWYKICAgICAgICAgICAgT3BlbkludGVybmFsTGlua3MKICAgICAgICAgICAgSW5zZXJ0SW50ZXJuYWxMaW5rCiAgICAgICAgLCBkb2NQaWNrZXIgY29uZmlnCiAgICAgICAgICAgIG1vZGVsLmV4dGVybmFsTXNnCiAgICAgICAgICAgICJkb2NQaWNrZXIiCiAgICAgICAgICAgIChzZWxlY3Rpb25Db2xsYXBzZWQgPT0gSnVzdCBGYWxzZSkKICAgICAgICAgICAgLS0oTWF5YmUubWFwIChTdHJpbmcuc3RhcnRzV2l0aCAiZG9jOiIpIGhyZWYKICAgICAgICAgICAgLS0gICAgfD4gTWF5YmUud2l0aERlZmF1bHQgRmFsc2UKICAgICAgICAgICAgLS0pCiAgICAgICAgICAgIChtb2RlbC5vcGVuZWRXaWRnZXQgPT0gSnVzdCBEb2NQaWNrZXIpCiAgICAgICAgICAgIGhyZWYKICAgICAgICAgICAgT3BlbkRvY1BpY2tlcgogICAgICAgICAgICBJbnNlcnREb2NMaW5rCiAgICAgICAgLCBFbGVtZW50Lm1hcCBtb2RlbC5leHRlcm5hbE1zZyA8fAogICAgICAgICAgICBjb2xvclBpY2tlcgogICAgICAgICAgICAgICAgImZvbnRDb2xvclBpY2tlciIKICAgICAgICAgICAgICAgIFRydWUKICAgICAgICAgICAgICAgIChtb2RlbC5vcGVuZWRXaWRnZXQgPT0gSnVzdCBGb250Q29sb3JQaWNrZXIpCiAgICAgICAgICAgICAgICBmb250Q29sb3IKICAgICAgICAgICAgICAgIE9wZW5Gb250Q29sb3JQaWNrZXIKICAgICAgICAgICAgICAgIChTZXRUZXh0Q29sb3IgKHNlbGVjdGlvbkNvbGxhcHNlZCA9PSBKdXN0IFRydWUgfHwgc2VsZWN0aW9uQ29sbGFwc2VkID09IE5vdGhpbmcpKQogICAgICAgICAgICAgICAgKGVsIFtdIChodG1sIDx8IEljb25zLnBlblRvb2wgaWNvblNpemUpKQogICAgICAgICwgRWxlbWVudC5tYXAgbW9kZWwuZXh0ZXJuYWxNc2cgPHwKICAgICAgICAgICAgY29sb3JQaWNrZXIKICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kQ29sb3JQaWNrZXIiCiAgICAgICAgICAgICAgICBUcnVlCiAgICAgICAgICAgICAgICAobW9kZWwub3BlbmVkV2lkZ2V0ID09IEp1c3QgQmFja2dyb3VuZENvbG9yUGlja2VyKQogICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yCiAgICAgICAgICAgICAgICBPcGVuQmFja2dyb3VuZENvbG9yUGlja2VyCiAgICAgICAgICAgICAgICAoU2V0QmFja2dyb3VuZENvbG9yIChzZWxlY3Rpb25Db2xsYXBzZWQgPT0gSnVzdCBUcnVlIHx8IHNlbGVjdGlvbkNvbGxhcHNlZCA9PSBOb3RoaW5nKSkKICAgICAgICAgICAgICAgIChlbCBbXSAoaHRtbCA8fCBJY29ucy5kcm9wbGV0IGljb25TaXplKSkKICAgICAgICAsIEVsZW1lbnQubWFwIG1vZGVsLmV4dGVybmFsTXNnIDx8CiAgICAgICAgICAgIGVsCiAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgKGh0bWwgPHwKICAgICAgICAgICAgICAgICAgICBIdG1sLnNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgICBbIEh0bWxFdmVudHMub25JbnB1dCAoU2V0Rm9udCAoc2VsZWN0aW9uQ29sbGFwc2VkID09IEp1c3QgVHJ1ZSB8fCBzZWxlY3Rpb25Db2xsYXBzZWQgPT0gTm90aGluZykpCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKExpc3QubWFwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZm9udE9wdGlvblZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Rm9udAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKExpc3Quc29ydCBmb250cykKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgKQogICAgICAgICwgRWxlbWVudC5tYXAgbW9kZWwuZXh0ZXJuYWxNc2cgPHwKICAgICAgICAgICAgZWwKICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAoaHRtbCA8fAogICAgICAgICAgICAgICAgICAgIEh0bWwuc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgIFsgSHRtbEV2ZW50cy5vbklucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXG4gLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcudG9JbnQgbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBNYXliZS53aXRoRGVmYXVsdCAxNgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBTZXRGb250U2l6ZSAoc2VsZWN0aW9uQ29sbGFwc2VkID09IEp1c3QgVHJ1ZSB8fCBzZWxlY3Rpb25Db2xsYXBzZWQgPT0gTm90aGluZykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tLCBIdG1sQXR0ci5kaXNhYmxlZCAobm90IDx8IGNhbkN1c3RvbVN0eWxlU2VsZWN0aW9uIG1vZGVsKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIChMaXN0Lm1hcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZvbnRTaXplT3B0aW9uVmlldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZXMKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgKQogICAgICAgICwgRWxlbWVudC5tYXAgbW9kZWwuZXh0ZXJuYWxNc2cgPHwKICAgICAgICAgICAgcm93CiAgICAgICAgICAgICAgICBbIHNwYWNpbmcgMTAgXQogICAgICAgICAgICAgICAgWyBJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgICAgICAodG9vZ2xlQnV0dG9uU3R5bGUgKExpc3QubWVtYmVyIEZvbnRBbGlnbkxlZnQgbW9kZWwud2hvbGVUZXh0QmxvY0F0dHIpIGNhblVwZGF0ZUdsb2JhbEF0dHIpCiAgICAgICAgICAgICAgICAgICAgeyBvblByZXNzID0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2FuVXBkYXRlR2xvYmFsQXR0ciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdXN0IChTZXRBbGlnbk1lbnQgRm9udEFsaWduTGVmdCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tSnVzdCAoU2V0R2xvYmFsQXR0cmlidXRlIFRydWUgKCAidGV4dC1hbGlnbiIsICJsZWZ0IiApKQoKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90aGluZwogICAgICAgICAgICAgICAgICAgICwgbGFiZWwgPQogICAgICAgICAgICAgICAgICAgICAgICBlbCBbXSAoaHRtbCA8fCBJY29ucy5hbGlnbkxlZnQgaWNvblNpemUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgICAgICAodG9vZ2xlQnV0dG9uU3R5bGUgKExpc3QubWVtYmVyIENlbnRlciBtb2RlbC53aG9sZVRleHRCbG9jQXR0cikgY2FuVXBkYXRlR2xvYmFsQXR0cikKICAgICAgICAgICAgICAgICAgICB7IG9uUHJlc3MgPQogICAgICAgICAgICAgICAgICAgICAgICBpZiBjYW5VcGRhdGVHbG9iYWxBdHRyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgKFNldEFsaWduTWVudCBDZW50ZXIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLUp1c3QgKFNldEdsb2JhbEF0dHJpYnV0ZSBUcnVlICggInRleHQtYWxpZ24iLCAiY2VudGVyIiApKQoKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90aGluZwogICAgICAgICAgICAgICAgICAgICwgbGFiZWwgPQogICAgICAgICAgICAgICAgICAgICAgICBlbCBbXSAoaHRtbCA8fCBhbGlnbkNlbnRlciBpY29uU2l6ZSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAsIElucHV0LmJ1dHRvbgogICAgICAgICAgICAgICAgICAgICh0b29nbGVCdXR0b25TdHlsZQogICAgICAgICAgICAgICAgICAgICAgICAoTGlzdC5tZW1iZXIgRm9udEFsaWduUmlnaHQgbW9kZWwud2hvbGVUZXh0QmxvY0F0dHIpCiAgICAgICAgICAgICAgICAgICAgICAgIGNhblVwZGF0ZUdsb2JhbEF0dHIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgeyBvblByZXNzID0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2FuVXBkYXRlR2xvYmFsQXR0ciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdXN0IChTZXRBbGlnbk1lbnQgRm9udEFsaWduUmlnaHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLUp1c3QgKFNldEdsb2JhbEF0dHJpYnV0ZSBUcnVlICggInRleHQtYWxpZ24iLCAicmlnaHQiICkpCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsIFtdIChodG1sIDx8IEljb25zLmFsaWduUmlnaHQgaWNvblNpemUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgICAgICAodG9vZ2xlQnV0dG9uU3R5bGUKICAgICAgICAgICAgICAgICAgICAgICAgKExpc3QubWVtYmVyIEp1c3RpZnkgbW9kZWwud2hvbGVUZXh0QmxvY0F0dHIpCiAgICAgICAgICAgICAgICAgICAgICAgIGNhblVwZGF0ZUdsb2JhbEF0dHIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgeyBvblByZXNzID0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2FuVXBkYXRlR2xvYmFsQXR0ciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdXN0IChTZXRBbGlnbk1lbnQgSnVzdGlmeSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tSnVzdCAoU2V0R2xvYmFsQXR0cmlidXRlIFRydWUgKCAidGV4dC1hbGlnbiIsICJqdXN0aWZ5IiApKQoKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90aGluZwogICAgICAgICAgICAgICAgICAgICwgbGFiZWwgPQogICAgICAgICAgICAgICAgICAgICAgICBlbCBbXSAoaHRtbCA8fCBhbGlnbkp1c3RpZnkgaWNvblNpemUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICwgRWxlbWVudC5tYXAgbW9kZWwuZXh0ZXJuYWxNc2cgPHwKICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICBjYW5VbmRvU3R5bGUgPQogICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbkF0dHJzIC89IEp1c3QgRGljdC5lbXB0eQogICAgICAgICAgICBpbgogICAgICAgICAgICBJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgIChFbGVtZW50LmFsaWduUmlnaHQgOjogYnV0dG9uU3R5bGUgY2FuVW5kb1N0eWxlKQogICAgICAgICAgICAgICAgeyBvblByZXNzID0KICAgICAgICAgICAgICAgICAgICBpZiBjYW5VbmRvU3R5bGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBKdXN0IFVuZG9TdHlsZQoKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIE5vdGhpbmcKICAgICAgICAgICAgICAgICwgbGFiZWwgPQogICAgICAgICAgICAgICAgICAgIGVsIFtdIChodG1sIDx8IHhTcXVhcmUgaWNvblNpemUpCiAgICAgICAgICAgICAgICB9CgogICAgICAgIC0tY29uZmlnLnBhZ2VMaXN0CiAgICAgICAgXQoKCnRleHRCbG9ja1ByZXZpZXcgOiBNb2RlbCBtc2cgLT4gQ29uZmlnIG1zZyAtPiBFbGVtZW50LkVsZW1lbnQgbXNnCnRleHRCbG9ja1ByZXZpZXcgbW9kZWwgY29uZmlnID0KICAgIGNvbHVtbgogICAgICAgIFsgd2lkdGggKG1pbmltdW0gNTAwIChtYXhpbXVtIDcwMCBmaWxsKSkKICAgICAgICAsIGhlaWdodCAobWF4aW11bSA1MDAgZmlsbCkKICAgICAgICAsIHNjcm9sbGJhclkKICAgICAgICAsIHNwYWNpbmcgMjAKICAgICAgICAsIGFsaWduVG9wCiAgICAgICAgLCBCb3JkZXIuc2hhZG93CiAgICAgICAgICAgIHsgb2Zmc2V0ID0gKCA0LCA0ICkKICAgICAgICAgICAgLCBzaXplID0gNQogICAgICAgICAgICAsIGJsdXIgPSAxMAogICAgICAgICAgICAsIGNvbG9yID0gcmdiYSAwIDAgMCAwLjE2CiAgICAgICAgICAgIH0KICAgICAgICAsIHBhZGRpbmcgMTUKCiAgICAgICAgLS0sIEZvbnQuZmFtaWx5IFsgRm9udC50eXBlZmFjZSAiQXJpYWwiIF0KICAgICAgICAtLSwgRm9udC5zaXplIDE2CiAgICAgICAgXQogICAgICAgIChyZW5kZXJUZXh0QmxvY2sKICAgICAgICAgICAgY29uZmlnCiAgICAgICAgICAgIHsgdWlkID0gLTEKICAgICAgICAgICAgLCBkb2NTdHlsZUlkID0gTm90aGluZwogICAgICAgICAgICAsIGh0bWxJZCA9IE5vdGhpbmcKICAgICAgICAgICAgLCBjbGFzc2VzID0gU2V0LmVtcHR5CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbW9kZWwud2hvbGVUZXh0QmxvY0F0dHIKICAgICAgICAgICAgbW9kZWwub3V0cHV0CiAgICAgICAgKQoKCm5ld3NFZGl0b3JWaWV3IGNvbmZpZyByZW5kZXJDb25maWcgbW9kZWwgPQogICAgY29sdW1uCiAgICAgICAgW10KICAgICAgICBbIGVtYmVkZGVkU3R5bGVTaGVldAogICAgICAgICAgICByZW5kZXJDb25maWcKICAgICAgICAgICAgbW9kZWwud2hvbGVUZXh0QmxvY0F0dHIKICAgICAgICAsIGVkaXRvcgogICAgICAgICAgICBUcnVlCiAgICAgICAgICAgIGNvbmZpZwogICAgICAgICAgICBtb2RlbAogICAgICAgIF0KCgpkZWNvZGVFZGl0b3JNYXJrdXAgOiBELkRlY29kZXIgSHRtbENvbnRlbnQKZGVjb2RlRWRpdG9yTWFya3VwID0KICAgIEQubWFwMiBIdG1sQ29udGVudAogICAgICAgIChELmF0IFsgInRhcmdldCIsICJ2YWx1ZSIgXSBELnN0cmluZykKICAgICAgICAoRC5hdCBbICJ0YXJnZXQiLCAidGV4dENvbnRlbnQiIF0gRC5zdHJpbmcpCgoKZGVjb2RlU2VsZWN0aW9uID0KICAgIGxldAogICAgICAgIGRlY29kZUF0dHJWYWx1ZSA9CiAgICAgICAgICAgIEQub25lT2YKICAgICAgICAgICAgICAgIFsgRC5zdHJpbmcKICAgICAgICAgICAgICAgICwgRC5pbnQKICAgICAgICAgICAgICAgICAgICB8PiBELm1hcCBTdHJpbmcuZnJvbUludAogICAgICAgICAgICAgICAgLCBELmJvb2wKICAgICAgICAgICAgICAgICAgICB8PiBELmFuZFRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgKFxiIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBELnN1Y2NlZWQgInRydWUiCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEQuc3VjY2VlZCAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICwgRC5zdWNjZWVkICJ1bmtub3duIgogICAgICAgICAgICAgICAgXQogICAgaW4KICAgIEQubWFwNSAoXHN0YXJ0IGVuZCBhdHRycyBpZHMgdGV4dCAtPiAoIFNlbGVjdGlvbiBzdGFydCBlbmQgYXR0cnMgdGV4dCwgaWRzICkpCiAgICAgICAgKEQuZmllbGQgInN0YXJ0IiBELmludCkKICAgICAgICAoRC5maWVsZCAiZW5kIiBELmludCkKICAgICAgICAoRC5maWVsZCAiYXR0cnMiIChELm1hcCBEaWN0LmZyb21MaXN0IChELmtleVZhbHVlUGFpcnMgZGVjb2RlQXR0clZhbHVlKSkpCiAgICAgICAgKEQuZmllbGQgImF0dGFjaG1lbnRzSWRzIiAoRC5saXN0IEQuaW50KSkKICAgICAgICAoRC5maWVsZCAidGV4dCIgRC5zdHJpbmcpCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgpleHRyYWN0VmFsdWUgOiBTdHJpbmcgLT4gTGlzdCAoIFN0cmluZywgU3RyaW5nICkgLT4gTWF5YmUgU3RyaW5nCmV4dHJhY3RWYWx1ZSBhdHRyaWJ1dGUgYXR0cnMgPQogICAgY2FzZQogICAgICAgIExpc3QuZmlsdGVyIChcKCBhLCB2ICkgLT4gYSA9PSBhdHRyaWJ1dGUpIGF0dHJzCiAgICAgICAgICAgIHw+IExpc3QuaGVhZAogICAgb2YKICAgICAgICBKdXN0ICggYSwgdiApIC0+CiAgICAgICAgICAgIEp1c3QgdgoKICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgIE5vdGhpbmcKCgphZGRXaG9sZVRleHRBdHRycyA6IExpc3QgRG9jdW1lbnQuRG9jQXR0cmlidXRlIC0+IExpc3QgSHRtbC5QYXJzZXIuTm9kZSAtPiBIdG1sLlBhcnNlci5Ob2RlCmFkZFdob2xlVGV4dEF0dHJzIGF0dHJzIG5vZGVzID0KICAgIGNhc2Ugbm9kZXMgb2YKICAgICAgICAoRWxlbWVudCAiZGl2IiBhdHRyc18gbm9kZXNfKSA6OiBbXSAtPgogICAgICAgICAgICBFbGVtZW50ICJkaXYiIChzdHlsZUF0dHIgYXR0cnMpIG5vZGVzXwoKICAgICAgICBlbGVtcyAtPgogICAgICAgICAgICBFbGVtZW50ICJkaXYiIChzdHlsZUF0dHIgYXR0cnMpIGVsZW1zCgoKdGV4dEJsb2NrRWxlbWVudFRvTm9kZSA6IERpY3QgU3RyaW5nIHsgcGF0aCA6IFN0cmluZywgbmFtZSA6IFN0cmluZyB9IC0+IFRleHRCbG9ja0VsZW1lbnQgLT4gTGlzdCBIdG1sLlBhcnNlci5Ob2RlCnRleHRCbG9ja0VsZW1lbnRUb05vZGUgcGFnZUluZGV4IHRiZSA9CiAgICBjYXNlIHRiZSBvZgogICAgICAgIFBhcmFncmFwaCBhdHRycyBwcmltcyAtPgogICAgICAgICAgICBbIEVsZW1lbnQgInAiIChzdHlsZUF0dHIgYXR0cnMpIChMaXN0Lm1hcCAodGV4dEJsb2NrUHJpbVRvTm9kZSBwYWdlSW5kZXgpIHByaW1zKSBdCgogICAgICAgIFVMaXN0IGF0dHJzIGxpcyAtPgogICAgICAgICAgICBbIEVsZW1lbnQgInVsIgogICAgICAgICAgICAgICAgKHN0eWxlQXR0ciBhdHRycykKICAgICAgICAgICAgICAgIChMaXN0Lm1hcCAoXGxpIC0+IEVsZW1lbnQgImxpIiBbXSAoTGlzdC5tYXAgKHRleHRCbG9ja1ByaW1Ub05vZGUgcGFnZUluZGV4KSBsaSkpIGxpcykKICAgICAgICAgICAgXQoKICAgICAgICBIZWFkaW5nIGF0dHJzICggMSwgcyApIC0+CiAgICAgICAgICAgIFsgRWxlbWVudCAiaDEiIChzdHlsZUF0dHIgYXR0cnMpIFsgSHRtbC5QYXJzZXIuVGV4dCBzIF0gXQoKICAgICAgICBIZWFkaW5nIGF0dHJzICggMiwgcyApIC0+CiAgICAgICAgICAgIFsgRWxlbWVudCAiaDIiIChzdHlsZUF0dHIgYXR0cnMpIFsgSHRtbC5QYXJzZXIuVGV4dCBzIF0gXQoKICAgICAgICBIZWFkaW5nIGF0dHJzICggMywgcyApIC0+CiAgICAgICAgICAgIFsgRWxlbWVudCAiaDMiIChzdHlsZUF0dHIgYXR0cnMpIFsgSHRtbC5QYXJzZXIuVGV4dCBzIF0gXQoKICAgICAgICBUQlByaW1pdGl2ZSBwcmltIC0+CiAgICAgICAgICAgIFsgdGV4dEJsb2NrUHJpbVRvTm9kZSBwYWdlSW5kZXggcHJpbSBdCgogICAgICAgIFRyaXhIdG1sIGh0bWwgLT4KICAgICAgICAgICAgSHRtbC5QYXJzZXIucnVuIGh0bWwKICAgICAgICAgICAgICAgIHw+IFJlc3VsdC53aXRoRGVmYXVsdCBbXQoKICAgICAgICBfIC0+CiAgICAgICAgICAgIFtdCgoKdGV4dEJsb2NrUHJpbVRvTm9kZSA6IERpY3QgU3RyaW5nIHsgcGF0aCA6IFN0cmluZywgbmFtZSA6IFN0cmluZyB9IC0+IFRleHRCbG9ja1ByaW1pdGl2ZSAtPiBIdG1sLlBhcnNlci5Ob2RlCnRleHRCbG9ja1ByaW1Ub05vZGUgcGFnZUluZGV4IHRicCA9CiAgICBjYXNlIHRicCBvZgogICAgICAgIERvY3VtZW50LlRleHQgW10gcyAtPgogICAgICAgICAgICBIdG1sLlBhcnNlci5UZXh0IHMKCiAgICAgICAgRG9jdW1lbnQuVGV4dCBhdHRycyBzIC0+CiAgICAgICAgICAgIEVsZW1lbnQgInNwYW4iIChzdHlsZUF0dHIgYXR0cnMpIFsgSHRtbC5QYXJzZXIuVGV4dCBzIF0KCiAgICAgICAgTGluayBhdHRycyB7IHRhcmdldEJsYW5rLCB1cmwsIGxhYmVsIH0gLT4KICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICB1cmxfID0KICAgICAgICAgICAgICAgICAgICBjYXNlIERpY3QuZ2V0IHVybCBwYWdlSW5kZXggb2YKICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBfIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGllbi1pbnRlcm5lOiIgKysgdXJsCgogICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBTdHJpbmcuc3RhcnRzV2l0aCAiL2Jhc2VEb2N1bWVudGFpcmUiIHVybCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRvYzoiICsrIHVybAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwKICAgICAgICAgICAgaW4KICAgICAgICAgICAgRWxlbWVudCAiYSIKICAgICAgICAgICAgICAgIChzdHlsZUF0dHIgYXR0cnMKICAgICAgICAgICAgICAgICAgICArKyBbICggImhyZWYiLCB1cmxfICkKICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKysgKGlmIHRhcmdldEJsYW5rIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgKCAidGFyZ2V0IiwgImJsYW5rIiApIF0KCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgWyBIdG1sLlBhcnNlci5UZXh0IGxhYmVsIF0KCgpjc3NUb0RvY0F0dHIgOiAoIFN0cmluZywgU3RyaW5nICkgLT4gRG9jdW1lbnQuRG9jQXR0cmlidXRlCmNzc1RvRG9jQXR0ciBhdHRyID0KICAgIGxldAogICAgICAgIHBhcnNlUHhMZW5ndGggcyA9CiAgICAgICAgICAgIFN0cmluZy5kcm9wUmlnaHQgMiBzCiAgICAgICAgICAgICAgICB8PiBTdHJpbmcudG9JbnQKICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0IDAKICAgIGluCiAgICBjYXNlIGF0dHIgb2YKICAgICAgICAoICJmbG9hdCIsICJyaWdodCIgKSAtPgogICAgICAgICAgICBBbGlnblJpZ2h0CgogICAgICAgICggImZsb2F0IiwgImxlZnQiICkgLT4KICAgICAgICAgICAgQWxpZ25MZWZ0CgogICAgICAgICggImJhY2tncm91bmQtY29sb3IiLCBjb2xvciApIC0+CiAgICAgICAgICAgIEJhY2tncm91bmRDb2xvciAocGFyc2VSZ2IgY29sb3IpCgogICAgICAgICggIndpZHRoIiwgIjEwMCUiICkgLT4KICAgICAgICAgICAgV2lkdGhGaWxsCgogICAgICAgICggIndpZHRoIiwgbiApIC0+CiAgICAgICAgICAgIFdpZHRoIChwYXJzZVB4TGVuZ3RoIG4pCgogICAgICAgICggImhlaWdodCIsIG4gKSAtPgogICAgICAgICAgICBIZWlnaHQgKHBhcnNlUHhMZW5ndGggbikKCiAgICAgICAgKCAiZm9udC1mYW1pbHkiLCBmb250ICkgLT4KICAgICAgICAgICAgRm9udCBmb250CgogICAgICAgICggImNvbG9yIiwgY29sb3IgKSAtPgogICAgICAgICAgICBGb250Q29sb3IgKHBhcnNlUmdiIGNvbG9yKQoKICAgICAgICAoICJmb250LXNpemUiLCBuICkgLT4KICAgICAgICAgICAgRm9udFNpemUgKHBhcnNlUHhMZW5ndGggbikKCiAgICAgICAgKCAidGV4dC1hbGlnbiIsICJsZWZ0IiApIC0+CiAgICAgICAgICAgIEZvbnRBbGlnbkxlZnQKCiAgICAgICAgKCAidGV4dC1hbGlnbiIsICJyaWdodCIgKSAtPgogICAgICAgICAgICBGb250QWxpZ25SaWdodAoKICAgICAgICAoICJ0ZXh0LWFsaWduIiwgImNlbnRlciIgKSAtPgogICAgICAgICAgICBDZW50ZXIKCiAgICAgICAgKCAidGV4dC1hbGlnbiIsICJqdXN0aWZ5IiApIC0+CiAgICAgICAgICAgIEp1c3RpZnkKCiAgICAgICAgKCAiZm9udC13ZWlnaHQiLCAiYm9sZCIgKSAtPgogICAgICAgICAgICBCb2xkCgogICAgICAgICggImZvbnQtd2VpZ2h0IiwgIml0YWxpYyIgKSAtPgogICAgICAgICAgICBJdGFsaWMKCiAgICAgICAgKCBhdHRyaWJ1dGUsIHZhbHVlICkgLT4KICAgICAgICAgICAgT3RoZXIgKCBhdHRyaWJ1dGUsIHZhbHVlICkKCgpzdHlsZUF0dHIgOiBMaXN0IERvY3VtZW50LkRvY0F0dHJpYnV0ZSAtPiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQpzdHlsZUF0dHIgYXR0cnMgPQogICAgTGlzdC5jb25jYXRNYXAgZG9jQXR0clRvQ3NzIGF0dHJzCiAgICAgICAgfD4gTGlzdC5tYXAgKFwoIGEsIHYgKSAtPiBhICsrICI6ICIgKysgdiArKyAiOyIpCiAgICAgICAgfD4gU3RyaW5nLmpvaW4gIiAiCiAgICAgICAgfD4gKFxyIC0+IFsgKCAic3R5bGUiLCByICkgXSkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gT3V0c2lkZSBjbGljayBkZWNvZGVyIC0tCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCm91dHNpZGVUYXJnZXRIYW5kbGVyIDogU3RyaW5nIC0+IG1zZyAtPiBELkRlY29kZXIgbXNnCm91dHNpZGVUYXJnZXRIYW5kbGVyIHRhcmdldElkIGhhbmRsZXIgPQogICAgRC5maWVsZCAidGFyZ2V0IiAoaXNPdXRzaWRlVGFyZ2V0IHRhcmdldElkKQogICAgICAgIHw+IEQuYW5kVGhlbgogICAgICAgICAgICAoXGlzT3V0c2lkZSAtPgogICAgICAgICAgICAgICAgaWYgaXNPdXRzaWRlIHRoZW4KICAgICAgICAgICAgICAgICAgICBELnN1Y2NlZWQgaGFuZGxlcgoKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBELmZhaWwgImluc2lkZSB0YXJnZXQiCiAgICAgICAgICAgICkKCgppc091dHNpZGVUYXJnZXQgdGFyZ2V0SWQgPQogICAgRC5vbmVPZgogICAgICAgIFsgRC5maWVsZCAiaWQiIEQuc3RyaW5nCiAgICAgICAgICAgIHw+IEQuYW5kVGhlbgogICAgICAgICAgICAgICAgKFxpZCAtPgogICAgICAgICAgICAgICAgICAgIGlmIHRhcmdldElkID09IGlkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS0gZm91bmQgbWF0Y2ggYnkgaWQKICAgICAgICAgICAgICAgICAgICAgICAgRC5zdWNjZWVkIEZhbHNlCgogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgLS0gdHJ5IG5leHQgZGVjb2RlcgogICAgICAgICAgICAgICAgICAgICAgICBELmZhaWwgImNvbnRpbnVlIgogICAgICAgICAgICAgICAgKQogICAgICAgICwgRC5sYXp5IChcXyAtPiBELmZpZWxkICJwYXJlbnROb2RlIiAoaXNPdXRzaWRlVGFyZ2V0IHRhcmdldElkKSkKCiAgICAgICAgLS0gZmFsbGJhY2sgaWYgYWxsIHByZXZpb3VzIGRlY29kZXJzIGZhaWxlZAogICAgICAgICwgRC5zdWNjZWVkIFRydWUKICAgICAgICBdCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSBJbnRlcm5hbCBwYWdlIGFuZCBkb2N1bWVudHMgcGlja2VyIC0tCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgpsaW5rUGlja2VyIDoKICAgIHsgYwogICAgICAgIHwgcGFnZVRyZWVFZGl0b3IgOiBQYWdlVHJlZUVkaXRvci5Nb2RlbCBtc2cKICAgICAgICAsIGxvZ0luZm8gOiBBdXRoLkF1dGhQbHVnaW4uTG9nSW5mbwogICAgICAgICwgem9uZSA6IFRpbWUuWm9uZQogICAgICAgICwgbWF4SGVpZ2h0IDogSW50CiAgICB9CiAgICAtPiAoTXNnIC0+IG1zZykKICAgIC0+IFN0cmluZwogICAgLT4gQm9vbAogICAgLT4gQm9vbAogICAgLT4gTWF5YmUgU3RyaW5nCiAgICAtPiBNc2cKICAgIC0+IChTdHJpbmcgLT4gTXNnKQogICAgLT4gRWxlbWVudCBtc2cKbGlua1BpY2tlciBjb25maWcgZXh0ZXJuYWxNc2cgaWQgaXNBY3RpdmUgbGlua1BpY2tlck9wZW4gY3VycmVudExpbmsgb3Blbk1zZyBoYW5kbGVyID0KICAgIGVsCiAgICAgICAgWyBiZWxvdyA8fAogICAgICAgICAgICBlbAogICAgICAgICAgICAgICAgWyBCYWNrZ3JvdW5kLmNvbG9yIChyZ2IgMC45NSAwLjk1IDAuOTUpIF0KICAgICAgICAgICAgICAgIChpZiBsaW5rUGlja2VyT3BlbiB0aGVuCiAgICAgICAgICAgICAgICAgICAgY29sdW1uCiAgICAgICAgICAgICAgICAgICAgICAgIFsgQmFja2dyb3VuZC5jb2xvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJnYiAxIDEgMSkKICAgICAgICAgICAgICAgICAgICAgICAgLCB3aWR0aCAocHggODUwKQogICAgICAgICAgICAgICAgICAgICAgICAsIEJvcmRlci5zaGFkb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgb2Zmc2V0ID0gKCA0LCA0ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgc2l6ZSA9IDUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgYmx1ciA9IDEwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGNvbG9yID0gcmdiYSAwIDAgMCAwLjQ1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICwgc3BhY2luZyAxNQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIFsgY2FzZSBNYXliZS5hbmRUaGVuIChQYWdlVHJlZUVkaXRvci5nZXRQYXRoRnJvbUlkIGNvbmZpZy5wYWdlVHJlZUVkaXRvcikgKE1heWJlLm1hcCAoU3RyaW5nLmRyb3BMZWZ0IChTdHJpbmcubGVuZ3RoICJsaWVuLWludGVybmU6IikpIGN1cnJlbnRMaW5rKSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBwYXRoIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgc3BhY2luZyAxMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHBhZGRpbmcgMTUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIGVsIFsgRm9udC5ib2xkIF0gKHRleHQgIkxpZW4gcG91cjoiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHBhcmFncmFwaCBbXSBbIHRleHQgKHBlcmNlbnREZWNvZGUgcGF0aCB8PiBNYXliZS53aXRoRGVmYXVsdCBwYXRoKSBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5ub25lCiAgICAgICAgICAgICAgICAgICAgICAgICwgY2hvb3NlSW50ZXJuYWxQYWdlVmlldyAoY29uZmlnLm1heEhlaWdodCAtIDE0MCkgZXh0ZXJuYWxNc2cgY29uZmlnLnBhZ2VUcmVlRWRpdG9yIGNvbmZpZy56b25lIGNvbmZpZy5sb2dJbmZvCiAgICAgICAgICAgICAgICAgICAgICAgIF0KCiAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIEVsZW1lbnQubm9uZQogICAgICAgICAgICAgICAgKQogICAgICAgICwgaHRtbEF0dHJpYnV0ZSA8fCBIdG1sQXR0ci5pZCBpZAogICAgICAgIF0KICAgICAgICAoSW5wdXQuYnV0dG9uCiAgICAgICAgICAgIChidXR0b25TdHlsZSBpc0FjdGl2ZQogICAgICAgICAgICAgICAgKysgWyBpZiBNYXliZS5tYXAgKFN0cmluZy5zdGFydHNXaXRoICJsaWVuLWludGVybmU6IikgY3VycmVudExpbmsgPT0gSnVzdCBUcnVlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgQmFja2dyb3VuZC5jb2xvciAocmdiMjU1IDIwMyAyMzggMjUwKQoKICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBub0F0dHIKICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgICB7IG9uUHJlc3MgPQogICAgICAgICAgICAgICAgaWYgaXNBY3RpdmUgdGhlbgogICAgICAgICAgICAgICAgICAgIEp1c3QgKGV4dGVybmFsTXNnIG9wZW5Nc2cpCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIE5vdGhpbmcKICAgICAgICAgICAgLCBsYWJlbCA9CiAgICAgICAgICAgICAgICByb3cKICAgICAgICAgICAgICAgICAgICBbIHNwYWNpbmcgNSBdCiAgICAgICAgICAgICAgICAgICAgWyBlbAogICAgICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgICAgICAgICAoaHRtbCA8fCBJY29ucy5saW5rMiBpY29uU2l6ZSkKCiAgICAgICAgICAgICAgICAgICAgLS0sIEljb25zLmxpbmsKICAgICAgICAgICAgICAgICAgICAtLSAgICAoSWNvbnMuZGVmT3B0aW9ucwogICAgICAgICAgICAgICAgICAgIC0tICAgICAgICB8PiBJY29ucy5jb2xvciBibGFjawogICAgICAgICAgICAgICAgICAgIC0tICAgICAgICB8PiBJY29ucy5zaXplIDIwCiAgICAgICAgICAgICAgICAgICAgLS0gICAgKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICkKCgpkb2NQaWNrZXIgOgogICAgeyBjCiAgICAgICAgfCBmaWxlRXhwbG9yZXIgOiBGaWxlRXhwbG9yZXIuTW9kZWwgbXNnCiAgICAgICAgLCBsb2dJbmZvIDogQXV0aC5BdXRoUGx1Z2luLkxvZ0luZm8KICAgICAgICAsIHpvbmUgOiBUaW1lLlpvbmUKICAgICAgICAsIG1heEhlaWdodCA6IEludAogICAgfQogICAgLT4gKE1zZyAtPiBtc2cpCiAgICAtPiBTdHJpbmcKICAgIC0+IEJvb2wKICAgIC0+IEJvb2wKICAgIC0+IE1heWJlIFN0cmluZwogICAgLT4gTXNnCiAgICAtPiAoU3RyaW5nIC0+IE1zZykKICAgIC0+IEVsZW1lbnQgbXNnCmRvY1BpY2tlciBjb25maWcgZXh0ZXJuYWxNc2cgaWQgaXNBY3RpdmUgZG9jUGlja2VyT3BlbiBjdXJyZW50TGluayBvcGVuTXNnIGhhbmRsZXIgPQogICAgZWwKICAgICAgICBbIGJlbG93IDx8CiAgICAgICAgICAgIGVsCiAgICAgICAgICAgICAgICBbIEJhY2tncm91bmQuY29sb3IgKHJnYiAwLjk1IDAuOTUgMC45NSkgXQogICAgICAgICAgICAgICAgKGlmIGRvY1BpY2tlck9wZW4gdGhlbgogICAgICAgICAgICAgICAgICAgIGNvbHVtbgogICAgICAgICAgICAgICAgICAgICAgICBbIEJhY2tncm91bmQuY29sb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZ2IgMSAxIDEpCiAgICAgICAgICAgICAgICAgICAgICAgICwgd2lkdGggKHB4IDg1MCkKICAgICAgICAgICAgICAgICAgICAgICAgLCBCb3JkZXIuc2hhZG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG9mZnNldCA9ICggNCwgNCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHNpemUgPSA1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGJsdXIgPSAxMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjb2xvciA9IHJnYmEgMCAwIDAgMC40NQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIFsgY2FzZSBjdXJyZW50TGluayBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBwYXRoIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgc3BhY2luZyAxMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHBhZGRpbmcgMTUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIGVsIFsgRm9udC5ib2xkIF0gKHRleHQgIkxpZW4gcG91cjoiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHBhcmFncmFwaCBbXSBbIHRleHQgKHBlcmNlbnREZWNvZGUgcGF0aCB8PiBNYXliZS53aXRoRGVmYXVsdCBwYXRoKSBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5ub25lCiAgICAgICAgICAgICAgICAgICAgICAgICwgY2hvb3NlRG9jVmlldyAoY29uZmlnLm1heEhlaWdodCAtIDE0MCkgZXh0ZXJuYWxNc2cgY29uZmlnLmZpbGVFeHBsb3JlciBjb25maWcuem9uZSBjb25maWcubG9nSW5mbwogICAgICAgICAgICAgICAgICAgICAgICBdCgogICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBFbGVtZW50Lm5vbmUKICAgICAgICAgICAgICAgICkKICAgICAgICAsIGh0bWxBdHRyaWJ1dGUgPHwgSHRtbEF0dHIuaWQgaWQKICAgICAgICBdCiAgICAgICAgKElucHV0LmJ1dHRvbgogICAgICAgICAgICAoYnV0dG9uU3R5bGUgaXNBY3RpdmUKICAgICAgICAgICAgICAgICsrIFsgaWYgTWF5YmUubWFwIChTdHJpbmcuc3RhcnRzV2l0aCAiZG9jOiIpIGN1cnJlbnRMaW5rID09IEp1c3QgVHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIEJhY2tncm91bmQuY29sb3IgKHJnYjI1NSAyMDMgMjM4IDI1MCkKCiAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgbm9BdHRyCiAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgICAgeyBvblByZXNzID0KICAgICAgICAgICAgICAgIGlmIGlzQWN0aXZlIHRoZW4KICAgICAgICAgICAgICAgICAgICBKdXN0IChleHRlcm5hbE1zZyBvcGVuTXNnKQoKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCiAgICAgICAgICAgICwgbGFiZWwgPQogICAgICAgICAgICAgICAgcm93CiAgICAgICAgICAgICAgICAgICAgWyBzcGFjaW5nIDUgXQogICAgICAgICAgICAgICAgICAgIFsgZWwgW10gKGh0bWwgPHwgSWNvbnMuZmlsZVRleHQgaWNvblNpemUpCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgKQoKCmNob29zZURvY1ZpZXcgOgogICAgSW50CiAgICAtPiAoTXNnIC0+IG1zZykKICAgIC0+IEZpbGVFeHBsb3Jlci5Nb2RlbCBtc2cKICAgIC0+IFRpbWUuWm9uZQogICAgLT4gTG9nSW5mbwogICAgLT4gRWxlbWVudC5FbGVtZW50IG1zZwpjaG9vc2VEb2NWaWV3IG1heEhlaWdodCBleHRlcm5hbE1zZyBmaWxlRXhwbG9yZXIgem9uZSBsb2dJbmZvID0KICAgIGNvbHVtbgogICAgICAgIFsgcGFkZGluZ0VhY2gKICAgICAgICAgICAgeyB0b3AgPSAwCiAgICAgICAgICAgICwgYm90dG9tID0gMTUKICAgICAgICAgICAgLCBsZWZ0ID0gMAogICAgICAgICAgICAsIHJpZ2h0ID0gMAogICAgICAgICAgICB9CiAgICAgICAgLCBzcGFjaW5nIDE1CiAgICAgICAgXQogICAgICAgIFsgRmlsZUV4cGxvcmVyLnZpZXcKICAgICAgICAgICAgeyBtYXhIZWlnaHQgPSBtYXhIZWlnaHQKICAgICAgICAgICAgLCB6b25lID0gem9uZQogICAgICAgICAgICAsIGxvZ0luZm8gPSBsb2dJbmZvCiAgICAgICAgICAgICwgbW9kZSA9IEZpbGVFeHBsb3Jlci5SZWFkV3JpdGUgRmlsZUV4cGxvcmVyLkRvY3NSb290CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmlsZUV4cGxvcmVyCiAgICAgICAgLCBlbCBbIHBhZGRpbmdYWSAxNSAwIF0KICAgICAgICAgICAgKElucHV0LmJ1dHRvbgogICAgICAgICAgICAgICAgKGJ1dHRvblN0eWxlIChGaWxlRXhwbG9yZXIuZ2V0U2VsZWN0ZWREb2MgZmlsZUV4cGxvcmVyIC89IE5vdGhpbmcpICsrIFsgYWxpZ25Ub3AgXSkKICAgICAgICAgICAgICAgIHsgb25QcmVzcyA9CiAgICAgICAgICAgICAgICAgICAgTWF5YmUubWFwIChleHRlcm5hbE1zZyA8PCBJbnNlcnREb2NMaW5rKQogICAgICAgICAgICAgICAgICAgICAgICAoRmlsZUV4cGxvcmVyLmdldFNlbGVjdGVkRG9jIGZpbGVFeHBsb3JlcikKICAgICAgICAgICAgICAgICwgbGFiZWwgPQogICAgICAgICAgICAgICAgICAgIHJvdyBbIHNwYWNpbmcgNSBdCiAgICAgICAgICAgICAgICAgICAgICAgIFsgZWwgW10gKGh0bWwgPHwgSWNvbnMuZXh0ZXJuYWxMaW5rIGljb25TaXplKQogICAgICAgICAgICAgICAgICAgICAgICAsIGVsIFtdICh0ZXh0ICJWYWxpZGVyIikKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApCiAgICAgICAgXQoKCmNob29zZUludGVybmFsUGFnZVZpZXcgOgogICAgSW50CiAgICAtPiAoTXNnIC0+IG1zZykKICAgIC0+IFBhZ2VUcmVlRWRpdG9yLk1vZGVsIG1zZwogICAgLT4gVGltZS5ab25lCiAgICAtPiBMb2dJbmZvCiAgICAtPiBFbGVtZW50LkVsZW1lbnQgbXNnCmNob29zZUludGVybmFsUGFnZVZpZXcgbWF4SGVpZ2h0IGV4dGVybmFsTXNnIHBhZ2VUcmVlRWRpdG9yIHpvbmUgbG9nSW5mbyA9CiAgICBjb2x1bW4KICAgICAgICBbIHBhZGRpbmdFYWNoCiAgICAgICAgICAgIHsgdG9wID0gMAogICAgICAgICAgICAsIGJvdHRvbSA9IDE1CiAgICAgICAgICAgICwgbGVmdCA9IDAKICAgICAgICAgICAgLCByaWdodCA9IDAKICAgICAgICAgICAgfQogICAgICAgICwgc3BhY2luZyAxNQogICAgICAgICwgd2lkdGggZmlsbAogICAgICAgIF0KICAgICAgICBbIFBhZ2VUcmVlRWRpdG9yLnZpZXcKICAgICAgICAgICAgeyBtYXhIZWlnaHQgPQogICAgICAgICAgICAgICAgbWF4SGVpZ2h0CiAgICAgICAgICAgICwgem9uZSA9IHpvbmUKICAgICAgICAgICAgLCBsb2dJbmZvID0gbG9nSW5mbwogICAgICAgICAgICAsIG1vZGUgPSBQYWdlVHJlZUVkaXRvci5TZWxlY3QKICAgICAgICAgICAgfQogICAgICAgICAgICBwYWdlVHJlZUVkaXRvcgogICAgICAgICwgZWwgWyBwYWRkaW5nWFkgMTUgMCBdCiAgICAgICAgICAgIChJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgIChidXR0b25TdHlsZSAoUGFnZVRyZWVFZGl0b3IuaW50ZXJuYWxQYWdlU2VsZWN0ZWRQYWdlSW5mbyBwYWdlVHJlZUVkaXRvciAvPSBOb3RoaW5nKSArKyBbIGFsaWduVG9wIF0pCiAgICAgICAgICAgICAgICB7IG9uUHJlc3MgPQogICAgICAgICAgICAgICAgICAgIFBhZ2VUcmVlRWRpdG9yLmludGVybmFsUGFnZVNlbGVjdGVkUGFnZUluZm8gcGFnZVRyZWVFZGl0b3IKICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUuYW5kVGhlbiAubWJDb250ZW50SWQKICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUubWFwIFVVSUQudG9TdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUubWFwIChleHRlcm5hbE1zZyA8PCBJbnNlcnRJbnRlcm5hbExpbmspCiAgICAgICAgICAgICAgICAsIGxhYmVsID0KICAgICAgICAgICAgICAgICAgICByb3cgWyBzcGFjaW5nIDUgXQogICAgICAgICAgICAgICAgICAgICAgICBbIGVsIFtdIChodG1sIDx8IEljb25zLmV4dGVybmFsTGluayBpY29uU2l6ZSkKICAgICAgICAgICAgICAgICAgICAgICAgLCBlbCBbXSAodGV4dCAiVmFsaWRlciIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKQogICAgICAgIF0KCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gQ29sb3IgZnVuY3Rpb25zICBhbmQgY29sb3IgcGlja2VyIC0tCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCmNvbG9yUGlja2VyIDoKICAgIFN0cmluZwogICAgLT4gQm9vbAogICAgLT4gQm9vbAogICAgLT4gTWF5YmUgU3RyaW5nCiAgICAtPiBNc2cKICAgIC0+IChTdHJpbmcgLT4gTXNnKQogICAgLT4gRWxlbWVudCBNc2cKICAgIC0+IEVsZW1lbnQuRWxlbWVudCBNc2cKY29sb3JQaWNrZXIgaWQgaXNBY3RpdmUgY29sb3JQaWNrZXJPcGVuIGN1cnJlbnRDb2xvciBvcGVuTXNnIGhhbmRsZXIgbGFiZWwgPQogICAgbGV0CiAgICAgICAgY3VycmVudENvbG9yXyA9CiAgICAgICAgICAgIGN1cnJlbnRDb2xvcgogICAgICAgICAgICAgICAgfD4gTWF5YmUuYW5kVGhlbiAoXGMgLT4gRGljdC5nZXQgYyB3ZWJDb2xvcnMpCiAgICAgICAgICAgICAgICB8PiBNYXliZS5tYXAgaGV4VG9Db2xvcgogICAgICAgICAgICAgICAgfD4gTWF5YmUud2l0aERlZmF1bHQgKHJnYiAxIDEgMSkKCiAgICAgICAgY29sb3JQYW5WaWV3ICggY29sbmFtZSwgY29saGV4ICkgPQogICAgICAgICAgICBlbAogICAgICAgICAgICAgICAgWyB3aWR0aCAocHggMTQpCiAgICAgICAgICAgICAgICAsIGhlaWdodCAocHggMTQpCiAgICAgICAgICAgICAgICAsIEJhY2tncm91bmQuY29sb3IgKGhleFRvQ29sb3IgY29saGV4KQogICAgICAgICAgICAgICAgLCBCb3JkZXIud2lkdGggMQogICAgICAgICAgICAgICAgLCBCb3JkZXIuY29sb3IgKHJnYiAwIDAgMCkKICAgICAgICAgICAgICAgICwgcG9pbnRlcgogICAgICAgICAgICAgICAgLCBtb3VzZU92ZXIKICAgICAgICAgICAgICAgICAgICBbIEJvcmRlci5jb2xvciAocmdiIDAuOSAwLjkgMC45KSBdCiAgICAgICAgICAgICAgICAsIEV2ZW50cy5vbkNsaWNrIChoYW5kbGVyIGNvbG5hbWUpCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICBFbGVtZW50Lm5vbmUKCiAgICAgICAgY29sb3JzID0KICAgICAgICAgICAgY2h1bmtzIDEyIChEaWN0LnRvTGlzdCB3ZWJDb2xvcnMpCiAgICAgICAgICAgICAgICB8PiBMaXN0Lm1hcAogICAgICAgICAgICAgICAgICAgIChcciAtPgogICAgICAgICAgICAgICAgICAgICAgICByb3cgWyBzcGFjaW5nIDMgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKExpc3QubWFwIGNvbG9yUGFuVmlldyByKQogICAgICAgICAgICAgICAgICAgICkKICAgIGluCiAgICBlbAogICAgICAgIFsgYmVsb3cgPHwKICAgICAgICAgICAgZWwKICAgICAgICAgICAgICAgIFsgQmFja2dyb3VuZC5jb2xvciAocmdiIDAuOTUgMC45NSAwLjk1KSBdCiAgICAgICAgICAgICAgICAoaWYgY29sb3JQaWNrZXJPcGVuIHRoZW4KICAgICAgICAgICAgICAgICAgICBjb2x1bW4KICAgICAgICAgICAgICAgICAgICAgICAgWyBzcGFjaW5nIDMKICAgICAgICAgICAgICAgICAgICAgICAgLCBwYWRkaW5nIDEwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzCgogICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBFbGVtZW50Lm5vbmUKICAgICAgICAgICAgICAgICkKICAgICAgICAsIGh0bWxBdHRyaWJ1dGUgPHwgSHRtbEF0dHIuaWQgaWQKICAgICAgICBdCiAgICAgICAgKElucHV0LmJ1dHRvbgogICAgICAgICAgICAoYnV0dG9uU3R5bGUgaXNBY3RpdmUpCiAgICAgICAgICAgIHsgb25QcmVzcyA9CiAgICAgICAgICAgICAgICBpZiBpc0FjdGl2ZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgSnVzdCBvcGVuTXNnCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIE5vdGhpbmcKICAgICAgICAgICAgLCBsYWJlbCA9CiAgICAgICAgICAgICAgICByb3cgWyBzcGFjaW5nIDEwIF0KICAgICAgICAgICAgICAgICAgICBbIGxhYmVsCiAgICAgICAgICAgICAgICAgICAgLCBLZXllZC5lbAogICAgICAgICAgICAgICAgICAgICAgICBbIHdpZHRoIChweCAxNCkKICAgICAgICAgICAgICAgICAgICAgICAgLCBoZWlnaHQgKHB4IDE0KQogICAgICAgICAgICAgICAgICAgICAgICAsIEJhY2tncm91bmQuY29sb3IgY3VycmVudENvbG9yXwogICAgICAgICAgICAgICAgICAgICAgICAsIEJvcmRlci53aWR0aCAxCiAgICAgICAgICAgICAgICAgICAgICAgICwgQm9yZGVyLmNvbG9yIChyZ2IgMCAwIDApCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKCBNYXliZS53aXRoRGVmYXVsdCAiIiBjdXJyZW50Q29sb3IKICAgICAgICAgICAgICAgICAgICAgICAgLCBFbGVtZW50Lm5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICAtLSwgdGV4dCA8fCBNYXliZS53aXRoRGVmYXVsdCAiIiBjdXJyZW50Q29sb3IKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICApCgoKaGV4VG9Db2xvciA6IFN0cmluZyAtPiBDb2xvcgpoZXhUb0NvbG9yIGhleENvbG9yID0KICAgIGxldAogICAgICAgIGhleENvbG9yXyA9CiAgICAgICAgICAgIFN0cmluZy50b0xvd2VyIGhleENvbG9yCgogICAgICAgIHJlZCA9CiAgICAgICAgICAgIFN0cmluZy5sZWZ0IDIgaGV4Q29sb3JfCiAgICAgICAgICAgICAgICB8PiBIZXguZnJvbVN0cmluZwogICAgICAgICAgICAgICAgfD4gUmVzdWx0LndpdGhEZWZhdWx0IDAKICAgICAgICAgICAgICAgIHw+IHRvRmxvYXQKCiAgICAgICAgZ3JlZW4gPQogICAgICAgICAgICBTdHJpbmcuZHJvcExlZnQgMiBoZXhDb2xvcl8KICAgICAgICAgICAgICAgIHw+IFN0cmluZy5sZWZ0IDIKICAgICAgICAgICAgICAgIHw+IEhleC5mcm9tU3RyaW5nCiAgICAgICAgICAgICAgICB8PiBSZXN1bHQud2l0aERlZmF1bHQgMAogICAgICAgICAgICAgICAgfD4gdG9GbG9hdAoKICAgICAgICBibHVlID0KICAgICAgICAgICAgU3RyaW5nLmRyb3BMZWZ0IDQgaGV4Q29sb3JfCiAgICAgICAgICAgICAgICB8PiBTdHJpbmcubGVmdCAyCiAgICAgICAgICAgICAgICB8PiBIZXguZnJvbVN0cmluZwogICAgICAgICAgICAgICAgfD4gUmVzdWx0LndpdGhEZWZhdWx0IDAKICAgICAgICAgICAgICAgIHw+IHRvRmxvYXQKICAgIGluCiAgICByZ2IgKHJlZCAvIDI1NSkgKGdyZWVuIC8gMjU1KSAoYmx1ZSAvIDI1NSkKCgpoZXhUb0RvY0NvbG9yIGhleENvbG9yID0KICAgIGxldAogICAgICAgIGhleENvbG9yXyA9CiAgICAgICAgICAgIFN0cmluZy50b0xvd2VyIGhleENvbG9yCgogICAgICAgIHJlZCA9CiAgICAgICAgICAgIFN0cmluZy5sZWZ0IDIgaGV4Q29sb3JfCiAgICAgICAgICAgICAgICB8PiBIZXguZnJvbVN0cmluZwogICAgICAgICAgICAgICAgfD4gUmVzdWx0LndpdGhEZWZhdWx0IDAKICAgICAgICAgICAgICAgIHw+IHRvRmxvYXQKCiAgICAgICAgZ3JlZW4gPQogICAgICAgICAgICBTdHJpbmcuZHJvcExlZnQgMiBoZXhDb2xvcl8KICAgICAgICAgICAgICAgIHw+IFN0cmluZy5sZWZ0IDIKICAgICAgICAgICAgICAgIHw+IEhleC5mcm9tU3RyaW5nCiAgICAgICAgICAgICAgICB8PiBSZXN1bHQud2l0aERlZmF1bHQgMAogICAgICAgICAgICAgICAgfD4gdG9GbG9hdAoKICAgICAgICBibHVlID0KICAgICAgICAgICAgU3RyaW5nLmRyb3BMZWZ0IDQgaGV4Q29sb3JfCiAgICAgICAgICAgICAgICB8PiBTdHJpbmcubGVmdCAyCiAgICAgICAgICAgICAgICB8PiBIZXguZnJvbVN0cmluZwogICAgICAgICAgICAgICAgfD4gUmVzdWx0LndpdGhEZWZhdWx0IDAKICAgICAgICAgICAgICAgIHw+IHRvRmxvYXQKICAgIGluCiAgICBEb2NDb2xvciAocmVkIC8gMjU1KSAoZ3JlZW4gLyAyNTUpIChibHVlIC8gMjU1KQoKCgotLURvY0NvbG9yICgodG9GbG9hdCA8PCB0cnVuY2F0ZSkgKDEwMCAqIChyZWQgLyAyNTUpKSAvIDEwMCkgKCh0b0Zsb2F0IDw8IHRydW5jYXRlKSAoMTAwICogKGdyZWVuIC8gMjU1KSkgLyAxMDApICgodG9GbG9hdCA8PCB0cnVuY2F0ZSkgKDEwMCAqIChibHVlIC8gMjU1KSkgLyAxMDApCgoKd2ViQ29sb3JzUmV2ZXJzZWQgPQogICAgRGljdC50b0xpc3Qgd2ViQ29sb3JzCiAgICAgICAgfD4gTGlzdC5tYXAgKFwoIGEsIGIgKSAtPiAoIGIsIGEgKSkKICAgICAgICB8PiBEaWN0LmZyb21MaXN0CgoKd2ViQ29sb3JzID0KICAgIERpY3QuZnJvbUxpc3QKICAgICAgICBbICggIm1hcm9vbiIsICI4MDAwMDAiICkKICAgICAgICAsICggImRhcmsgcmVkIiwgIjhCMDAwMCIgKQogICAgICAgICwgKCAiYnJvd24iLCAiQTUyQTJBIiApCiAgICAgICAgLCAoICJmaXJlYnJpY2siLCAiQjIyMjIyIiApCiAgICAgICAgLCAoICJjcmltc29uIiwgIkRDMTQzQyIgKQogICAgICAgICwgKCAicmVkIiwgIkZGMDAwMCIgKQogICAgICAgICwgKCAidG9tYXRvIiwgIkZGNjM0NyIgKQogICAgICAgICwgKCAiY29yYWwiLCAiRkY3RjUwIiApCiAgICAgICAgLCAoICJpbmRpYW4gcmVkIiwgIkNENUM1QyIgKQogICAgICAgICwgKCAibGlnaHQgY29yYWwiLCAiRjA4MDgwIiApCiAgICAgICAgLCAoICJkYXJrIHNhbG1vbiIsICJFOTk2N0EiICkKICAgICAgICAsICggInNhbG1vbiIsICJGQTgwNzIiICkKICAgICAgICAsICggImxpZ2h0IHNhbG1vbiIsICJGRkEwN0EiICkKICAgICAgICAsICggIm9yYW5nZSByZWQiLCAiRkY0NTAwIiApCiAgICAgICAgLCAoICJkYXJrIG9yYW5nZSIsICJGRjhDMDAiICkKICAgICAgICAsICggIm9yYW5nZSIsICJGRkE1MDAiICkKICAgICAgICAsICggImdvbGQiLCAiRkZENzAwIiApCiAgICAgICAgLCAoICJkYXJrIGdvbGRlbiByb2QiLCAiQjg4NjBCIiApCiAgICAgICAgLCAoICJnb2xkZW4gcm9kIiwgIkRBQTUyMCIgKQogICAgICAgICwgKCAicGFsZSBnb2xkZW4gcm9kIiwgIkVFRThBQSIgKQogICAgICAgICwgKCAiZGFyayBraGFraSIsICJCREI3NkIiICkKICAgICAgICAsICggImtoYWtpIiwgIkYwRTY4QyIgKQogICAgICAgICwgKCAib2xpdmUiLCAiODA4MDAwIiApCiAgICAgICAgLCAoICJ5ZWxsb3ciLCAiRkZGRjAwIiApCiAgICAgICAgLCAoICJ5ZWxsb3cgZ3JlZW4iLCAiOUFDRDMyIiApCiAgICAgICAgLCAoICJkYXJrIG9saXZlIGdyZWVuIiwgIjU1NkIyRiIgKQogICAgICAgICwgKCAib2xpdmUgZHJhYiIsICI2QjhFMjMiICkKICAgICAgICAsICggImxhd24gZ3JlZW4iLCAiN0NGQzAwIiApCiAgICAgICAgLCAoICJjaGFydCByZXVzZSIsICI3RkZGMDAiICkKICAgICAgICAsICggImdyZWVuIHllbGxvdyIsICJBREZGMkYiICkKICAgICAgICAsICggImRhcmsgZ3JlZW4iLCAiMDA2NDAwIiApCiAgICAgICAgLCAoICJncmVlbiIsICIwMDgwMDAiICkKICAgICAgICAsICggImZvcmVzdCBncmVlbiIsICIyMjhCMjIiICkKICAgICAgICAsICggImxpbWUiLCAiMDBGRjAwIiApCiAgICAgICAgLCAoICJsaW1lIGdyZWVuIiwgIjMyQ0QzMiIgKQogICAgICAgICwgKCAibGlnaHQgZ3JlZW4iLCAiOTBFRTkwIiApCiAgICAgICAgLCAoICJwYWxlIGdyZWVuIiwgIjk4RkI5OCIgKQogICAgICAgICwgKCAiZGFyayBzZWEgZ3JlZW4iLCAiOEZCQzhGIiApCiAgICAgICAgLCAoICJtZWRpdW0gc3ByaW5nIGdyZWVuIiwgIjAwRkE5QSIgKQogICAgICAgICwgKCAic3ByaW5nIGdyZWVuIiwgIjBGMEZGN0YiICkKICAgICAgICAsICggInNlYSBncmVlbiIsICIyRThCNTciICkKICAgICAgICAsICggIm1lZGl1bSBhcXVhIG1hcmluZSIsICI2NkNEQUEiICkKICAgICAgICAsICggIm1lZGl1bSBzZWEgZ3JlZW4iLCAiM0NCMzcxIiApCiAgICAgICAgLCAoICJsaWdodCBzZWEgZ3JlZW4iLCAiMjBCMkFBIiApCiAgICAgICAgLCAoICJkYXJrIHNsYXRlIGdyYXkiLCAiMkY0RjRGIiApCiAgICAgICAgLCAoICJ0ZWFsIiwgIjAwODA4MCIgKQogICAgICAgICwgKCAiZGFyayBjeWFuIiwgIjAwOEI4QiIgKQogICAgICAgICwgKCAiYXF1YSIsICIwMEZGRkYiICkKICAgICAgICAsICggImN5YW4iLCAiMDBGRkZGIiApCiAgICAgICAgLCAoICJsaWdodCBjeWFuIiwgIkUwRkZGRiIgKQogICAgICAgICwgKCAiZGFyayB0dXJxdW9pc2UiLCAiMDBDRUQxIiApCiAgICAgICAgLCAoICJ0dXJxdW9pc2UiLCAiNDBFMEQwIiApCiAgICAgICAgLCAoICJtZWRpdW0gdHVycXVvaXNlIiwgIjQ4RDFDQyIgKQogICAgICAgICwgKCAicGFsZSB0dXJxdW9pc2UiLCAiQUZFRUVFIiApCiAgICAgICAgLCAoICJhcXVhIG1hcmluZSIsICI3RkZGRDQiICkKICAgICAgICAsICggInBvd2RlciBibHVlIiwgIkIwRTBFNiIgKQogICAgICAgICwgKCAiY2FkZXQgYmx1ZSIsICI1RjlFQTAiICkKICAgICAgICAsICggInN0ZWVsIGJsdWUiLCAiNDY4MkI0IiApCiAgICAgICAgLCAoICJjb3JuIGZsb3dlciBibHVlIiwgIjY0OTVFRCIgKQogICAgICAgICwgKCAiZGVlcCBza3kgYmx1ZSIsICIwMEJGRkYiICkKICAgICAgICAsICggImRvZGdlciBibHVlIiwgIjFFOTBGRiIgKQogICAgICAgICwgKCAibGlnaHQgYmx1ZSIsICJBREQ4RTYiICkKICAgICAgICAsICggInNreSBibHVlIiwgIjg3Q0VFQiIgKQogICAgICAgICwgKCAibGlnaHQgc2t5IGJsdWUiLCAiODdDRUZBIiApCiAgICAgICAgLCAoICJtaWRuaWdodCBibHVlIiwgIjE5MTk3MCIgKQogICAgICAgICwgKCAibmF2eSIsICIwMDAwODAiICkKICAgICAgICAsICggImRhcmsgYmx1ZSIsICIwMDAwOEIiICkKICAgICAgICAsICggIm1lZGl1bSBibHVlIiwgIjAwMDBDRCIgKQogICAgICAgICwgKCAiYmx1ZSIsICIwMDAwRkYiICkKICAgICAgICAsICggInJveWFsIGJsdWUiLCAiNDE2OUUxIiApCiAgICAgICAgLCAoICJibHVlIHZpb2xldCIsICI4QTJCRTIiICkKICAgICAgICAsICggImluZGlnbyIsICI0QjAwODIiICkKICAgICAgICAsICggImRhcmsgc2xhdGUgYmx1ZSIsICI0ODNEOEIiICkKICAgICAgICAsICggInNsYXRlIGJsdWUiLCAiNkE1QUNEIiApCiAgICAgICAgLCAoICJtZWRpdW0gc2xhdGUgYmx1ZSIsICI3QjY4RUUiICkKICAgICAgICAsICggIm1lZGl1bSBwdXJwbGUiLCAiOTM3MERCIiApCiAgICAgICAgLCAoICJkYXJrIG1hZ2VudGEiLCAiOEIwMDhCIiApCiAgICAgICAgLCAoICJkYXJrIHZpb2xldCIsICI5NDAwRDMiICkKICAgICAgICAsICggImRhcmsgb3JjaGlkIiwgIjk5MzJDQyIgKQogICAgICAgICwgKCAibWVkaXVtIG9yY2hpZCIsICJCQTU1RDMiICkKICAgICAgICAsICggInB1cnBsZSIsICI4MDAwODAiICkKICAgICAgICAsICggInRoaXN0bGUiLCAiRDhCRkQ4IiApCiAgICAgICAgLCAoICJwbHVtIiwgIkREQTBERCIgKQogICAgICAgICwgKCAidmlvbGV0IiwgIkVFODJFRSIgKQogICAgICAgICwgKCAibWFnZW50YSAvIGZ1Y2hzaWEiLCAiRkYwMEZGIiApCiAgICAgICAgLCAoICJvcmNoaWQiLCAiREE3MEQ2IiApCiAgICAgICAgLCAoICJtZWRpdW0gdmlvbGV0IHJlZCIsICJDNzE1ODUiICkKICAgICAgICAsICggInBhbGUgdmlvbGV0IHJlZCIsICJEQjcwOTMiICkKICAgICAgICAsICggImRlZXAgcGluayIsICJGRjE0OTMiICkKICAgICAgICAsICggImhvdCBwaW5rIiwgIkZGNjlCNCIgKQogICAgICAgICwgKCAibGlnaHQgcGluayIsICJGRkI2QzEiICkKICAgICAgICAsICggInBpbmsiLCAiRkZDMENCIiApCiAgICAgICAgLCAoICJhbnRpcXVlIHdoaXRlIiwgIkZBRUJENyIgKQogICAgICAgICwgKCAiYmVpZ2UiLCAiRjVGNURDIiApCiAgICAgICAgLCAoICJiaXNxdWUiLCAiRkZFNEM0IiApCiAgICAgICAgLCAoICJibGFuY2hlZCBhbG1vbmQiLCAiRkZFQkNEIiApCiAgICAgICAgLCAoICJ3aGVhdCIsICJGNURFQjMiICkKICAgICAgICAsICggImNvcm4gc2lsayIsICJGRkY4REMiICkKICAgICAgICAsICggImxlbW9uIGNoaWZmb24iLCAiRkZGQUNEIiApCiAgICAgICAgLCAoICJsaWdodCBnb2xkZW4gcm9kIHllbGxvdyIsICJGQUZBRDIiICkKICAgICAgICAsICggImxpZ2h0IHllbGxvdyIsICJGRkZGRTAiICkKICAgICAgICAsICggInNhZGRsZSBicm93biIsICI4QjQ1MTMiICkKICAgICAgICAsICggInNpZW5uYSIsICJBMDUyMkQiICkKICAgICAgICAsICggImNob2NvbGF0ZSIsICJEMjY5MUUiICkKICAgICAgICAsICggInBlcnUiLCAiQ0Q4NTNGIiApCiAgICAgICAgLCAoICJzYW5keSBicm93biIsICJGNEE0NjAiICkKICAgICAgICAsICggImJ1cmx5IHdvb2QiLCAiREVCODg3IiApCiAgICAgICAgLCAoICJ0YW4iLCAiRDJCNDhDIiApCiAgICAgICAgLCAoICJyb3N5IGJyb3duIiwgIkJDOEY4RiIgKQogICAgICAgICwgKCAibW9jY2FzaW4iLCAiRkZFNEI1IiApCiAgICAgICAgLCAoICJuYXZham8gd2hpdGUiLCAiRkZERUFEIiApCiAgICAgICAgLCAoICJwZWFjaCBwdWZmIiwgIkZGREFCOSIgKQogICAgICAgICwgKCAibWlzdHkgcm9zZSIsICJGRkU0RTEiICkKICAgICAgICAsICggImxhdmVuZGVyIGJsdXNoIiwgIkZGRjBGNSIgKQogICAgICAgICwgKCAibGluZW4iLCAiRkFGMEU2IiApCiAgICAgICAgLCAoICJvbGQgbGFjZSIsICJGREY1RTYiICkKICAgICAgICAsICggInBhcGF5YSB3aGlwIiwgIkZGRUZENSIgKQogICAgICAgICwgKCAic2VhIHNoZWxsIiwgIkZGRjVFRSIgKQogICAgICAgICwgKCAibWludCBjcmVhbSIsICJGNUZGRkEiICkKICAgICAgICAsICggInNsYXRlIGdyYXkiLCAiNzA4MDkwIiApCiAgICAgICAgLCAoICJsaWdodCBzbGF0ZSBncmF5IiwgIjc3ODg5OSIgKQogICAgICAgICwgKCAibGlnaHQgc3RlZWwgYmx1ZSIsICJCMEM0REUiICkKICAgICAgICAsICggImxhdmVuZGVyIiwgIkU2RTZGQSIgKQogICAgICAgICwgKCAiZmxvcmFsIHdoaXRlIiwgIkZGRkFGMCIgKQogICAgICAgICwgKCAiYWxpY2UgYmx1ZSIsICJGMEY4RkYiICkKICAgICAgICAsICggImdob3N0IHdoaXRlIiwgIkY4RjhGRiIgKQogICAgICAgICwgKCAiaG9uZXlkZXciLCAiRjBGRkYwIiApCiAgICAgICAgLCAoICJpdm9yeSIsICJGRkZGRjAiICkKICAgICAgICAsICggImF6dXJlIiwgIkYwRkZGRiIgKQogICAgICAgICwgKCAic25vdyIsICJGRkZBRkEiICkKICAgICAgICAsICggImJsYWNrIiwgIjAwMDAwMCIgKQogICAgICAgICwgKCAiZGltIGdyYXkgLyBkaW0gZ3JleSIsICI2OTY5NjkiICkKICAgICAgICAsICggImdyYXkgLyBncmV5IiwgIjgwODA4MCIgKQogICAgICAgICwgKCAiZGFyayBncmF5IC8gZGFyayBncmV5IiwgIkE5QTlBOSIgKQogICAgICAgICwgKCAic2lsdmVyIiwgIkMwQzBDMCIgKQogICAgICAgICwgKCAibGlnaHQgZ3JheSAvIGxpZ2h0IGdyZXkiLCAiRDNEM0QzIiApCiAgICAgICAgLCAoICJnYWluc2Jvcm8iLCAiRENEQ0RDIiApCiAgICAgICAgLCAoICJ3aGl0ZSBzbW9rZSIsICJGNUY1RjUiICkKICAgICAgICAsICggIndoaXRlIiwgIkZGRkZGRiIgKQogICAgICAgIF0KCgpwYXJzZVJnYiBzID0KICAgIGxldAogICAgICAgIGV4dHJhY3RDb2xWYWx1ZSBjb2xvciA9CiAgICAgICAgICAgIFN0cmluZy50b0Zsb2F0IGNvbG9yCiAgICAgICAgICAgICAgICB8PiBNYXliZS53aXRoRGVmYXVsdCAwCiAgICAgICAgICAgICAgICB8PiAoXGYgLT4gZiAvIDI1NSkKICAgIGluCiAgICBjYXNlCiAgICAgICAgU3RyaW5nLmRyb3BMZWZ0IDQgcwogICAgICAgICAgICB8PiBTdHJpbmcuZHJvcFJpZ2h0IDEKICAgICAgICAgICAgfD4gU3RyaW5nLnJlcGxhY2UgIiAiICIiCiAgICAgICAgICAgIHw+IFN0cmluZy5zcGxpdCAiLCIKICAgIG9mCiAgICAgICAgciA6OiBnIDo6IGIgOjogW10gLT4KICAgICAgICAgICAgRG9jQ29sb3IgKGV4dHJhY3RDb2xWYWx1ZSByKSAoZXh0cmFjdENvbFZhbHVlIGcpIChleHRyYWN0Q29sVmFsdWUgYikKCiAgICAgICAgXyAtPgogICAgICAgICAgICBEb2NDb2xvciAwIDAgMAoKCnJnYlRvSGV4IHMgPQogICAgY2FzZQogICAgICAgIFN0cmluZy5kcm9wTGVmdCA0IHMKICAgICAgICAgICAgfD4gU3RyaW5nLmRyb3BSaWdodCAxCiAgICAgICAgICAgIHw+IFN0cmluZy5yZXBsYWNlICIgIiAiIgogICAgICAgICAgICB8PiBTdHJpbmcuc3BsaXQgIiwiCiAgICAgICAgICAgIHw+IExpc3QuZmlsdGVyTWFwIFN0cmluZy50b0ludAogICAgb2YKICAgICAgICByIDo6IGcgOjogYiA6OiBbXSAtPgogICAgICAgICAgICAoKFN0cmluZy5wYWRMZWZ0IDIgJzAnIDx8IEhleC50b1N0cmluZyByKQogICAgICAgICAgICAgICAgKysgKFN0cmluZy5wYWRMZWZ0IDIgJzAnIDx8IEhleC50b1N0cmluZyBnKQogICAgICAgICAgICAgICAgKysgKFN0cmluZy5wYWRMZWZ0IDIgJzAnIDx8IEhleC50b1N0cmluZyBiKQogICAgICAgICAgICApCiAgICAgICAgICAgICAgICB8PiBTdHJpbmcudG9VcHBlcgoKICAgICAgICBfIC0+CiAgICAgICAgICAgICIwMDAwMDAiCgoKcGFyc2VDb2xvciBzID0KICAgIGNhc2UKICAgICAgICAoaWYgU3RyaW5nLnN0YXJ0c1dpdGggIiMiIHMgdGhlbgogICAgICAgICAgICBTdHJpbmcuZHJvcExlZnQgMSBzCgogICAgICAgICBlbHNlCiAgICAgICAgICAgIHMKICAgICAgICApCiAgICAgICAgICAgIHw+IChcaGV4IC0+IERpY3QuZ2V0IGhleCB3ZWJDb2xvcnNSZXZlcnNlZCkKICAgIG9mCiAgICAgICAgSnVzdCBjIC0+CiAgICAgICAgICAgIEp1c3QgYwoKICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgIERpY3QuZ2V0IChyZ2JUb0hleCBzKSB3ZWJDb2xvcnNSZXZlcnNlZAoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKZm9udHMgPQogICAgWyAiQXJpYWwiCiAgICAsICJIZWx2ZXRpY2EiCiAgICAsICJUaW1lcyBOZXcgUm9tYW4iCiAgICAsICJUaW1lcyIKICAgICwgIkNvdXJpZXIgTmV3IgogICAgLCAiQ291cmllciIKICAgICwgIlZlcmRhbmEiCiAgICAsICJHZW9yZ2lhIgogICAgLCAiUGFsYXRpbm8iCiAgICAsICJHYXJhbW9uZCIKICAgICwgIkJvb2ttYW4iCiAgICAsICJDb21pYyBTYW5zIE1TIgogICAgLCAiVHJlYnVjaGV0IE1TIgogICAgLCAiQXJpYWwgQmxhY2siCiAgICAsICJJbXBhY3QiCiAgICAsICJMaWJyZSBCYXNrZXJ2aWxsZSIKICAgIF0KCgpmb250U2l6ZXMgPQogICAgWyAiNiIKICAgICwgIjciCiAgICAsICI4IgogICAgLCAiOSIKICAgICwgIjEwIgogICAgLCAiMTEiCiAgICAsICIxMiIKICAgICwgIjEzIgogICAgLCAiMTQiCiAgICAsICIxNSIKICAgICwgIjE2IgogICAgLCAiMTgiCiAgICAsICIyMCIKICAgICwgIjIyIgogICAgLCAiMjQiCiAgICAsICIyNiIKICAgICwgIjI4IgogICAgLCAiMzIiCiAgICAsICIzNiIKICAgICwgIjQwIgogICAgLCAiNDQiCiAgICAsICI0OCIKICAgICwgIjU0IgogICAgLCAiNjAiCiAgICAsICI2NiIKICAgICwgIjcyIgogICAgLCAiODAiCiAgICAsICI4OCIKICAgICwgIjk2IgogICAgXQoKCmNodW5rcyA6IEludCAtPiBMaXN0IGEgLT4gTGlzdCAoTGlzdCBhKQpjaHVua3MgbiB4cyA9CiAgICBsZXQKICAgICAgICBoZWxwZXIgYWNjIHlzID0KICAgICAgICAgICAgY2FzZSB5cyBvZgogICAgICAgICAgICAgICAgW10gLT4KICAgICAgICAgICAgICAgICAgICBMaXN0LnJldmVyc2UgYWNjCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgIGhlbHBlciAoTGlzdC50YWtlIG4geXMgOjogYWNjKSAoTGlzdC5kcm9wIG4geXMpCiAgICBpbgogICAgaGVscGVyIFtdIHhzCgoKYnV0dG9uU3R5bGUgaXNBY3RpdmUgPQogICAgWyBCb3JkZXIucm91bmRlZCA1CiAgICAsIEZvbnQuY2VudGVyCiAgICAsIGNlbnRlclkKICAgICwgcGFkZGluZyA1CiAgICAsIGZvY3VzZWQgWyBCb3JkZXIuZ2xvdyAocmdiIDEgMSAxKSAwIF0KICAgIF0KICAgICAgICArKyAoaWYgaXNBY3RpdmUgdGhlbgogICAgICAgICAgICAgICAgWyBCYWNrZ3JvdW5kLmNvbG9yIChyZ2IgMC45IDAuOSAwLjkpCiAgICAgICAgICAgICAgICAsIG1vdXNlT3ZlciBbIEZvbnQuY29sb3IgKHJnYiAyNTUgMjU1IDI1NSkgXQogICAgICAgICAgICAgICAgLCBCb3JkZXIud2lkdGggMQogICAgICAgICAgICAgICAgLCBCb3JkZXIuY29sb3IgKHJnYiAwLjkgMC45IDAuOSkKICAgICAgICAgICAgICAgIF0KCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIFsgQmFja2dyb3VuZC5jb2xvciAocmdiIDAuOTUgMC45NSAwLjk1KQogICAgICAgICAgICAgICAgLCBGb250LmNvbG9yIChyZ2IgMC43IDAuNyAwLjcpCiAgICAgICAgICAgICAgICAsIGh0bWxBdHRyaWJ1dGUgPHwgSHRtbEF0dHIuc3R5bGUgImN1cnNvciIgImRlZmF1bHQiCiAgICAgICAgICAgICAgICAsIEJvcmRlci53aWR0aCAxCiAgICAgICAgICAgICAgICAsIEJvcmRlci5jb2xvciAocmdiIDAuOTUgMC45NSAwLjk1KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICkKCgp0ZXh0SW5wdXRTdHlsZSA9CiAgICBbIHdpZHRoIChweCAyNTApCiAgICAsIHBhZGRpbmdYWSA1IDUKICAgICwgc3BhY2luZyAxNQogICAgLCBmb2N1c2VkIFsgQm9yZGVyLmdsb3cgKHJnYiAxIDEgMSkgMCBdCiAgICBdCgoKbm9BdHRyID0KICAgIGh0bWxBdHRyaWJ1dGUgPHwgSHRtbEF0dHIuY2xhc3MgIiIKCgp1cGRhdGVBdHRycyA6CiAgICAoRG9jdW1lbnQuRG9jQXR0cmlidXRlIC0+IEJvb2wpCiAgICAtPiAoYSAtPiBEb2N1bWVudC5Eb2NBdHRyaWJ1dGUpCiAgICAtPiBhCiAgICAtPiBMaXN0IERvY3VtZW50LkRvY0F0dHJpYnV0ZQogICAgLT4gTGlzdCBEb2N1bWVudC5Eb2NBdHRyaWJ1dGUKdXBkYXRlQXR0cnMgcCBhdHRyV3JhcHBlciB2YWwgYXR0cnMgPQogICAgbGV0CiAgICAgICAgaGVscGVyIGFjYyB4cyA9CiAgICAgICAgICAgIGNhc2UgeHMgb2YKICAgICAgICAgICAgICAgIFtdIC0+CiAgICAgICAgICAgICAgICAgICAgTGlzdC5yZXZlcnNlIChhdHRyV3JhcHBlciB2YWwgOjogYWNjKQoKICAgICAgICAgICAgICAgIHggOjogeHNfIC0+CiAgICAgICAgICAgICAgICAgICAgaWYgYXR0cldyYXBwZXIgdmFsID09IHggdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBMaXN0LnJldmVyc2UgYWNjICsrIHhzXwoKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIHAgeCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIExpc3QucmV2ZXJzZSAoYXR0cldyYXBwZXIgdmFsIDo6IGFjYykgKysgeHNfCgogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyICh4IDo6IGFjYykgeHNfCiAgICBpbgogICAgaGVscGVyIFtdIGF0dHJzCgoKaXNGb250QXR0ciA6IERvY3VtZW50LkRvY0F0dHJpYnV0ZSAtPiBCb29sCmlzRm9udEF0dHIgYSA9CiAgICBjYXNlIGEgb2YKICAgICAgICBGb250IF8gLT4KICAgICAgICAgICAgVHJ1ZQoKICAgICAgICBfIC0+CiAgICAgICAgICAgIEZhbHNlCgoKaXNGb250Q29sb3JBdHRyIDogRG9jdW1lbnQuRG9jQXR0cmlidXRlIC0+IEJvb2wKaXNGb250Q29sb3JBdHRyIGEgPQogICAgY2FzZSBhIG9mCiAgICAgICAgRm9udENvbG9yIF8gLT4KICAgICAgICAgICAgVHJ1ZQoKICAgICAgICBfIC0+CiAgICAgICAgICAgIEZhbHNlCgoKaXNCYWNrZ3JvdW5kQ29sb3JBdHRyIDogRG9jdW1lbnQuRG9jQXR0cmlidXRlIC0+IEJvb2wKaXNCYWNrZ3JvdW5kQ29sb3JBdHRyIGEgPQogICAgY2FzZSBhIG9mCiAgICAgICAgQmFja2dyb3VuZENvbG9yIF8gLT4KICAgICAgICAgICAgVHJ1ZQoKICAgICAgICBfIC0+CiAgICAgICAgICAgIEZhbHNlCgoKaXNGb250U2l6ZUF0dHIgOiBEb2N1bWVudC5Eb2NBdHRyaWJ1dGUgLT4gQm9vbAppc0ZvbnRTaXplQXR0ciBhID0KICAgIGNhc2UgYSBvZgogICAgICAgIEZvbnRTaXplIF8gLT4KICAgICAgICAgICAgVHJ1ZQoKICAgICAgICBfIC0+CiAgICAgICAgICAgIEZhbHNlCgoKc2V0QWxpZ25NZW50IDogTGlzdCBEb2N1bWVudC5Eb2NBdHRyaWJ1dGUgLT4gRG9jdW1lbnQuRG9jQXR0cmlidXRlIC0+IExpc3QgRG9jdW1lbnQuRG9jQXR0cmlidXRlCnNldEFsaWduTWVudCBhdHRycyBhbGlnbm1lbnQgPQogICAgbGV0CiAgICAgICAgYWxpZ25tZW50cyA9CiAgICAgICAgICAgIFsgRm9udEFsaWduUmlnaHQsIEZvbnRBbGlnbkxlZnQsIENlbnRlciwgSnVzdGlmeSBdCgogICAgICAgIGF0dHJzXyA9CiAgICAgICAgICAgIExpc3QuZmlsdGVyIChcYXR0ciAtPiBub3QgPHwgTGlzdC5tZW1iZXIgYXR0ciBhbGlnbm1lbnRzKSBhdHRycwogICAgaW4KICAgIGFsaWdubWVudCA6OiBhdHRyc18K",
					"AQAAAAAAAAABAAAAUe8AAAAAAABR7wAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/eniac314/prog/elm/murol2.0/src/Internals/Icons.elm",
			"settings":
			{
				"buffer_size": 17413,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/eniac314/prog/elm/murol2.0/src/Document/DocumentViews/DocumentView.elm",
			"settings":
			{
				"buffer_size": 56360,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/eniac314/prog/elm/murol2.0/src/Document/DocumentViews/StyleSheets.elm",
			"settings":
			{
				"buffer_size": 24350,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/Main.elm",
			"settings":
			{
				"buffer_size": 44011,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAAFMDAAAAAAAAUwMAAAAAAAAqAQAAcG9ydCBhY3RpdmF0ZUF0dHJpYnV0ZSA6IEUuVmFsdWUgLT4gQ21kIG1zZwoKCnBvcnQgZGVhY3RpdmF0ZUF0dHJpYnV0ZXMgOiBFLlZhbHVlIC0+IENtZCBtc2cKCgpwb3J0IGluc2VydEh0bWwgOiBFLlZhbHVlIC0+IENtZCBtc2cKCgpwb3J0IGxvYWRIdG1sIDogRS5WYWx1ZSAtPiBDbWQgbXNnCgoKcG9ydCBnZXRTZWxlY3Rpb24gOiAoKSAtPiBDbWQgbXNnCgoKcG9ydCBzZWxlY3Rpb24gOiAoRS5WYWx1ZSAtPiBtc2cpIC0+IFN1YiBtc2cKCgpwb3J0IHRyaXhSZWFkeSA6IChFLlZhbHVlIC0+IG1zZykgLT4gU3ViIG1zZw",
					"AQAAAAAAAAABAAAAUwMAAAAAAAB9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					4,
					"left_delete",
					null,
					"BAAAAFQDAAAAAAAAVAMAAAAAAAABAAAAClMDAAAAAAAAUwMAAAAAAAABAAAAClIDAAAAAAAAUgMAAAAAAAABAAAAClEDAAAAAAAAUQMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAVQMAAAAAAABVAwAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAKsDAAAAAAAAqwMAAAAAAAA3AQAALS17IGNvbnRhaW5lcldpZHRoIDogSW50Ci0tICAgICwgbWF4SGVpZ2h0IDogSW50Ci0tICAgICwgb3V0TXNnIDogTXNnIC0+IG1zZwotLSAgICAsIGxpbmtQaWNrZXJWaWV3IDogbGlua1BpY2tlckNvbmZpZyAtPiAoTXNnIC0+IG1zZykgLT4gRWxlbWVudCBtc2cKLS0gICAgLCBwaWNrZWRMaW5rIDogTWF5YmUgU3RyaW5nCi0tICAgICwgY29sb3JQaWNrZXJWaWV3IDogY29sb3JQaWNrZXJDb25maWcgLT4gKE1zZyAtPiBtc2cpIC0+IEVsZW1lbnQgbXNnCi0tICAgICwgcGlja2VkQ29sb3IgOiBTdHJpbmcgLT4gTWF5YmUgU3RyaW5nCi0tICAgIH0",
					"AQAAAAAAAAABAAAAqwMAAAAAAADiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					2,
					"left_delete",
					null,
					"AgAAAKsGAAAAAAAAqwYAAAAAAACoAAAAdG1sQ29udGVudCA6IEh0bWxDb250ZW50CiAgICAsIHNlbGVjdGlvbiA6IE1heWJlIFNlbGVjdGlvbgogICAgLCBodG1sT3V0cHV0IDogSHRtbE91dHB1dAogICAgLCBnbG9iYWxBdHRyaWJ1dGVzIDogTGlzdCBHbG9iYWxBdHRyaWJ1dGUKICAgICwgb3BlbmVkV2lkZ2V0IDogTWF5YmUgV2lkZ2V0qgYAAAAAAACqBgAAAAAAAAEAAABo",
					"AQAAAAAAAAABAAAAqwYAAAAAAABTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "trixEdi"
					},
					"BwAAAKoGAAAAAAAAqwYAAAAAAAAAAAAAqwYAAAAAAACsBgAAAAAAAAAAAACsBgAAAAAAAK0GAAAAAAAAAAAAAK0GAAAAAAAArgYAAAAAAAAAAAAArgYAAAAAAACvBgAAAAAAAAAAAACvBgAAAAAAALAGAAAAAAAAAAAAALAGAAAAAAAAsQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgYAAAAAAACqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "tor"
					},
					"AwAAALEGAAAAAAAAsgYAAAAAAAAAAAAAsgYAAAAAAACzBgAAAAAAAAAAAACzBgAAAAAAALQGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQYAAAAAAACxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAALQGAAAAAAAAtQYAAAAAAAAAAAAAtQYAAAAAAAC2BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAYAAAAAAAC0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYGAAAAAAAAtwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgYAAAAAAAC2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFEDAAAAAAAAUgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQMAAAAAAABRAwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "import"
					},
					"BgAAAFEDAAAAAAAAUgMAAAAAAAAAAAAAUgMAAAAAAABTAwAAAAAAAAAAAABTAwAAAAAAAFQDAAAAAAAAAAAAAFQDAAAAAAAAVQMAAAAAAAAAAAAAVQMAAAAAAABWAwAAAAAAAAAAAABWAwAAAAAAAFcDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQMAAAAAAABRAwAAAAAAAAAAAAAAAAAA"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " Edit"
					},
					"BQAAAFcDAAAAAAAAWAMAAAAAAAAAAAAAWAMAAAAAAABZAwAAAAAAAAAAAABZAwAAAAAAAFoDAAAAAAAAAAAAAFoDAAAAAAAAWwMAAAAAAAAAAAAAWwMAAAAAAABcAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwMAAAAAAABXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAFsDAAAAAAAAWwMAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAXAMAAAAAAABcAwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "tor.Tru"
					},
					"BwAAAFsDAAAAAAAAXAMAAAAAAAAAAAAAXAMAAAAAAABdAwAAAAAAAAAAAABdAwAAAAAAAF4DAAAAAAAAAAAAAF4DAAAAAAAAXwMAAAAAAAAAAAAAXwMAAAAAAABgAwAAAAAAAAAAAABgAwAAAAAAAGEDAAAAAAAAAAAAAGEDAAAAAAAAYgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwMAAAAAAABbAwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAGEDAAAAAAAAYQMAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAYgMAAAAAAABiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "ix"
					},
					"AgAAAGEDAAAAAAAAYgMAAAAAAAAAAAAAYgMAAAAAAABjAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQMAAAAAAABhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAGMDAAAAAAAAZAMAAAAAAAAAAAAAZAMAAAAAAABlAwAAAAAAAAAAAABlAwAAAAAAAGYDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwMAAAAAAABjAwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " Trix"
					},
					"BQAAAGYDAAAAAAAAZwMAAAAAAAAAAAAAZwMAAAAAAABoAwAAAAAAAAAAAABoAwAAAAAAAGkDAAAAAAAAAAAAAGkDAAAAAAAAagMAAAAAAAAAAAAAagMAAAAAAABrAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgMAAAAAAABmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAGsDAAAAAAAAbAMAAAAAAAAAAAAAbAMAAAAAAABtAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawMAAAAAAABrAwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert_completion",
					{
						"completion": "exposing",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "exposing"
					},
					"AgAAAGwDAAAAAAAAbAMAAAAAAAABAAAAZWwDAAAAAAAAdAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQMAAAAAAABtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHQDAAAAAAAAdQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAMAAAAAAAB0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHUDAAAAAAAAdwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQMAAAAAAAB1AwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": ".."
					},
					"AgAAAHYDAAAAAAAAdwMAAAAAAAAAAAAAdwMAAAAAAAB4AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgMAAAAAAAB2AwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Editor/Trix.elm",
			"settings":
			{
				"buffer_size": 44788,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAGgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAyK4AAAAAAAAAAAAAyK4AAAAAAADIrgAAAAAAABkAAABtb2R1bGUgTWFpbiBleHBvc2luZyAoLi4p",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAyK4AAAAAAADJrgAAcG9ydCBtb2R1bGUgTWFpbiBleHBvc2luZyAoLi4pCgotLWltcG9ydCBDb2xvciBleHBvc2luZyAoLi4pCgppbXBvcnQgQnJvd3NlciBleHBvc2luZyAoLi4pCmltcG9ydCBCcm93c2VyLkV2ZW50cyBleHBvc2luZyAob25Nb3VzZURvd24pCmltcG9ydCBEaWN0IGV4cG9zaW5nICguLikKaW1wb3J0IEVsZW1lbnQgZXhwb3NpbmcgKC4uKQppbXBvcnQgRWxlbWVudC5CYWNrZ3JvdW5kIGFzIEJhY2tncm91bmQKaW1wb3J0IEVsZW1lbnQuQm9yZGVyIGFzIEJvcmRlcgppbXBvcnQgRWxlbWVudC5FdmVudHMgYXMgRXZlbnRzCmltcG9ydCBFbGVtZW50LkZvbnQgYXMgRm9udAppbXBvcnQgRWxlbWVudC5JbnB1dCBhcyBJbnB1dAppbXBvcnQgRWxlbWVudC5LZXllZCBhcyBLZXllZAppbXBvcnQgRWxlbWVudC5MYXp5IGFzIExhenkKaW1wb3J0IEVsZW1lbnQuUmVnaW9uIGFzIFJlZ2lvbgppbXBvcnQgSGV4IGV4cG9zaW5nIChmcm9tU3RyaW5nKQppbXBvcnQgSHRtbCBhcyBIdG1sCmltcG9ydCBIdG1sLkF0dHJpYnV0ZXMgYXMgSHRtbEF0dHIKaW1wb3J0IEh0bWwuRXZlbnRzIGFzIEh0bWxFdmVudHMgZXhwb3NpbmcgKG9uLCBvbklucHV0KQppbXBvcnQgSHRtbC5QYXJzZXIgZXhwb3NpbmcgKC4uKQppbXBvcnQgSHRtbC5QYXJzZXIuVXRpbCBleHBvc2luZyAoLi4pCmltcG9ydCBKc29uLkRlY29kZSBhcyBECmltcG9ydCBKc29uLkVuY29kZSBhcyBFCmltcG9ydCBKc29uLlZhbHVlIGV4cG9zaW5nIChkZWNvZGVWYWx1ZSkKaW1wb3J0IFN2ZyBleHBvc2luZyAoU3ZnLCBzdmcpCmltcG9ydCBTdmcuQXR0cmlidXRlcyBleHBvc2luZyAoY3gsIGN5LCBkLCByLCByeCwgcnksIHgsIHgxLCB4MiwgeSwgeTEsIHkyKQoKCnBvcnQgYWN0aXZhdGVBdHRyaWJ1dGUgOiBFLlZhbHVlIC0+IENtZCBtc2cKCgpwb3J0IGRlYWN0aXZhdGVBdHRyaWJ1dGVzIDogRS5WYWx1ZSAtPiBDbWQgbXNnCgoKcG9ydCBpbnNlcnRIdG1sIDogRS5WYWx1ZSAtPiBDbWQgbXNnCgoKcG9ydCBsb2FkSHRtbCA6IEUuVmFsdWUgLT4gQ21kIG1zZwoKCnBvcnQgZ2V0U2VsZWN0aW9uIDogKCkgLT4gQ21kIG1zZwoKCnBvcnQgc2VsZWN0aW9uIDogKEUuVmFsdWUgLT4gbXNnKSAtPiBTdWIgbXNnCgoKcG9ydCB0cml4UmVhZHkgOiAoRS5WYWx1ZSAtPiBtc2cpIC0+IFN1YiBtc2cKCgp0eXBlIGFsaWFzIEZsYWdzID0KICAgIHsgY3VycmVudFRpbWUgOiBJbnQKICAgICwgd2lkdGggOiBJbnQKICAgICwgaGVpZ2h0IDogSW50CiAgICB9CgoKCi0teyBjb250YWluZXJXaWR0aCA6IEludAotLSAgICAsIG1heEhlaWdodCA6IEludAotLSAgICAsIG91dE1zZyA6IE1zZyAtPiBtc2cKLS0gICAgLCBsaW5rUGlja2VyVmlldyA6IGxpbmtQaWNrZXJDb25maWcgLT4gKE1zZyAtPiBtc2cpIC0+IEVsZW1lbnQgbXNnCi0tICAgICwgcGlja2VkTGluayA6IE1heWJlIFN0cmluZwotLSAgICAsIGNvbG9yUGlja2VyVmlldyA6IGNvbG9yUGlja2VyQ29uZmlnIC0+IChNc2cgLT4gbXNnKSAtPiBFbGVtZW50IG1zZwotLSAgICAsIHBpY2tlZENvbG9yIDogU3RyaW5nIC0+IE1heWJlIFN0cmluZwotLSAgICB9CgoKbWFpbiA9CiAgICBsZXQKICAgICAgICBpbml0XyA6IEZsYWdzIC0+ICggTW9kZWwsIENtZCBNc2cgKQogICAgICAgIGluaXRfIGZsYWdzID0KICAgICAgICAgICAgaW5pdCBbXSBOb3RoaW5nIGlkZW50aXR5CiAgICBpbgogICAgQnJvd3Nlci5lbGVtZW50CiAgICAgICAgeyBpbml0ID0gaW5pdF8KICAgICAgICAsIHZpZXcgPQogICAgICAgICAgICBcbSAtPgogICAgICAgICAgICAgICAgRWxlbWVudC5sYXlvdXQgW10gPHwKICAgICAgICAgICAgICAgICAgICB2aWV3CiAgICAgICAgICAgICAgICAgICAgICAgIHsgb3V0TXNnID0gaWRlbnRpdHkKICAgICAgICAgICAgICAgICAgICAgICAgLCBtYXhIZWlnaHQgPSA0MDAKICAgICAgICAgICAgICAgICAgICAgICAgLCBjb250YWluZXJXaWR0aCA9IDcwMAogICAgICAgICAgICAgICAgICAgICAgICAsIGxpbmtQaWNrZXIgPSBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICwgY29sb3JQaWNrZXIgPSBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbQogICAgICAgICwgdXBkYXRlID0KICAgICAgICAgICAgXG1zZyBtIC0+CiAgICAgICAgICAgICAgICB1cGRhdGUgeyBvdXRNc2cgPSBpZGVudGl0eSB9IG1zZyBtCiAgICAgICAgICAgICAgICAgICAgfD4gKFwoIGEsIGIsIGMgKSAtPiAoIGEsIGIgKSkKICAgICAgICAsIHN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zCiAgICAgICAgfQoKCnR5cGUgYWxpYXMgTW9kZWwgPQogICAgeyBodG1sQ29udGVudCA6IEh0bWxDb250ZW50CiAgICAsIHNlbGVjdGlvbiA6IE1heWJlIFNlbGVjdGlvbgogICAgLCBodG1sT3V0cHV0IDogSHRtbE91dHB1dAogICAgLCBnbG9iYWxBdHRyaWJ1dGVzIDogTGlzdCBHbG9iYWxBdHRyaWJ1dGUKICAgICwgb3BlbmVkV2lkZ2V0IDogTWF5YmUgV2lkZ2V0CgogICAgLS0sIHBpY2tlZENvbG9yIDogQ29sb3IKICAgIH0KCgppbml0IDoKICAgIExpc3QgR2xvYmFsQXR0cmlidXRlCiAgICAtPiBNYXliZSBIdG1sT3V0cHV0CiAgICAtPiAoTXNnIC0+IG1zZykKICAgIC0+ICggTW9kZWwsIENtZCBtc2cgKQppbml0IGF0dHJzIG1iSW5wdXQgb3V0TXNnID0KICAgICggeyBodG1sQ29udGVudCA9IEh0bWxDb250ZW50ICIiICIiCiAgICAgICwgc2VsZWN0aW9uID0gTm90aGluZwogICAgICAsIGh0bWxPdXRwdXQgPSBNYXliZS53aXRoRGVmYXVsdCAiIiBtYklucHV0CiAgICAgICwgZ2xvYmFsQXR0cmlidXRlcyA9CiAgICAgICAgICAgIGlmIGF0dHJzID09IFtdIHRoZW4KICAgICAgICAgICAgICAgIFsgRm9udCAiQXJpYWwiCiAgICAgICAgICAgICAgICAsIEZvbnRTaXplIDE2CiAgICAgICAgICAgICAgICBdCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBhdHRycwogICAgICAsIG9wZW5lZFdpZGdldCA9IE5vdGhpbmcKCiAgICAgIC0tLCBwaWNrZWRDb2xvciA9CiAgICAgIH0KICAgICwgQ21kLm5vbmUKICAgICkKCgp0eXBlIEdsb2JhbEF0dHJpYnV0ZQogICAgPSBBbGlnblJpZ2h0CiAgICB8IEFsaWduTGVmdAogICAgfCBCYWNrZ3JvdW5kQ29sb3IgUGlja2VkQ29sb3IKICAgIHwgQm9yZGVyCiAgICB8IEZvbnQgU3RyaW5nCiAgICB8IEZvbnRDb2xvciBQaWNrZWRDb2xvcgogICAgfCBGb250U2l6ZSBJbnQKICAgIHwgRm9udEFsaWduTGVmdAogICAgfCBGb250QWxpZ25SaWdodAogICAgfCBDZW50ZXIKICAgIHwgSnVzdGlmeQogICAgfCBCb2xkCiAgICB8IEl0YWxpYwogICAgfCBPdGhlciAoIFN0cmluZywgU3RyaW5nICkKCgp0eXBlIGFsaWFzIFBpY2tlZENvbG9yID0KICAgIHsgciA6IEludCwgZyA6IEludCwgYiA6IEludCwgYSA6IEZsb2F0IH0KCgp0eXBlIGFsaWFzIEh0bWxPdXRwdXQgPQogICAgU3RyaW5nCgoKdHlwZSBhbGlhcyBIdG1sQ29udGVudCA9CiAgICB7IGh0bWwgOiBIdG1sT3V0cHV0CiAgICAsIHRleHQgOiBTdHJpbmcKICAgIH0KCgp0eXBlIGFsaWFzIFNlbGVjdGlvbiA9CiAgICB7IHN0YXJ0IDogSW50CiAgICAsIGVuZCA6IEludAogICAgLCBhdHRycyA6IERpY3QgU3RyaW5nIFN0cmluZwogICAgLCB0ZXh0IDogU3RyaW5nCiAgICB9CgoKdHlwZSBXaWRnZXQKICAgID0gRm9udENvbG9yUGlja2VyCiAgICB8IEJhY2tncm91bmRDb2xvclBpY2tlcgogICAgfCBJbnRlcm5hbExpbmtzCiAgICB8IEltYWdlUGlja2VyCiAgICB8IERvY1BpY2tlcgoKCnN1YnNjcmlwdGlvbnMgbW9kZWwgPQogICAgU3ViLmJhdGNoCiAgICAgICAgWyBjYXNlIG1vZGVsLm9wZW5lZFdpZGdldCBvZgogICAgICAgICAgICBKdXN0IEZvbnRDb2xvclBpY2tlciAtPgogICAgICAgICAgICAgICAgQnJvd3Nlci5FdmVudHMub25Nb3VzZURvd24gKG91dHNpZGVUYXJnZXRIYW5kbGVyICJmb250Q29sb3JQaWNrZXIiIENsb3NlKQoKICAgICAgICAgICAgSnVzdCBCYWNrZ3JvdW5kQ29sb3JQaWNrZXIgLT4KICAgICAgICAgICAgICAgIEJyb3dzZXIuRXZlbnRzLm9uTW91c2VEb3duIChvdXRzaWRlVGFyZ2V0SGFuZGxlciAiYmFja2dyb3VuZENvbG9yUGlja2VyIiBDbG9zZSkKCiAgICAgICAgICAgIEp1c3QgSW50ZXJuYWxMaW5rcyAtPgogICAgICAgICAgICAgICAgQnJvd3Nlci5FdmVudHMub25Nb3VzZURvd24gKG91dHNpZGVUYXJnZXRIYW5kbGVyICJpbnRlcm5hbExpbmtQaWNrZXIiIENsb3NlKQoKICAgICAgICAgICAgSnVzdCBEb2NQaWNrZXIgLT4KICAgICAgICAgICAgICAgIEJyb3dzZXIuRXZlbnRzLm9uTW91c2VEb3duIChvdXRzaWRlVGFyZ2V0SGFuZGxlciAiZG9jUGlja2VyIiBDbG9zZSkKCiAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgLCBzZWxlY3Rpb24gR290U2VsZWN0aW9uCiAgICAgICAgLCB0cml4UmVhZHkgKGFsd2F5cyBMb2FkQ29udGVudEluVHJpeCkKICAgICAgICBdCgoKdHlwZSBNc2cKICAgID0gR2V0SHRtbENvbnRlbnQgSHRtbENvbnRlbnQKICAgIHwgR2V0U2VsZWN0aW9uCiAgICB8IEdvdFNlbGVjdGlvbiBFLlZhbHVlCiAgICB8IExvYWRDb250ZW50SW5Ucml4CiAgICB8IE9wZW5XaWRnZXQgV2lkZ2V0CiAgICB8IENsb3NlCiAgICB8IEluc2VydEludGVybmFsTGluayBTdHJpbmcKICAgICAgLS18IEluc2VydERvY0xpbmsgU3RyaW5nCiAgICB8IFNldFRleHRDb2xvciBCb29sIFBpY2tlZENvbG9yCiAgICB8IFNldEJhY2tncm91bmRDb2xvciBCb29sIFBpY2tlZENvbG9yCiAgICB8IFNldEZvbnQgQm9vbCBTdHJpbmcKICAgIHwgU2V0Rm9udFNpemUgQm9vbCBJbnQKICAgIHwgU2V0QWxpZ25NZW50IEdsb2JhbEF0dHJpYnV0ZQogICAgICAtLXwgU2V0R2xvYmFsQXR0cmlidXRlIEJvb2wgKCBTdHJpbmcsIFN0cmluZyApCiAgICB8IFVuZG9TdHlsZQogICAgfCBTYXZlQW5kUXVpdAogICAgfCBRdWl0CiAgICB8IE5vT3AKCgp0eXBlIEVkaXRvclJlc3VsdCBhCiAgICA9IEVkaXRvclF1aXQKICAgIHwgRWRpdG9yRGF0YSBhCgoKdXBkYXRlIDoKICAgIHsgb3V0TXNnIDogTXNnIC0+IG1zZyB9CiAgICAtPiBNc2cKICAgIC0+IE1vZGVsCiAgICAtPgogICAgICAgICggTW9kZWwKICAgICAgICAsIENtZCBtc2cKICAgICAgICAsIE1heWJlIChFZGl0b3JSZXN1bHQgKCBIdG1sT3V0cHV0LCBMaXN0IEdsb2JhbEF0dHJpYnV0ZSApKQogICAgICAgICkKdXBkYXRlIGNvbmZpZyBtc2cgbW9kZWwgPQogICAgY2FzZSBtc2cgb2YKICAgICAgICBHZXRIdG1sQ29udGVudCBjb250ZW50IC0+CiAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgb3V0cHV0ID0KICAgICAgICAgICAgICAgICAgICBjb250ZW50Lmh0bWwKICAgICAgICAgICAgaW4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IGh0bWxDb250ZW50ID0gY29udGVudAogICAgICAgICAgICAgICAgLCBodG1sT3V0cHV0ID0gb3V0cHV0CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIGdldFNlbGVjdGlvbiAoKQogICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgKQoKICAgICAgICBHZXRTZWxlY3Rpb24gLT4KICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAsIGdldFNlbGVjdGlvbiAoKQogICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgKQoKICAgICAgICBHb3RTZWxlY3Rpb24gdmFsdWUgLT4KICAgICAgICAgICAgY2FzZSBELmRlY29kZVZhbHVlIGRlY29kZVNlbGVjdGlvbiB2YWx1ZSBvZgogICAgICAgICAgICAgICAgT2sgKCBzZWwsIGlkcyApIC0+CiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICAgICAgICAgIHwgc2VsZWN0aW9uID0gSnVzdCBzZWwKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAsIENtZC5ub25lCiAgICAgICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgIEVyciBfIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIExvYWRDb250ZW50SW5Ucml4IC0+CiAgICAgICAgICAgIC0tbGV0CiAgICAgICAgICAgIC0tICAgIHJlbW92ZUhpZ2hsaWdodCBub2RlID0KICAgICAgICAgICAgLS0gICAgICAgIGNhc2Ugbm9kZSBvZgogICAgICAgICAgICAtLSAgICAgICAgICAgIEVsZW1lbnQgdGFnIGF0dHJzIG5vZGVzIC0+CiAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgIEVsZW1lbnQKICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgICAgIHRhZwogICAgICAgICAgICAtLSAgICAgICAgICAgICAgICAgICAgKExpc3QuZm9sZHIKICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgICAgICAgICAoXCggYXR0ciwgdmFsdWUgKSBhY2MgLT4KICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIGF0dHIgPT0gInN0eWxlIiB0aGVuCiAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIGF0dHIsIFN0cmluZy5yZXBsYWNlICJiYWNrZ3JvdW5kLWNvbG9yOiBoaWdobGlnaHQ7IiAiIiB2YWx1ZSApCiAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIGF0dHIsIHZhbHVlICkKICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAtLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjogYWNjCiAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAtLSAgICAgICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnMKICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgICAgIChMaXN0Lm1hcCByZW1vdmVIaWdobGlnaHQgbm9kZXMpCiAgICAgICAgICAgIC0tICAgICAgICAgICAgb3RoZXIgLT4KICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgb3RoZXIKICAgICAgICAgICAgLS1pbgogICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICwgbW9kZWwuaHRtbE91dHB1dAogICAgICAgICAgICAgICAgLS18PiBMaXN0LmNvbmNhdE1hcCAodGV4dEJsb2NrRWxlbWVudFRvTm9kZSAoUGFnZVRyZWVFZGl0b3IucGFnZUluZGV4IGNvbmZpZy5wYWdlVHJlZUVkaXRvcikpCiAgICAgICAgICAgICAgICAtLS0tbmVlZGVkIHRvIGZpeCBleHRlcm5hbCBsaW5rIHdpZGdlZCBsZWF2aW5nIGNvbnRlbnQgaGlnaGxpZ2h0ZWQgd2hlbiBzd2FwaW5nIGludGVybmFsIHRhYnMKICAgICAgICAgICAgICAgIC0tfD4gTGlzdC5tYXAgcmVtb3ZlSGlnaGxpZ2h0CiAgICAgICAgICAgICAgICAtLXw+IExpc3QubWFwIEh0bWwuUGFyc2VyLm5vZGVUb1N0cmluZwogICAgICAgICAgICAgICAgLS18PiBTdHJpbmcuam9pbiAiIgogICAgICAgICAgICAgICAgfD4gKFxodG1sIC0+CiAgICAgICAgICAgICAgICAgICAgICAgIEUub2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbICggInRhZ05hbWUiLCBFLnN0cmluZyAiaW5pdGlhbCBsb2FkIiApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImh0bWwiLCBFLnN0cmluZyBodG1sICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHw+IGxvYWRIdG1sCiAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICApCgogICAgICAgIE9wZW5XaWRnZXQgd2lkZ2V0IC0+CiAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgfCBvcGVuZWRXaWRnZXQgPQogICAgICAgICAgICAgICAgICAgIGlmIG1vZGVsLm9wZW5lZFdpZGdldCA9PSBKdXN0IHdpZGdldCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIE5vdGhpbmcKCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBKdXN0IHdpZGdldAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgKQoKICAgICAgICBDbG9zZSAtPgogICAgICAgICAgICAoIHsgbW9kZWwgfCBvcGVuZWRXaWRnZXQgPSBOb3RoaW5nIH0sIENtZC5ub25lLCBOb3RoaW5nICkKCiAgICAgICAgSW5zZXJ0SW50ZXJuYWxMaW5rIHVybCAtPgogICAgICAgICAgICBjYXNlIG1vZGVsLnNlbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgSnVzdCB7IHN0YXJ0LCBlbmQsIGF0dHJzLCB0ZXh0IH0gLT4KICAgICAgICAgICAgICAgICAgICBpZiBzdGFydCAvPSBlbmQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluayA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjxhIGhyZWY9IiArKyB1cmwgKysgIj4iICsrIHNlbGVjdGVkICsrICI8Lz4iCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5vYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAoICJzZWxlY3Rpb25TdGFydCIsIEUuaW50IHN0YXJ0ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJzZWxlY3Rpb25FbmQiLCBFLmludCBlbmQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInRhZ05hbWUiLCBFLnN0cmluZyAiaW50ZXJuYWwgbGluayIgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImh0bWwiLCBFLnN0cmluZyBsaW5rICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBvcGVuZWRXaWRnZXQgPSBOb3RoaW5nIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBpbnNlcnRIdG1sIGRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSwgTm90aGluZyApCgogICAgICAgICAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lLCBOb3RoaW5nICkKCiAgICAgICAgLS1JbnNlcnREb2NMaW5rIHVybCAtPgogICAgICAgIC0tICAgICggbW9kZWwsIENtZC5ub25lLCBOb3RoaW5nICkKICAgICAgICBTZXRUZXh0Q29sb3IgaXNHbG9iYWwgY29sb3IgLT4KICAgICAgICAgICAgaWYgaXNHbG9iYWwgdGhlbgogICAgICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICAgICAgfCBnbG9iYWxBdHRyaWJ1dGVzID0KICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQXR0cnMgaXNGb250Q29sb3JBdHRyIEZvbnRDb2xvciBjb2xvciBtb2RlbC5nbG9iYWxBdHRyaWJ1dGVzCiAgICAgICAgICAgICAgICAgICAgLCBvcGVuZWRXaWRnZXQgPSBOb3RoaW5nCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICwgQ21kLmJhdGNoCiAgICAgICAgICAgICAgICAgICAgW10KICAgICAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgY2FzZSBtb2RlbC5zZWxlY3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICBKdXN0IHsgc3RhcnQsIGVuZCwgYXR0cnMgfSAtPgogICAgICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUub2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgKCAic2VsZWN0aW9uU3RhcnQiLCBFLmludCBzdGFydCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAic2VsZWN0aW9uRW5kIiwgRS5pbnQgZW5kICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJhdHRyaWJ1dGUiLCBFLnN0cmluZyAiZm9yZWdyb3VuZENvbG9yIiApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgKCAidmFsdWUiLCBFLnN0cmluZyAocGlja2VkQ29sb3JUb1N0ciBjb2xvcikgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IG9wZW5lZFdpZGdldCA9IE5vdGhpbmcgfQogICAgICAgICAgICAgICAgICAgICAgICAsIGFjdGl2YXRlQXR0cmlidXRlIGRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSwgTm90aGluZyApCgogICAgICAgIFNldEJhY2tncm91bmRDb2xvciBpc0dsb2JhbCBjb2xvciAtPgogICAgICAgICAgICBpZiBpc0dsb2JhbCB0aGVuCiAgICAgICAgICAgICAgICAoIHsgbW9kZWwKICAgICAgICAgICAgICAgICAgICB8IGdsb2JhbEF0dHJpYnV0ZXMgPQogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBdHRycyBpc0JhY2tncm91bmRDb2xvckF0dHIgQmFja2dyb3VuZENvbG9yIGNvbG9yIG1vZGVsLmdsb2JhbEF0dHJpYnV0ZXMKICAgICAgICAgICAgICAgICAgICAsIG9wZW5lZFdpZGdldCA9IE5vdGhpbmcKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBDbWQuYmF0Y2gKICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBjYXNlIG1vZGVsLnNlbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIEp1c3QgeyBzdGFydCwgZW5kLCBhdHRycyB9IC0+CiAgICAgICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5vYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAoICJzZWxlY3Rpb25TdGFydCIsIEUuaW50IHN0YXJ0ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJzZWxlY3Rpb25FbmQiLCBFLmludCBlbmQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImF0dHJpYnV0ZSIsIEUuc3RyaW5nICJiYWNrZ3JvdW5kQ29sb3IiICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJ2YWx1ZSIsIEUuc3RyaW5nIChwaWNrZWRDb2xvclRvU3RyIGNvbG9yKSApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwgb3BlbmVkV2lkZ2V0ID0gTm90aGluZyB9CiAgICAgICAgICAgICAgICAgICAgICAgICwgYWN0aXZhdGVBdHRyaWJ1dGUgZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lLCBOb3RoaW5nICkKCiAgICAgICAgU2V0Rm9udCBpc0dsb2JhbCBmb250IC0+CiAgICAgICAgICAgIGlmIGlzR2xvYmFsIHRoZW4KICAgICAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgICAgIHwgZ2xvYmFsQXR0cmlidXRlcyA9CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUF0dHJzIGlzRm9udEF0dHIgRm9udCBmb250IG1vZGVsLmdsb2JhbEF0dHJpYnV0ZXMKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBDbWQuYmF0Y2gKICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBjYXNlIG1vZGVsLnNlbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIEp1c3QgeyBzdGFydCwgZW5kLCBhdHRycyB9IC0+CiAgICAgICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5vYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAoICJzZWxlY3Rpb25TdGFydCIsIEUuaW50IHN0YXJ0ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJzZWxlY3Rpb25FbmQiLCBFLmludCBlbmQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImF0dHJpYnV0ZSIsIEUuc3RyaW5nICJ0ZXh0Rm9udCIgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInZhbHVlIiwgRS5zdHJpbmcgZm9udCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwgb3BlbmVkV2lkZ2V0ID0gTm90aGluZyB9CiAgICAgICAgICAgICAgICAgICAgICAgICwgYWN0aXZhdGVBdHRyaWJ1dGUgZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lLCBOb3RoaW5nICkKCiAgICAgICAgU2V0Rm9udFNpemUgaXNHbG9iYWwgbiAtPgogICAgICAgICAgICBpZiBpc0dsb2JhbCB0aGVuCiAgICAgICAgICAgICAgICAoIHsgbW9kZWwKICAgICAgICAgICAgICAgICAgICB8IGdsb2JhbEF0dHJpYnV0ZXMgPQogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBdHRycyBpc0ZvbnRTaXplQXR0ciBGb250U2l6ZSBuIG1vZGVsLmdsb2JhbEF0dHJpYnV0ZXMKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBDbWQuYmF0Y2gKICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBjYXNlIG1vZGVsLnNlbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIEp1c3QgeyBzdGFydCwgZW5kLCBhdHRycyB9IC0+CiAgICAgICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5vYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAoICJzZWxlY3Rpb25TdGFydCIsIEUuaW50IHN0YXJ0ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJzZWxlY3Rpb25FbmQiLCBFLmludCBlbmQgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggImF0dHJpYnV0ZSIsIEUuc3RyaW5nICJmb250U2l6ZSIgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInZhbHVlIiwgRS5zdHJpbmcgPHwgU3RyaW5nLmZyb21JbnQgbiArKyAicHgiICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBvcGVuZWRXaWRnZXQgPSBOb3RoaW5nIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBhY3RpdmF0ZUF0dHJpYnV0ZSBkYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUsIE5vdGhpbmcgKQoKICAgICAgICBTZXRBbGlnbk1lbnQgYSAtPgogICAgICAgICAgICAoIHsgbW9kZWwgfCBnbG9iYWxBdHRyaWJ1dGVzID0gc2V0QWxpZ25NZW50IG1vZGVsLmdsb2JhbEF0dHJpYnV0ZXMgYSB9CiAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAgICAgLCBOb3RoaW5nCiAgICAgICAgICAgICkKCiAgICAgICAgVW5kb1N0eWxlIC0+CiAgICAgICAgICAgIGNhc2UgbW9kZWwuc2VsZWN0aW9uIG9mCiAgICAgICAgICAgICAgICBKdXN0IHsgc3RhcnQsIGVuZCwgYXR0cnMgfSAtPgogICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUub2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAoICJzZWxlY3Rpb25TdGFydCIsIEUuaW50IHN0YXJ0ICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICggInNlbGVjdGlvbkVuZCIsIEUuaW50IGVuZCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAoICJhdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBEaWN0LmtleXMgYXR0cnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IEUubGlzdCBFLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IG9wZW5lZFdpZGdldCA9IE5vdGhpbmcgfQogICAgICAgICAgICAgICAgICAgICwgZGVhY3RpdmF0ZUF0dHJpYnV0ZXMgZGF0YQogICAgICAgICAgICAgICAgICAgICwgTm90aGluZwogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAgICAgICAgICAgICAsIE5vdGhpbmcKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIFNhdmVBbmRRdWl0IC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICAsIEp1c3QgPHwKICAgICAgICAgICAgICAgIEVkaXRvckRhdGEKICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLmh0bWxPdXRwdXQKICAgICAgICAgICAgICAgICAgICAsIG1vZGVsLmdsb2JhbEF0dHJpYnV0ZXMKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICkKCiAgICAgICAgUXVpdCAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSwgSnVzdCBFZGl0b3JRdWl0ICkKCiAgICAgICAgTm9PcCAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSwgTm90aGluZyApCgoKdXBkYXRlQXR0cnMgOgogICAgKEdsb2JhbEF0dHJpYnV0ZSAtPiBCb29sKQogICAgLT4gKGEgLT4gR2xvYmFsQXR0cmlidXRlKQogICAgLT4gYQogICAgLT4gTGlzdCBHbG9iYWxBdHRyaWJ1dGUKICAgIC0+IExpc3QgR2xvYmFsQXR0cmlidXRlCnVwZGF0ZUF0dHJzIHAgYXR0cldyYXBwZXIgdmFsIGF0dHJzID0KICAgIGxldAogICAgICAgIGhlbHBlciBhY2MgeHMgPQogICAgICAgICAgICBjYXNlIHhzIG9mCiAgICAgICAgICAgICAgICBbXSAtPgogICAgICAgICAgICAgICAgICAgIExpc3QucmV2ZXJzZSAoYXR0cldyYXBwZXIgdmFsIDo6IGFjYykKCiAgICAgICAgICAgICAgICB4IDo6IHhzXyAtPgogICAgICAgICAgICAgICAgICAgIGlmIGF0dHJXcmFwcGVyIHZhbCA9PSB4IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgTGlzdC5yZXZlcnNlIGFjYyArKyB4c18KCiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiBwIHggdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBMaXN0LnJldmVyc2UgKGF0dHJXcmFwcGVyIHZhbCA6OiBhY2MpICsrIHhzXwoKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlciAoeCA6OiBhY2MpIHhzXwogICAgaW4KICAgIGhlbHBlciBbXSBhdHRycwoKCmlzRm9udEF0dHIgOiBHbG9iYWxBdHRyaWJ1dGUgLT4gQm9vbAppc0ZvbnRBdHRyIGEgPQogICAgY2FzZSBhIG9mCiAgICAgICAgRm9udCBfIC0+CiAgICAgICAgICAgIFRydWUKCiAgICAgICAgXyAtPgogICAgICAgICAgICBGYWxzZQoKCmlzRm9udENvbG9yQXR0ciA6IEdsb2JhbEF0dHJpYnV0ZSAtPiBCb29sCmlzRm9udENvbG9yQXR0ciBhID0KICAgIGNhc2UgYSBvZgogICAgICAgIEZvbnRDb2xvciBfIC0+CiAgICAgICAgICAgIFRydWUKCiAgICAgICAgXyAtPgogICAgICAgICAgICBGYWxzZQoKCmlzQmFja2dyb3VuZENvbG9yQXR0ciA6IEdsb2JhbEF0dHJpYnV0ZSAtPiBCb29sCmlzQmFja2dyb3VuZENvbG9yQXR0ciBhID0KICAgIGNhc2UgYSBvZgogICAgICAgIEJhY2tncm91bmRDb2xvciBfIC0+CiAgICAgICAgICAgIFRydWUKCiAgICAgICAgXyAtPgogICAgICAgICAgICBGYWxzZQoKCmlzRm9udFNpemVBdHRyIDogR2xvYmFsQXR0cmlidXRlIC0+IEJvb2wKaXNGb250U2l6ZUF0dHIgYSA9CiAgICBjYXNlIGEgb2YKICAgICAgICBGb250U2l6ZSBfIC0+CiAgICAgICAgICAgIFRydWUKCiAgICAgICAgXyAtPgogICAgICAgICAgICBGYWxzZQoKCnNldEFsaWduTWVudCA6IExpc3QgR2xvYmFsQXR0cmlidXRlIC0+IEdsb2JhbEF0dHJpYnV0ZSAtPiBMaXN0IEdsb2JhbEF0dHJpYnV0ZQpzZXRBbGlnbk1lbnQgYXR0cnMgYWxpZ25tZW50ID0KICAgIGxldAogICAgICAgIGFsaWdubWVudHMgPQogICAgICAgICAgICBbIEZvbnRBbGlnblJpZ2h0LCBGb250QWxpZ25MZWZ0LCBDZW50ZXIsIEp1c3RpZnkgXQoKICAgICAgICBhdHRyc18gPQogICAgICAgICAgICBMaXN0LmZpbHRlciAoXGF0dHIgLT4gbm90IDx8IExpc3QubWVtYmVyIGF0dHIgYWxpZ25tZW50cykgYXR0cnMKICAgIGluCiAgICBhbGlnbm1lbnQgOjogYXR0cnNfCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gVmlldyBmdW5jdGlvbnMgLS0KLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgp0eXBlIGFsaWFzIEVkaXRvclZpZXdDb25maWcgbXNnID0KICAgIHsgY29udGFpbmVyV2lkdGggOiBJbnQKICAgICwgbWF4SGVpZ2h0IDogSW50CiAgICAsIG91dE1zZyA6IE1zZyAtPiBtc2cKICAgICwgbGlua1BpY2tlciA6CiAgICAgICAgTWF5YmUKICAgICAgICAgICAgeyB3aWRnZXRWaWV3IDogeyBoYW5kbGVyIDogU3RyaW5nIC0+IG1zZyB9IC0+IEVsZW1lbnQgbXNnCiAgICAgICAgICAgIH0KICAgICwgY29sb3JQaWNrZXIgOgogICAgICAgIE1heWJlCiAgICAgICAgICAgIHsgd2lkZ2V0VmlldyA6IHsgaGFuZGxlciA6IFN0cmluZyAtPiBtc2csIGF0dHJpYnV0ZSA6IFN0cmluZyB9IC0+IEVsZW1lbnQgbXNnCiAgICAgICAgICAgIH0KICAgIH0KCgp2aWV3IDoKICAgIEVkaXRvclZpZXdDb25maWcgbXNnCiAgICAtPiBNb2RlbAogICAgLT4gRWxlbWVudCBtc2cKdmlldyBjb25maWcgbW9kZWwgPQogICAgZWwgWyBwYWRkaW5nIDE1IF0gKHRyaXhFZGl0b3IgY29uZmlnIG1vZGVsKQoKCnRyaXhFZGl0b3IgOgogICAgRWRpdG9yVmlld0NvbmZpZyBtc2cKICAgIC0+IE1vZGVsCiAgICAtPiBFbGVtZW50LkVsZW1lbnQgbXNnCnRyaXhFZGl0b3IgY29uZmlnIG1vZGVsID0KICAgIGNvbHVtbgogICAgICAgIFsgc3BhY2luZyAxMCBdCiAgICAgICAgWyBjdXN0b21Ub29sYmFyIGNvbmZpZyBtb2RlbAogICAgICAgICwgRWxlbWVudC5tYXAgY29uZmlnLm91dE1zZyA8fAogICAgICAgICAgICBwYXJhZ3JhcGgKICAgICAgICAgICAgICAgIFsgd2lkdGggKHB4IDcwMCkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIFsgaHRtbCA8fAogICAgICAgICAgICAgICAgICAgIEh0bWwuZGl2CiAgICAgICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAgICAgICAgIFsgSHRtbC5ub2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHJpeC10b29sYmFyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBIdG1sQXR0ci5pZCAidHJpeC10b29sYmFyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW10KICAgICAgICAgICAgICAgICAgICAgICAgLCBIdG1sLm5vZGUgImlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBIdG1sQXR0ci50eXBlXyAiaGlkZGVuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBIdG1sQXR0ci5pZCAicmVzZXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIEh0bWxBdHRyLnZhbHVlICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgICAgICAgICAsIEh0bWwubm9kZSAidHJpeC1lZGl0b3IiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIG9uICJ0cml4LWNoYW5nZSIgKEQubWFwIEdldEh0bWxDb250ZW50IGRlY29kZUVkaXRvck1hcmt1cCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgb24gInRyaXgtc2VsZWN0aW9uLWNoYW5nZSIgKEQubWFwIChhbHdheXMgR2V0U2VsZWN0aW9uKSAoRC5zdWNjZWVkICgpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgSHRtbEF0dHIuY2xhc3MgInRyaXgtY29udGVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgSHRtbEF0dHIuY2xhc3MgInRyaXgtY29udGVudC1lZGl0b3IiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIEh0bWxBdHRyLmF0dHJpYnV0ZSAidG9vbGJhciIgInRyaXgtdG9vbGJhciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgSHRtbEF0dHIuYXR0cmlidXRlICJpbnB1dCIgInJlc2V0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBIdG1sQXR0ci5zdHlsZSAibWF4SGVpZ2h0IiAoU3RyaW5nLmZyb21JbnQgKGNvbmZpZy5tYXhIZWlnaHQgLSAxNTUpICsrICJweCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIEh0bWxBdHRyLnN0eWxlICJvdmVyZmxvdy15IiAiYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIF0KICAgICAgICBdCgoKaWNvblNpemUgPQogICAgMTgKCgpjdXN0b21Ub29sYmFyIDoKICAgIEVkaXRvclZpZXdDb25maWcgbXNnCiAgICAtPiBNb2RlbAogICAgLT4gRWxlbWVudCBtc2cKY3VzdG9tVG9vbGJhciBjb25maWcgbW9kZWwgPQogICAgbGV0CiAgICAgICAgc2VsZWN0aW9uQ29sbGFwc2VkID0KICAgICAgICAgICAgY2FzZSBtb2RlbC5zZWxlY3Rpb24gb2YKICAgICAgICAgICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCgogICAgICAgICAgICAgICAgSnVzdCB7IHN0YXJ0LCBlbmQgfSAtPgogICAgICAgICAgICAgICAgICAgIEp1c3QgKHN0YXJ0ID09IGVuZCkKCiAgICAgICAgY2FuVXBkYXRlR2xvYmFsQXR0ciA9CiAgICAgICAgICAgIGNhc2UgbW9kZWwuc2VsZWN0aW9uIG9mCiAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgVHJ1ZQoKICAgICAgICAgICAgICAgIEp1c3QgeyBzdGFydCwgZW5kIH0gLT4KICAgICAgICAgICAgICAgICAgICBzdGFydCA9PSBlbmQKCiAgICAgICAgc2VsZWN0aW9uQXR0cnMgPQogICAgICAgICAgICBNYXliZS5tYXAgLmF0dHJzIG1vZGVsLnNlbGVjdGlvbgoKICAgICAgICBnbG9iYWxBdHRyaWJ1dGVzQ3NzRGljdCA9CiAgICAgICAgICAgIExpc3QuY29uY2F0TWFwIGdsb2JhbEF0dHJUb0NzcyBtb2RlbC5nbG9iYWxBdHRyaWJ1dGVzCiAgICAgICAgICAgICAgICB8PiBEaWN0LmZyb21MaXN0CgogICAgICAgIGZvbnRDb2xvciA9CiAgICAgICAgICAgIGNhc2UKICAgICAgICAgICAgICAgIE1heWJlLmFuZFRoZW4gKERpY3QuZ2V0ICJmb3JlZ3JvdW5kQ29sb3IiKSBzZWxlY3Rpb25BdHRycwogICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLm1hcCBwYXJzZUNvbG9yCiAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUubWFwIHBpY2tlZENvbG9yVG9TdHIKICAgICAgICAgICAgb2YKICAgICAgICAgICAgICAgIEp1c3QgYyAtPgogICAgICAgICAgICAgICAgICAgIEp1c3QgYwoKICAgICAgICAgICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgICAgICAgICBjYXNlCiAgICAgICAgICAgICAgICAgICAgICAgIERpY3QuZ2V0ICJjb2xvciIgZ2xvYmFsQXR0cmlidXRlc0Nzc0RpY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLm1hcCBwYXJzZUNvbG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBNYXliZS5tYXAgcGlja2VkQ29sb3JUb1N0cgogICAgICAgICAgICAgICAgICAgIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgYyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBjCgogICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdXN0ICJyZ2IoMCwwLDApIgoKICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPQogICAgICAgICAgICBjYXNlCiAgICAgICAgICAgICAgICBNYXliZS5hbmRUaGVuIChEaWN0LmdldCAiYmFja2dyb3VuZENvbG9yIikgc2VsZWN0aW9uQXR0cnMKICAgICAgICAgICAgICAgICAgICB8PiBNYXliZS5tYXAgcGFyc2VDb2xvcgogICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLm1hcCBwaWNrZWRDb2xvclRvU3RyCiAgICAgICAgICAgIG9mCiAgICAgICAgICAgICAgICBKdXN0IGMgLT4KICAgICAgICAgICAgICAgICAgICBKdXN0IGMKCiAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgY2FzZQogICAgICAgICAgICAgICAgICAgICAgICBEaWN0LmdldCAiYmFja2dyb3VuZC1jb2xvciIgZ2xvYmFsQXR0cmlidXRlc0Nzc0RpY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLm1hcCBwYXJzZUNvbG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBNYXliZS5tYXAgcGlja2VkQ29sb3JUb1N0cgogICAgICAgICAgICAgICAgICAgIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgYyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBjCgogICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdXN0ICJyZ2IoMjU1LDI1NSwyNTUpIgoKICAgICAgICB0ZXh0Rm9udCA9CiAgICAgICAgICAgIE1heWJlLmFuZFRoZW4gKERpY3QuZ2V0ICJ0ZXh0Rm9udCIpIHNlbGVjdGlvbkF0dHJzCiAgICAgICAgICAgICAgICB8PiBNYXliZS53aXRoRGVmYXVsdCAiQXJpYWwiCgogICAgICAgIGZvbnRTaXplID0KICAgICAgICAgICAgTWF5YmUuYW5kVGhlbiAoRGljdC5nZXQgImZvbnRTaXplIikgc2VsZWN0aW9uQXR0cnMKICAgICAgICAgICAgICAgIHw+IE1heWJlLm1hcCAoU3RyaW5nLnJlcGxhY2UgInB4IiAiIikKICAgICAgICAgICAgICAgIHw+IE1heWJlLmFuZFRoZW4gU3RyaW5nLnRvSW50CiAgICAgICAgICAgICAgICB8PiBNYXliZS53aXRoRGVmYXVsdCAxNgoKICAgICAgICBocmVmID0KICAgICAgICAgICAgTWF5YmUuYW5kVGhlbiAoRGljdC5nZXQgImhyZWYiKSBzZWxlY3Rpb25BdHRycwoKICAgICAgICBmb250T3B0aW9uVmlldyBzZWxlY3RlZEZvbnQgZiA9CiAgICAgICAgICAgIEh0bWwub3B0aW9uCiAgICAgICAgICAgICAgICBbIEh0bWxBdHRyLnZhbHVlIGYKICAgICAgICAgICAgICAgICwgSHRtbEF0dHIuc2VsZWN0ZWQgKHNlbGVjdGVkRm9udCA9PSBmKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgWyBIdG1sLnRleHQgZiBdCgogICAgICAgIGZvbnRTaXplT3B0aW9uVmlldyBzZWxlY3RlZFNpemUgZnMgPQogICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0KICAgICAgICAgICAgICAgICAgICBTdHJpbmcudG9JbnQgZnMKICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUubWFwIChcZnNfIC0+IHNlbGVjdGVkU2l6ZSA9PSBmc18pCiAgICAgICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0IEZhbHNlCiAgICAgICAgICAgIGluCiAgICAgICAgICAgIEh0bWwub3B0aW9uCiAgICAgICAgICAgICAgICBbIEh0bWxBdHRyLnZhbHVlIGZzCiAgICAgICAgICAgICAgICAsIEh0bWxBdHRyLnNlbGVjdGVkIHNlbGVjdGVkCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICBbIEh0bWwudGV4dCBmcyBdCiAgICBpbgogICAgcm93CiAgICAgICAgWyBzcGFjaW5nIDEwCiAgICAgICAgLCB3aWR0aCBmaWxsCiAgICAgICAgXQogICAgICAgIFsgLS0gbGlua1BpY2tlcldyYXBwZXIgY29uZmlnCiAgICAgICAgICAtLSAgICAiaW50ZXJuYWxMaW5rUGlja2VyIgogICAgICAgICAgLS0gICAgKHNlbGVjdGlvbkNvbGxhcHNlZCA9PSBKdXN0IEZhbHNlKQogICAgICAgICAgLS0gICAgKG1vZGVsLm9wZW5lZFdpZGdldCA9PSBKdXN0IEludGVybmFsTGlua3MpCiAgICAgICAgICAtLSAgICBocmVmCiAgICAgICAgICAtLSAgICBPcGVuSW50ZXJuYWxMaW5rcwogICAgICAgICAgLS0gICAgSW5zZXJ0SW50ZXJuYWxMaW5rCiAgICAgICAgICAtLSwgZG9jUGlja2VyIGNvbmZpZwogICAgICAgICAgLS0gICAgY29uZmlnLm91dE1zZwogICAgICAgICAgLS0gICAgImRvY1BpY2tlciIKICAgICAgICAgIC0tICAgIChzZWxlY3Rpb25Db2xsYXBzZWQgPT0gSnVzdCBGYWxzZSkKICAgICAgICAgIC0tICAgIC0tKE1heWJlLm1hcCAoU3RyaW5nLnN0YXJ0c1dpdGggImRvYzoiKSBocmVmCiAgICAgICAgICAtLSAgICAtLSAgICB8PiBNYXliZS53aXRoRGVmYXVsdCBGYWxzZQogICAgICAgICAgLS0gICAgLS0pCiAgICAgICAgICAtLSAgICAobW9kZWwub3BlbmVkV2lkZ2V0ID09IEp1c3QgRG9jUGlja2VyKQogICAgICAgICAgLS0gICAgaHJlZgogICAgICAgICAgLS0gICAgT3BlbkRvY1BpY2tlcgogICAgICAgICAgLS0gICAgSW5zZXJ0RG9jTGluawogICAgICAgICAgLS0sIEVsZW1lbnQubWFwIGNvbmZpZy5vdXRNc2cgPHwKICAgICAgICAgIC0tICAgIGNvbG9yUGlja2VyCiAgICAgICAgICAtLSAgICAgICAgImZvbnRDb2xvclBpY2tlciIKICAgICAgICAgIC0tICAgICAgICBUcnVlCiAgICAgICAgICAtLSAgICAgICAgKG1vZGVsLm9wZW5lZFdpZGdldCA9PSBKdXN0IEZvbnRDb2xvclBpY2tlcikKICAgICAgICAgIC0tICAgICAgICBmb250Q29sb3IKICAgICAgICAgIC0tICAgICAgICBPcGVuRm9udENvbG9yUGlja2VyCiAgICAgICAgICAtLSAgICAgICAgKFNldFRleHRDb2xvciAoc2VsZWN0aW9uQ29sbGFwc2VkID09IEp1c3QgVHJ1ZSB8fCBzZWxlY3Rpb25Db2xsYXBzZWQgPT0gTm90aGluZykpCiAgICAgICAgICAtLSAgICAgICAgKGVsIFtdIChodG1sIDx8IHBlblRvb2wgaWNvblNpemUpKQogICAgICAgICAgLS0sIEVsZW1lbnQubWFwIGNvbmZpZy5vdXRNc2cgPHwKICAgICAgICAgIC0tICAgIGNvbG9yUGlja2VyCiAgICAgICAgICAtLSAgICAgICAgImJhY2tncm91bmRDb2xvclBpY2tlciIKICAgICAgICAgIC0tICAgICAgICBUcnVlCiAgICAgICAgICAtLSAgICAgICAgKG1vZGVsLm9wZW5lZFdpZGdldCA9PSBKdXN0IEJhY2tncm91bmRDb2xvclBpY2tlcikKICAgICAgICAgIC0tICAgICAgICBiYWNrZ3JvdW5kQ29sb3IKICAgICAgICAgIC0tICAgICAgICBPcGVuQmFja2dyb3VuZENvbG9yUGlja2VyCiAgICAgICAgICAtLSAgICAgICAgKFNldEJhY2tncm91bmRDb2xvciAoc2VsZWN0aW9uQ29sbGFwc2VkID09IEp1c3QgVHJ1ZSB8fCBzZWxlY3Rpb25Db2xsYXBzZWQgPT0gTm90aGluZykpCiAgICAgICAgICAtLSAgICAgICAgKGVsIFtdIChodG1sIDx8IGRyb3BsZXQgaWNvblNpemUpKQogICAgICAgICAgLS0sCiAgICAgICAgICAtLSwKICAgICAgICAgIGNhc2UgY29uZmlnLmxpbmtQaWNrZXIgb2YKICAgICAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICAgICAgRWxlbWVudC5ub25lCgogICAgICAgICAgICBKdXN0IHsgd2lkZ2V0VmlldyB9IC0+CiAgICAgICAgICAgICAgICB3aWRnZXRWaWV3V3JhcHBlcgogICAgICAgICAgICAgICAgICAgIHsgaWQgPSAiaW50ZXJuYWxMaW5rUGlja2VyIgogICAgICAgICAgICAgICAgICAgICwgaXNBY3RpdmUgPSBzZWxlY3Rpb25Db2xsYXBzZWQgPT0gSnVzdCBGYWxzZQogICAgICAgICAgICAgICAgICAgICwgaXNPcGVuID0gbW9kZWwub3BlbmVkV2lkZ2V0ID09IEp1c3QgSW50ZXJuYWxMaW5rcwogICAgICAgICAgICAgICAgICAgICwgb3Blbk1zZyA9IGNvbmZpZy5vdXRNc2cgPHwgT3BlbldpZGdldCBJbnRlcm5hbExpbmtzCiAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9IGVsIFtdIChodG1sIDx8IGxpbmsyIGljb25TaXplKQogICAgICAgICAgICAgICAgICAgICwgd2lkZ2V0VmlldyA9IHdpZGdldFZpZXcKICAgICAgICAgICAgICAgICAgICAsIHdpZGdldENvbmZpZyA9IHsgaGFuZGxlciA9IGNvbmZpZy5vdXRNc2cgPDwgSW5zZXJ0SW50ZXJuYWxMaW5rIH0KCiAgICAgICAgICAgICAgICAgICAgLS0sIG91dE1zZyA6IE1zZyAtPiBtc2cKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgLCBjYXNlIGNvbmZpZy5jb2xvclBpY2tlciBvZgogICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICBFbGVtZW50Lm5vbmUKCiAgICAgICAgICAgIEp1c3QgeyB3aWRnZXRWaWV3IH0gLT4KICAgICAgICAgICAgICAgIHdpZGdldFZpZXdXcmFwcGVyCiAgICAgICAgICAgICAgICAgICAgeyBpZCA9ICJmb250Q29sb3JQaWNrZXIiCiAgICAgICAgICAgICAgICAgICAgLCBpc0FjdGl2ZSA9IFRydWUKICAgICAgICAgICAgICAgICAgICAsIGlzT3BlbiA9IG1vZGVsLm9wZW5lZFdpZGdldCA9PSBKdXN0IEZvbnRDb2xvclBpY2tlcgogICAgICAgICAgICAgICAgICAgICwgb3Blbk1zZyA9IGNvbmZpZy5vdXRNc2cgPHwgT3BlbldpZGdldCBGb250Q29sb3JQaWNrZXIKICAgICAgICAgICAgICAgICAgICAsIGxhYmVsID0gZWwgW10gKGh0bWwgPHwgcGVuVG9vbCBpY29uU2l6ZSkKICAgICAgICAgICAgICAgICAgICAsIHdpZGdldFZpZXcgPSB3aWRnZXRWaWV3CiAgICAgICAgICAgICAgICAgICAgLCB3aWRnZXRDb25maWcgPQogICAgICAgICAgICAgICAgICAgICAgICB7IGhhbmRsZXIgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLm91dE1zZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw8IFNldFRleHRDb2xvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2VsZWN0aW9uQ29sbGFwc2VkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PSBKdXN0IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHNlbGVjdGlvbkNvbGxhcHNlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT0gTm90aGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPDwgcGFyc2VSZ2IKICAgICAgICAgICAgICAgICAgICAgICAgLCBhdHRyaWJ1dGUgPSAiZm9udENvbG9yIgogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC0tLCBvdXRNc2cgOiBNc2cgLT4gbXNnCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICwgRWxlbWVudC5tYXAKICAgICAgICAgICAgY29uZmlnLm91dE1zZwogICAgICAgICAgPHwKICAgICAgICAgICAgZWwKICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAoaHRtbCA8fAogICAgICAgICAgICAgICAgICAgIEh0bWwuc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgIFsgSHRtbEV2ZW50cy5vbklucHV0IChTZXRGb250IChzZWxlY3Rpb25Db2xsYXBzZWQgPT0gSnVzdCBUcnVlIHx8IHNlbGVjdGlvbkNvbGxhcHNlZCA9PSBOb3RoaW5nKSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAoTGlzdC5tYXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmb250T3B0aW9uVmlldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRGb250CiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTGlzdC5zb3J0IGZvbnRzKQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgLCBFbGVtZW50Lm1hcCBjb25maWcub3V0TXNnIDx8CiAgICAgICAgICAgIGVsCiAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgKGh0bWwgPHwKICAgICAgICAgICAgICAgICAgICBIdG1sLnNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgICBbIEh0bWxFdmVudHMub25JbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKFxuIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nLnRvSW50IG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUud2l0aERlZmF1bHQgMTYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfD4gU2V0Rm9udFNpemUgKHNlbGVjdGlvbkNvbGxhcHNlZCA9PSBKdXN0IFRydWUgfHwgc2VsZWN0aW9uQ29sbGFwc2VkID09IE5vdGhpbmcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgICAgICAtLSwgSHRtbEF0dHIuZGlzYWJsZWQgKG5vdCA8fCBjYW5DdXN0b21TdHlsZVNlbGVjdGlvbiBtb2RlbCkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAoTGlzdC5tYXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmb250U2l6ZU9wdGlvblZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemVzCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICkKICAgICAgICAsIEVsZW1lbnQubWFwIGNvbmZpZy5vdXRNc2cgPHwKICAgICAgICAgICAgcm93CiAgICAgICAgICAgICAgICBbIHNwYWNpbmcgMTAgXQogICAgICAgICAgICAgICAgWyBJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgICAgICAodG9vZ2xlQnV0dG9uU3R5bGUgKExpc3QubWVtYmVyIEZvbnRBbGlnbkxlZnQgbW9kZWwuZ2xvYmFsQXR0cmlidXRlcykgY2FuVXBkYXRlR2xvYmFsQXR0cikKICAgICAgICAgICAgICAgICAgICB7IG9uUHJlc3MgPQogICAgICAgICAgICAgICAgICAgICAgICBpZiBjYW5VcGRhdGVHbG9iYWxBdHRyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgKFNldEFsaWduTWVudCBGb250QWxpZ25MZWZ0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1KdXN0IChTZXRHbG9iYWxBdHRyaWJ1dGUgVHJ1ZSAoICJ0ZXh0LWFsaWduIiwgImxlZnQiICkpCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsIFtdIChodG1sIDx8IGFsaWduTGVmdCBpY29uU2l6ZSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAsIElucHV0LmJ1dHRvbgogICAgICAgICAgICAgICAgICAgICh0b29nbGVCdXR0b25TdHlsZSAoTGlzdC5tZW1iZXIgQ2VudGVyIG1vZGVsLmdsb2JhbEF0dHJpYnV0ZXMpIGNhblVwZGF0ZUdsb2JhbEF0dHIpCiAgICAgICAgICAgICAgICAgICAgeyBvblByZXNzID0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2FuVXBkYXRlR2xvYmFsQXR0ciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdXN0IChTZXRBbGlnbk1lbnQgQ2VudGVyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1KdXN0IChTZXRHbG9iYWxBdHRyaWJ1dGUgVHJ1ZSAoICJ0ZXh0LWFsaWduIiwgImNlbnRlciIgKSkKCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGhpbmcKICAgICAgICAgICAgICAgICAgICAsIGxhYmVsID0KICAgICAgICAgICAgICAgICAgICAgICAgZWwgW10gKGh0bWwgPHwgYWxpZ25DZW50ZXIgaWNvblNpemUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgICAgICAodG9vZ2xlQnV0dG9uU3R5bGUKICAgICAgICAgICAgICAgICAgICAgICAgKExpc3QubWVtYmVyIEZvbnRBbGlnblJpZ2h0IG1vZGVsLmdsb2JhbEF0dHJpYnV0ZXMpCiAgICAgICAgICAgICAgICAgICAgICAgIGNhblVwZGF0ZUdsb2JhbEF0dHIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgeyBvblByZXNzID0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2FuVXBkYXRlR2xvYmFsQXR0ciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdXN0IChTZXRBbGlnbk1lbnQgRm9udEFsaWduUmlnaHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLUp1c3QgKFNldEdsb2JhbEF0dHJpYnV0ZSBUcnVlICggInRleHQtYWxpZ24iLCAicmlnaHQiICkpCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsIFtdIChodG1sIDx8IGFsaWduUmlnaHQgaWNvblNpemUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLCBJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgICAgICAodG9vZ2xlQnV0dG9uU3R5bGUKICAgICAgICAgICAgICAgICAgICAgICAgKExpc3QubWVtYmVyIEp1c3RpZnkgbW9kZWwuZ2xvYmFsQXR0cmlidXRlcykKICAgICAgICAgICAgICAgICAgICAgICAgY2FuVXBkYXRlR2xvYmFsQXR0cgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB7IG9uUHJlc3MgPQogICAgICAgICAgICAgICAgICAgICAgICBpZiBjYW5VcGRhdGVHbG9iYWxBdHRyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgKFNldEFsaWduTWVudCBKdXN0aWZ5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1KdXN0IChTZXRHbG9iYWxBdHRyaWJ1dGUgVHJ1ZSAoICJ0ZXh0LWFsaWduIiwgImp1c3RpZnkiICkpCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCiAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsIFtdIChodG1sIDx8IGFsaWduSnVzdGlmeSBpY29uU2l6ZSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgLCBFbGVtZW50Lm1hcCBjb25maWcub3V0TXNnIDx8CiAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgY2FuVW5kb1N0eWxlID0KICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25BdHRycyAvPSBKdXN0IERpY3QuZW1wdHkKICAgICAgICAgICAgaW4KICAgICAgICAgICAgSW5wdXQuYnV0dG9uCiAgICAgICAgICAgICAgICAoRWxlbWVudC5hbGlnblJpZ2h0IDo6IGJ1dHRvblN0eWxlIGNhblVuZG9TdHlsZSkKICAgICAgICAgICAgICAgIHsgb25QcmVzcyA9CiAgICAgICAgICAgICAgICAgICAgaWYgY2FuVW5kb1N0eWxlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgSnVzdCBVbmRvU3R5bGUKCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCiAgICAgICAgICAgICAgICAsIGxhYmVsID0KICAgICAgICAgICAgICAgICAgICBlbCBbXSAoaHRtbCA8fCB4U3F1YXJlIGljb25TaXplKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAtLWNvbmZpZy5wYWdlTGlzdAogICAgICAgIF0KCgp3aWRnZXRWaWV3V3JhcHBlciA6CiAgICB7IGlkIDogU3RyaW5nCiAgICAsIGlzQWN0aXZlIDogQm9vbAogICAgLCBpc09wZW4gOiBCb29sCiAgICAsIG9wZW5Nc2cgOiBtc2cKICAgICwgbGFiZWwgOiBFbGVtZW50IG1zZwogICAgLCB3aWRnZXRWaWV3IDogd2lkZ2V0Q29uZmlnIC0+IEVsZW1lbnQgbXNnCiAgICAsIHdpZGdldENvbmZpZyA6IHdpZGdldENvbmZpZwoKICAgIC0tLCBvdXRNc2cgOiBNc2cgLT4gbXNnCiAgICB9CiAgICAtPiBFbGVtZW50IG1zZwp3aWRnZXRWaWV3V3JhcHBlciB7IGlkLCBpc0FjdGl2ZSwgaXNPcGVuLCBvcGVuTXNnLCBsYWJlbCwgd2lkZ2V0Vmlldywgd2lkZ2V0Q29uZmlnIH0gPQogICAgZWwKICAgICAgICBbIGJlbG93IDx8CiAgICAgICAgICAgIGVsCiAgICAgICAgICAgICAgICBbIEJhY2tncm91bmQuY29sb3IgKHJnYiAwLjk1IDAuOTUgMC45NSkgXQogICAgICAgICAgICAgICAgKGlmIGlzT3BlbiB0aGVuCiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0VmlldyB3aWRnZXRDb25maWcKCiAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIEVsZW1lbnQubm9uZQogICAgICAgICAgICAgICAgKQogICAgICAgICwgaHRtbEF0dHJpYnV0ZSA8fCBIdG1sQXR0ci5pZCBpZAogICAgICAgIF0KICAgICAgICAoSW5wdXQuYnV0dG9uCiAgICAgICAgICAgIChidXR0b25TdHlsZSBpc0FjdGl2ZSkKICAgICAgICAgICAgeyBvblByZXNzID0KICAgICAgICAgICAgICAgIGlmIGlzQWN0aXZlIHRoZW4KICAgICAgICAgICAgICAgICAgICBKdXN0IG9wZW5Nc2cKCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgTm90aGluZwogICAgICAgICAgICAsIGxhYmVsID0gbGFiZWwKICAgICAgICAgICAgfQogICAgICAgICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gT3V0c2lkZSBjbGljayBkZWNvZGVyIC0tCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCm91dHNpZGVUYXJnZXRIYW5kbGVyIDogU3RyaW5nIC0+IG1zZyAtPiBELkRlY29kZXIgbXNnCm91dHNpZGVUYXJnZXRIYW5kbGVyIHRhcmdldElkIGhhbmRsZXIgPQogICAgRC5maWVsZCAidGFyZ2V0IiAoaXNPdXRzaWRlVGFyZ2V0IHRhcmdldElkKQogICAgICAgIHw+IEQuYW5kVGhlbgogICAgICAgICAgICAoXGlzT3V0c2lkZSAtPgogICAgICAgICAgICAgICAgaWYgaXNPdXRzaWRlIHRoZW4KICAgICAgICAgICAgICAgICAgICBELnN1Y2NlZWQgaGFuZGxlcgoKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBELmZhaWwgImluc2lkZSB0YXJnZXQiCiAgICAgICAgICAgICkKCgppc091dHNpZGVUYXJnZXQgdGFyZ2V0SWQgPQogICAgRC5vbmVPZgogICAgICAgIFsgRC5maWVsZCAiaWQiIEQuc3RyaW5nCiAgICAgICAgICAgIHw+IEQuYW5kVGhlbgogICAgICAgICAgICAgICAgKFxpZCAtPgogICAgICAgICAgICAgICAgICAgIGlmIHRhcmdldElkID09IGlkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS0gZm91bmQgbWF0Y2ggYnkgaWQKICAgICAgICAgICAgICAgICAgICAgICAgRC5zdWNjZWVkIEZhbHNlCgogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgLS0gdHJ5IG5leHQgZGVjb2RlcgogICAgICAgICAgICAgICAgICAgICAgICBELmZhaWwgImNvbnRpbnVlIgogICAgICAgICAgICAgICAgKQogICAgICAgICwgRC5sYXp5IChcXyAtPiBELmZpZWxkICJwYXJlbnROb2RlIiAoaXNPdXRzaWRlVGFyZ2V0IHRhcmdldElkKSkKCiAgICAgICAgLS0gZmFsbGJhY2sgaWYgYWxsIHByZXZpb3VzIGRlY29kZXJzIGZhaWxlZAogICAgICAgICwgRC5zdWNjZWVkIFRydWUKICAgICAgICBdCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgpkZWNvZGVTZWxlY3Rpb24gPQogICAgbGV0CiAgICAgICAgZGVjb2RlQXR0clZhbHVlID0KICAgICAgICAgICAgRC5vbmVPZgogICAgICAgICAgICAgICAgWyBELnN0cmluZwogICAgICAgICAgICAgICAgLCBELmludAogICAgICAgICAgICAgICAgICAgIHw+IEQubWFwIFN0cmluZy5mcm9tSW50CiAgICAgICAgICAgICAgICAsIEQuYm9vbAogICAgICAgICAgICAgICAgICAgIHw+IEQuYW5kVGhlbgogICAgICAgICAgICAgICAgICAgICAgICAoXGIgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEQuc3VjY2VlZCAidHJ1ZSIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRC5zdWNjZWVkICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLCBELnN1Y2NlZWQgInVua25vd24iCiAgICAgICAgICAgICAgICBdCiAgICBpbgogICAgRC5tYXA1IChcc3RhcnQgZW5kIGF0dHJzIGlkcyB0ZXh0IC0+ICggU2VsZWN0aW9uIHN0YXJ0IGVuZCBhdHRycyB0ZXh0LCBpZHMgKSkKICAgICAgICAoRC5maWVsZCAic3RhcnQiIEQuaW50KQogICAgICAgIChELmZpZWxkICJlbmQiIEQuaW50KQogICAgICAgIChELmZpZWxkICJhdHRycyIgKEQubWFwIERpY3QuZnJvbUxpc3QgKEQua2V5VmFsdWVQYWlycyBkZWNvZGVBdHRyVmFsdWUpKSkKICAgICAgICAoRC5maWVsZCAiYXR0YWNobWVudHNJZHMiIChELmxpc3QgRC5pbnQpKQogICAgICAgIChELmZpZWxkICJ0ZXh0IiBELnN0cmluZykKCgpkZWNvZGVFZGl0b3JNYXJrdXAgOiBELkRlY29kZXIgSHRtbENvbnRlbnQKZGVjb2RlRWRpdG9yTWFya3VwID0KICAgIEQubWFwMiBIdG1sQ29udGVudAogICAgICAgIChELmF0IFsgInRhcmdldCIsICJ2YWx1ZSIgXSBELnN0cmluZykKICAgICAgICAoRC5hdCBbICJ0YXJnZXQiLCAidGV4dENvbnRlbnQiIF0gRC5zdHJpbmcpCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgpwYXJzZVJnYiBzID0KICAgIGxldAogICAgICAgIGV4dHJhY3RDb2xWYWx1ZSB2ID0KICAgICAgICAgICAgU3RyaW5nLnRvSW50IHYKICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0IDAKCiAgICAgICAgZXh0cmFjdEFscGhhVmFsdWUgdiA9CiAgICAgICAgICAgIFN0cmluZy50b0Zsb2F0IHYKICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0IDEKCiAgICAgICAgcHJlZml4TGVuZ3RoID0KICAgICAgICAgICAgaWYgU3RyaW5nLnN0YXJ0c1dpdGggInJnYmEiIHMgdGhlbgogICAgICAgICAgICAgICAgNQoKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgNAogICAgaW4KICAgIGNhc2UKICAgICAgICBTdHJpbmcuZHJvcExlZnQgcHJlZml4TGVuZ3RoIHMKICAgICAgICAgICAgfD4gU3RyaW5nLmRyb3BSaWdodCAxCiAgICAgICAgICAgIHw+IFN0cmluZy5yZXBsYWNlICIgIiAiIgogICAgICAgICAgICB8PiBTdHJpbmcuc3BsaXQgIiwiCiAgICBvZgogICAgICAgIHIgOjogZyA6OiBiIDo6IGEgOjogW10gLT4KICAgICAgICAgICAgeyByID0gZXh0cmFjdENvbFZhbHVlIHIKICAgICAgICAgICAgLCBnID0gZXh0cmFjdENvbFZhbHVlIGcKICAgICAgICAgICAgLCBiID0gZXh0cmFjdENvbFZhbHVlIGIKICAgICAgICAgICAgLCBhID0gZXh0cmFjdEFscGhhVmFsdWUgYQogICAgICAgICAgICB9CgogICAgICAgIHIgOjogZyA6OiBiIDo6IFtdIC0+CiAgICAgICAgICAgIHsgciA9IGV4dHJhY3RDb2xWYWx1ZSByCiAgICAgICAgICAgICwgZyA9IGV4dHJhY3RDb2xWYWx1ZSBnCiAgICAgICAgICAgICwgYiA9IGV4dHJhY3RDb2xWYWx1ZSBiCiAgICAgICAgICAgICwgYSA9IDEKICAgICAgICAgICAgfQoKICAgICAgICBfIC0+CiAgICAgICAgICAgIHsgciA9IDAKICAgICAgICAgICAgLCBnID0gMAogICAgICAgICAgICAsIGIgPSAwCiAgICAgICAgICAgICwgYSA9IDEKICAgICAgICAgICAgfQoKCnJnYlRvSGV4IHMgPQogICAgY2FzZQogICAgICAgIFN0cmluZy5kcm9wTGVmdCA0IHMKICAgICAgICAgICAgfD4gU3RyaW5nLmRyb3BSaWdodCAxCiAgICAgICAgICAgIHw+IFN0cmluZy5yZXBsYWNlICIgIiAiIgogICAgICAgICAgICB8PiBTdHJpbmcuc3BsaXQgIiwiCiAgICAgICAgICAgIHw+IExpc3QuZmlsdGVyTWFwIFN0cmluZy50b0ludAogICAgb2YKICAgICAgICByIDo6IGcgOjogYiA6OiBhIDo6IFtdIC0+CiAgICAgICAgICAgICgoU3RyaW5nLnBhZExlZnQgMiAnMCcgPHwgSGV4LnRvU3RyaW5nIHIpCiAgICAgICAgICAgICAgICArKyAoU3RyaW5nLnBhZExlZnQgMiAnMCcgPHwgSGV4LnRvU3RyaW5nIGcpCiAgICAgICAgICAgICAgICArKyAoU3RyaW5nLnBhZExlZnQgMiAnMCcgPHwgSGV4LnRvU3RyaW5nIGIpCiAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHw+IFN0cmluZy50b1VwcGVyCgogICAgICAgIHIgOjogZyA6OiBiIDo6IFtdIC0+CiAgICAgICAgICAgICgoU3RyaW5nLnBhZExlZnQgMiAnMCcgPHwgSGV4LnRvU3RyaW5nIHIpCiAgICAgICAgICAgICAgICArKyAoU3RyaW5nLnBhZExlZnQgMiAnMCcgPHwgSGV4LnRvU3RyaW5nIGcpCiAgICAgICAgICAgICAgICArKyAoU3RyaW5nLnBhZExlZnQgMiAnMCcgPHwgSGV4LnRvU3RyaW5nIGIpCiAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHw+IFN0cmluZy50b1VwcGVyCgogICAgICAgIF8gLT4KICAgICAgICAgICAgIjAwMDAwMCIKCgpoZXhUb1JnYiBoZXhDb2xvciA9CiAgICBsZXQKICAgICAgICBoZXhDb2xvcl8gPQogICAgICAgICAgICBTdHJpbmcudG9Mb3dlciBoZXhDb2xvcgoKICAgICAgICByZWQgPQogICAgICAgICAgICBTdHJpbmcubGVmdCAyIGhleENvbG9yXwogICAgICAgICAgICAgICAgfD4gSGV4LmZyb21TdHJpbmcKICAgICAgICAgICAgICAgIHw+IFJlc3VsdC53aXRoRGVmYXVsdCAwCgogICAgICAgIGdyZWVuID0KICAgICAgICAgICAgU3RyaW5nLmRyb3BMZWZ0IDIgaGV4Q29sb3JfCiAgICAgICAgICAgICAgICB8PiBTdHJpbmcubGVmdCAyCiAgICAgICAgICAgICAgICB8PiBIZXguZnJvbVN0cmluZwogICAgICAgICAgICAgICAgfD4gUmVzdWx0LndpdGhEZWZhdWx0IDAKCiAgICAgICAgYmx1ZSA9CiAgICAgICAgICAgIFN0cmluZy5kcm9wTGVmdCA0IGhleENvbG9yXwogICAgICAgICAgICAgICAgfD4gU3RyaW5nLmxlZnQgMgogICAgICAgICAgICAgICAgfD4gSGV4LmZyb21TdHJpbmcKICAgICAgICAgICAgICAgIHw+IFJlc3VsdC53aXRoRGVmYXVsdCAwCiAgICBpbgogICAgeyByID0gcmVkCiAgICAsIGcgPSBncmVlbgogICAgLCBiID0gYmx1ZQogICAgLCBhID0gMQogICAgfQoKCnBhcnNlQ29sb3IgcyA9CiAgICBpZiBTdHJpbmcuc3RhcnRzV2l0aCAiIyIgcyB0aGVuCiAgICAgICAgU3RyaW5nLmRyb3BMZWZ0IDEgcwogICAgICAgICAgICB8PiBoZXhUb1JnYgoKICAgIGVsc2UKICAgICAgICBwYXJzZVJnYiBzCgoKCnstIHBhcnNlQ29sb3IgcyA9CiAgIGlmIFN0cmluZy5zdGFydHNXaXRoCi19CgoKZ2xvYmFsQXR0clRvQ3NzIDogR2xvYmFsQXR0cmlidXRlIC0+IExpc3QgKCBTdHJpbmcsIFN0cmluZyApCmdsb2JhbEF0dHJUb0NzcyBhdHRyID0KICAgIGNhc2UgYXR0ciBvZgogICAgICAgIEFsaWduUmlnaHQgLT4KICAgICAgICAgICAgWyAoICJmbG9hdCIsICJyaWdodCIgKSBdCgogICAgICAgIEFsaWduTGVmdCAtPgogICAgICAgICAgICBbICggImZsb2F0IiwgImxlZnQiICkgXQoKICAgICAgICBCYWNrZ3JvdW5kQ29sb3IgY29sb3IgLT4KICAgICAgICAgICAgWyAoICJiYWNrZ3JvdW5kLWNvbG9yIiwgcGlja2VkQ29sb3JUb1N0ciBjb2xvciApCiAgICAgICAgICAgIF0KCiAgICAgICAgQm9yZGVyIC0+CiAgICAgICAgICAgIFsgKCAiYm9yZGVyLXN0eWxlIiwgInNvbGlkIiApCiAgICAgICAgICAgICwgKCAiYm9yZGVyLXdpZHRoIiwgIjFweCIgKQogICAgICAgICAgICAsICggImJvcmRlci1jb2xvciIsICJyZ2IoMTI3LDEyNywxMjcpIiApCiAgICAgICAgICAgIF0KCiAgICAgICAgRm9udCBmb250IC0+CiAgICAgICAgICAgIFsgKCAiZm9udC1mYW1pbHkiLCBmb250ICkgXQoKICAgICAgICBGb250Q29sb3IgeyByLCBnLCBiLCBhIH0gLT4KICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAoIHJfLCBnXywgYl8gKSA9CiAgICAgICAgICAgICAgICAgICAgKCBTdHJpbmcuZnJvbUludCByCiAgICAgICAgICAgICAgICAgICAgLCBTdHJpbmcuZnJvbUludCBnCiAgICAgICAgICAgICAgICAgICAgLCBTdHJpbmcuZnJvbUludCBiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICBpbgogICAgICAgICAgICBbICggImNvbG9yIiwgInJnYigiICsrIHJfICsrICIsIiArKyBnXyArKyAiLCIgKysgYl8gKysgIikiICkgXQoKICAgICAgICBGb250U2l6ZSBuIC0+CiAgICAgICAgICAgIFsgKCAiZm9udC1zaXplIiwgU3RyaW5nLmZyb21JbnQgbiArKyAicHgiICkgXQoKICAgICAgICBGb250QWxpZ25MZWZ0IC0+CiAgICAgICAgICAgIFsgKCAidGV4dC1hbGlnbiIsICJsZWZ0IiApIF0KCiAgICAgICAgRm9udEFsaWduUmlnaHQgLT4KICAgICAgICAgICAgWyAoICJ0ZXh0LWFsaWduIiwgInJpZ2h0IiApIF0KCiAgICAgICAgQ2VudGVyIC0+CiAgICAgICAgICAgIFsgKCAidGV4dC1hbGlnbiIsICJjZW50ZXIiICkgXQoKICAgICAgICBKdXN0aWZ5IC0+CiAgICAgICAgICAgIFsgKCAidGV4dC1hbGlnbiIsICJqdXN0aWZ5IiApIF0KCiAgICAgICAgQm9sZCAtPgogICAgICAgICAgICBbICggImZvbnQtd2VpZ2h0IiwgImJvbGQiICkgXQoKICAgICAgICBJdGFsaWMgLT4KICAgICAgICAgICAgWyAoICJmb250LXN0eWxlIiwgIml0YWxpYyIgKSBdCgogICAgICAgIE90aGVyIGF0dHJzIC0+CiAgICAgICAgICAgIFsgYXR0cnMgXQoKCnBpY2tlZENvbG9yVG9TdHIgeyByLCBnLCBiLCBhIH0gPQogICAgInJnYmEoIgogICAgICAgICsrIFN0cmluZy5mcm9tSW50IHIKICAgICAgICArKyAiLCIKICAgICAgICArKyBTdHJpbmcuZnJvbUludCBnCiAgICAgICAgKysgIiwiCiAgICAgICAgKysgU3RyaW5nLmZyb21JbnQgYgogICAgICAgICsrICIsIgogICAgICAgICsrIFN0cmluZy5mcm9tRmxvYXQgYQogICAgICAgICsrICIpIgoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKZm9udHMgPQogICAgWyAiQXJpYWwiCiAgICAsICJIZWx2ZXRpY2EiCiAgICAsICJUaW1lcyBOZXcgUm9tYW4iCiAgICAsICJUaW1lcyIKICAgICwgIkNvdXJpZXIgTmV3IgogICAgLCAiQ291cmllciIKICAgICwgIlZlcmRhbmEiCiAgICAsICJHZW9yZ2lhIgogICAgLCAiUGFsYXRpbm8iCiAgICAsICJHYXJhbW9uZCIKICAgICwgIkJvb2ttYW4iCiAgICAsICJDb21pYyBTYW5zIE1TIgogICAgLCAiVHJlYnVjaGV0IE1TIgogICAgLCAiQXJpYWwgQmxhY2siCiAgICAsICJJbXBhY3QiCiAgICAsICJMaWJyZSBCYXNrZXJ2aWxsZSIKICAgIF0KCgpmb250U2l6ZXMgPQogICAgWyAiNiIKICAgICwgIjciCiAgICAsICI4IgogICAgLCAiOSIKICAgICwgIjEwIgogICAgLCAiMTEiCiAgICAsICIxMiIKICAgICwgIjEzIgogICAgLCAiMTQiCiAgICAsICIxNSIKICAgICwgIjE2IgogICAgLCAiMTgiCiAgICAsICIyMCIKICAgICwgIjIyIgogICAgLCAiMjQiCiAgICAsICIyNiIKICAgICwgIjI4IgogICAgLCAiMzIiCiAgICAsICIzNiIKICAgICwgIjQwIgogICAgLCAiNDQiCiAgICAsICI0OCIKICAgICwgIjU0IgogICAgLCAiNjAiCiAgICAsICI2NiIKICAgICwgIjcyIgogICAgLCAiODAiCiAgICAsICI4OCIKICAgICwgIjk2IgogICAgXQoKCmNodW5rcyA6IEludCAtPiBMaXN0IGEgLT4gTGlzdCAoTGlzdCBhKQpjaHVua3MgbiB4cyA9CiAgICBsZXQKICAgICAgICBoZWxwZXIgYWNjIHlzID0KICAgICAgICAgICAgY2FzZSB5cyBvZgogICAgICAgICAgICAgICAgW10gLT4KICAgICAgICAgICAgICAgICAgICBMaXN0LnJldmVyc2UgYWNjCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgIGhlbHBlciAoTGlzdC50YWtlIG4geXMgOjogYWNjKSAoTGlzdC5kcm9wIG4geXMpCiAgICBpbgogICAgaGVscGVyIFtdIHhzCgoKYnV0dG9uU3R5bGUgaXNBY3RpdmUgPQogICAgWyBCb3JkZXIucm91bmRlZCA1CiAgICAsIEZvbnQuY2VudGVyCiAgICAsIGNlbnRlclkKICAgICwgcGFkZGluZyA1CiAgICAsIGZvY3VzZWQgWyBCb3JkZXIuZ2xvdyAocmdiIDEgMSAxKSAwIF0KICAgIF0KICAgICAgICArKyAoaWYgaXNBY3RpdmUgdGhlbgogICAgICAgICAgICAgICAgWyBCYWNrZ3JvdW5kLmNvbG9yIChyZ2IgMC45IDAuOSAwLjkpCiAgICAgICAgICAgICAgICAsIG1vdXNlT3ZlciBbIEZvbnQuY29sb3IgKHJnYiAyNTUgMjU1IDI1NSkgXQogICAgICAgICAgICAgICAgLCBCb3JkZXIud2lkdGggMQogICAgICAgICAgICAgICAgLCBCb3JkZXIuY29sb3IgKHJnYiAwLjkgMC45IDAuOSkKICAgICAgICAgICAgICAgIF0KCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIFsgQmFja2dyb3VuZC5jb2xvciAocmdiIDAuOTUgMC45NSAwLjk1KQogICAgICAgICAgICAgICAgLCBGb250LmNvbG9yIChyZ2IgMC43IDAuNyAwLjcpCiAgICAgICAgICAgICAgICAsIGh0bWxBdHRyaWJ1dGUgPHwgSHRtbEF0dHIuc3R5bGUgImN1cnNvciIgImRlZmF1bHQiCiAgICAgICAgICAgICAgICAsIEJvcmRlci53aWR0aCAxCiAgICAgICAgICAgICAgICAsIEJvcmRlci5jb2xvciAocmdiIDAuOTUgMC45NSAwLjk1KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICkKCgp0b29nbGVCdXR0b25TdHlsZSBpc1ByZXNzZWQgaXNBY3RpdmUgPQogICAgWyBCb3JkZXIucm91bmRlZCA1CiAgICAsIEZvbnQuY2VudGVyCiAgICAsIGNlbnRlclkKICAgICwgcGFkZGluZyA1CiAgICAsIGZvY3VzZWQgWyBCb3JkZXIuZ2xvdyAocmdiIDEgMSAxKSAwIF0KICAgIF0KICAgICAgICArKyAoaWYgaXNBY3RpdmUgdGhlbgogICAgICAgICAgICAgICAgWyBtb3VzZU92ZXIKICAgICAgICAgICAgICAgICAgICBbIEZvbnQuY29sb3IgKHJnYiAwLjMgMC4zIDAuMykKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKysgKGlmIGlzUHJlc3NlZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIEJhY2tncm91bmQuY29sb3IgKHJnYiAwLjkgMC45IDAuOSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgQm9yZGVyLndpZHRoIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgQm9yZGVyLmNvbG9yIChyZ2IgMC45IDAuOSAwLjkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIEJvcmRlci5zaGFkb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG9mZnNldCA9ICggMSwgMSApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBzaXplID0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgYmx1ciA9IDAuNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY29sb3IgPSByZ2IgMC41IDAuNSAwLjUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGZvY3VzZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIEJvcmRlci5zaGFkb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBvZmZzZXQgPSAoIDEsIDEgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHNpemUgPSAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgYmx1ciA9IDAuNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGNvbG9yID0gcmdiIDAuNSAwLjUgMC41CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIEJhY2tncm91bmQuY29sb3IgKHJnYiAwLjkgMC45IDAuOSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgQm9yZGVyLndpZHRoIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgQm9yZGVyLmNvbG9yIChyZ2IgMC45IDAuOSAwLjkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgWyBCYWNrZ3JvdW5kLmNvbG9yIChyZ2IgMC45NSAwLjk1IDAuOTUpCiAgICAgICAgICAgICAgICAsIEZvbnQuY29sb3IgKHJnYiAwLjcgMC43IDAuNykKICAgICAgICAgICAgICAgICwgaHRtbEF0dHJpYnV0ZSA8fCBIdG1sQXR0ci5zdHlsZSAiY3Vyc29yIiAiZGVmYXVsdCIKICAgICAgICAgICAgICAgICwgQm9yZGVyLndpZHRoIDEKICAgICAgICAgICAgICAgICwgQm9yZGVyLmNvbG9yIChyZ2IgMC45NSAwLjk1IDAuOTUpCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgKQoKCnRleHRJbnB1dFN0eWxlID0KICAgIFsgd2lkdGggKHB4IDI1MCkKICAgICwgcGFkZGluZ1hZIDUgNQogICAgLCBzcGFjaW5nIDE1CiAgICAsIGZvY3VzZWQgWyBCb3JkZXIuZ2xvdyAocmdiIDEgMSAxKSAwIF0KICAgIF0KCgpub0F0dHIgPQogICAgaHRtbEF0dHJpYnV0ZSA8fCBIdG1sQXR0ci5jbGFzcyAiIgoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gSWNvbnMKCgpjdXN0b21TdmdGZWF0aGVySWNvbiA6IEludCAtPiBTdHJpbmcgLT4gTGlzdCAoU3ZnIG1zZykgLT4gSHRtbC5IdG1sIG1zZwpjdXN0b21TdmdGZWF0aGVySWNvbiBzaXplIGNsYXNzTmFtZSA9CiAgICBzdmcKICAgICAgICBbIFN2Zy5BdHRyaWJ1dGVzLmNsYXNzIDx8ICJmZWF0aGVyIGZlYXRoZXItIiArKyBjbGFzc05hbWUKICAgICAgICAsIFN2Zy5BdHRyaWJ1dGVzLmZpbGwgIm5vbmUiCiAgICAgICAgLCBTdmcuQXR0cmlidXRlcy5oZWlnaHQgKFN0cmluZy5mcm9tSW50IHNpemUpCiAgICAgICAgLCBTdmcuQXR0cmlidXRlcy5zdHJva2UgImN1cnJlbnRDb2xvciIKICAgICAgICAsIFN2Zy5BdHRyaWJ1dGVzLnN0cm9rZUxpbmVjYXAgInJvdW5kIgogICAgICAgICwgU3ZnLkF0dHJpYnV0ZXMuc3Ryb2tlTGluZWpvaW4gInJvdW5kIgogICAgICAgICwgU3ZnLkF0dHJpYnV0ZXMuc3Ryb2tlV2lkdGggIjIiCiAgICAgICAgLCBTdmcuQXR0cmlidXRlcy52aWV3Qm94ICIwIDAgMjQgMjQiCiAgICAgICAgLCBTdmcuQXR0cmlidXRlcy53aWR0aCAoU3RyaW5nLmZyb21JbnQgc2l6ZSkKICAgICAgICBdCgoKeFNxdWFyZSA6IEludCAtPiBIdG1sLkh0bWwgbXNnCnhTcXVhcmUgc2l6ZSA9CiAgICBjdXN0b21TdmdGZWF0aGVySWNvbiBzaXplCiAgICAgICAgIngtc3F1YXJlIgogICAgICAgIFsgU3ZnLnJlY3QKICAgICAgICAgICAgWyBTdmcuQXR0cmlidXRlcy54ICIzIgogICAgICAgICAgICAsIHkgIjMiCiAgICAgICAgICAgICwgU3ZnLkF0dHJpYnV0ZXMud2lkdGggIjE4IgogICAgICAgICAgICAsIFN2Zy5BdHRyaWJ1dGVzLmhlaWdodCAiMTgiCiAgICAgICAgICAgICwgcnggIjIiCiAgICAgICAgICAgICwgcnkgIjIiCiAgICAgICAgICAgIF0KICAgICAgICAgICAgW10KICAgICAgICAsIFN2Zy5saW5lIFsgeDEgIjkiLCB5MSAiOSIsIHgyICIxNSIsIHkyICIxNSIgXSBbXQogICAgICAgICwgU3ZnLmxpbmUgWyB4MSAiMTUiLCB5MSAiOSIsIHgyICI5IiwgeTIgIjE1IiBdIFtdCiAgICAgICAgXQoKCmFsaWduSnVzdGlmeSA6IEludCAtPiBIdG1sLkh0bWwgbXNnCmFsaWduSnVzdGlmeSBzaXplID0KICAgIGN1c3RvbVN2Z0ZlYXRoZXJJY29uIHNpemUKICAgICAgICAiYWxpZ24tanVzdGlmeSIKICAgICAgICBbIFN2Zy5saW5lIFsgeDEgIjIxIiwgeTEgIjEwIiwgeDIgIjMiLCB5MiAiMTAiIF0gW10KICAgICAgICAsIFN2Zy5saW5lIFsgeDEgIjIxIiwgeTEgIjYiLCB4MiAiMyIsIHkyICI2IiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICIyMSIsIHkxICIxNCIsIHgyICIzIiwgeTIgIjE0IiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICIyMSIsIHkxICIxOCIsIHgyICIzIiwgeTIgIjE4IiBdIFtdCiAgICAgICAgXQoKCmFsaWduTGVmdCA6IEludCAtPiBIdG1sLkh0bWwgbXNnCmFsaWduTGVmdCBzaXplID0KICAgIGN1c3RvbVN2Z0ZlYXRoZXJJY29uIHNpemUKICAgICAgICAiYWxpZ24tbGVmdCIKICAgICAgICBbIFN2Zy5saW5lIFsgeDEgIjE3IiwgeTEgIjEwIiwgeDIgIjMiLCB5MiAiMTAiIF0gW10KICAgICAgICAsIFN2Zy5saW5lIFsgeDEgIjIxIiwgeTEgIjYiLCB4MiAiMyIsIHkyICI2IiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICIyMSIsIHkxICIxNCIsIHgyICIzIiwgeTIgIjE0IiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICIxNyIsIHkxICIxOCIsIHgyICIzIiwgeTIgIjE4IiBdIFtdCiAgICAgICAgXQoKCmFsaWduQ2VudGVyIDogSW50IC0+IEh0bWwuSHRtbCBtc2cKYWxpZ25DZW50ZXIgc2l6ZSA9CiAgICBjdXN0b21TdmdGZWF0aGVySWNvbiBzaXplCiAgICAgICAgImFsaWduLWNlbnRlciIKICAgICAgICBbIFN2Zy5saW5lCiAgICAgICAgICAgIFsgeDEgIjE4IgogICAgICAgICAgICAsIHkxICIxMCIKICAgICAgICAgICAgLCB4MiAiNiIKICAgICAgICAgICAgLCB5MiAiMTAiCiAgICAgICAgICAgIF0KICAgICAgICAgICAgW10KICAgICAgICAsIFN2Zy5saW5lIFsgeDEgIjIxIiwgeTEgIjYiLCB4MiAiMyIsIHkyICI2IiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICIyMSIsIHkxICIxNCIsIHgyICIzIiwgeTIgIjE0IiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICIxOCIsIHkxICIxOCIsIHgyICI2IiwgeTIgIjE4IiBdIFtdCiAgICAgICAgXQoKCmFsaWduUmlnaHQgOiBJbnQgLT4gSHRtbC5IdG1sIG1zZwphbGlnblJpZ2h0IHNpemUgPQogICAgY3VzdG9tU3ZnRmVhdGhlckljb24gc2l6ZQogICAgICAgICJhbGlnbi1yaWdodCIKICAgICAgICBbIFN2Zy5saW5lCiAgICAgICAgICAgIFsgeDEgIjIxIgogICAgICAgICAgICAsIHkxICIxMCIKICAgICAgICAgICAgLCB4MiAiNyIKICAgICAgICAgICAgLCB5MiAiMTAiCiAgICAgICAgICAgIF0KICAgICAgICAgICAgW10KICAgICAgICAsIFN2Zy5saW5lIFsgeDEgIjIxIiwgeTEgIjYiLCB4MiAiMyIsIHkyICI2IiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICIyMSIsIHkxICIxNCIsIHgyICIzIiwgeTIgIjE0IiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICIyMSIsIHkxICIxOCIsIHgyICI3IiwgeTIgIjE4IiBdIFtdCiAgICAgICAgXQoKCmRyb3BsZXQgOiBJbnQgLT4gSHRtbC5IdG1sIG1zZwpkcm9wbGV0IHNpemUgPQogICAgY3VzdG9tU3ZnRmVhdGhlckljb24gc2l6ZQogICAgICAgICJkcm9wbGV0IgogICAgICAgIFsgU3ZnLnBhdGggWyBkICJNMTIgMi42OWw1LjY2IDUuNjZhOCA4IDAgMSAxLTExLjMxIDB6IiBdIFtdCiAgICAgICAgXQoKCnBlblRvb2wgOiBJbnQgLT4gSHRtbC5IdG1sIG1zZwpwZW5Ub29sIHNpemUgPQogICAgY3VzdG9tU3ZnRmVhdGhlckljb24gc2l6ZQogICAgICAgICJwZW4tdG9vbCIKICAgICAgICBbIFN2Zy5wYXRoIFsgZCAiTTEyIDE5bDctNyAzIDMtNyA3LTMtM3oiIF0gW10KICAgICAgICAsIFN2Zy5wYXRoIFsgZCAiTTE4IDEzbC0xLjUtNy41TDIgMmwzLjUgMTQuNUwxMyAxOGw1LTV6IiBdIFtdCiAgICAgICAgLCBTdmcucGF0aCBbIGQgIk0yIDJsNy41ODYgNy41ODYiIF0gW10KICAgICAgICAsIFN2Zy5jaXJjbGUgWyBjeCAiMTEiLCBjeSAiMTEiLCByICIyIiBdIFtdCiAgICAgICAgXQoKCmxpbmsyIDogSW50IC0+IEh0bWwuSHRtbCBtc2cKbGluazIgc2l6ZSA9CiAgICBjdXN0b21TdmdGZWF0aGVySWNvbiBzaXplCiAgICAgICAgImxpbmstMiIKICAgICAgICBbIFN2Zy5wYXRoIFsgZCAiTTE1IDdoM2E1IDUgMCAwIDEgNSA1IDUgNSAwIDAgMS01IDVoLTNtLTYgMEg2YTUgNSAwIDAgMS01LTUgNSA1IDAgMCAxIDUtNWgzIiBdIFtdCiAgICAgICAgLCBTdmcubGluZSBbIHgxICI4IiwgeTEgIjEyIiwgeDIgIjE2IiwgeTIgIjEyIiBdIFtdCiAgICAgICAgXQoK",
					"AQAAAAAAAAABAAAAyK4AAAAAAADIrgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					5,
					"left_delete",
					null,
					"BQAAAA8AAAAAAAAADwAAAAAAAAABAAAAbg4AAAAAAAAADgAAAAAAAAABAAAAaQ0AAAAAAAAADQAAAAAAAAABAAAAYQwAAAAAAAAADAAAAAAAAAABAAAATQsAAAAAAAAACwAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " Editro"
					},
					"BwAAAAsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					2,
					"left_delete",
					null,
					"AgAAABEAAAAAAAAAEQAAAAAAAAABAAAAbxAAAAAAAAAAEAAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "or.Tru"
					},
					"BgAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAABUAAAAAAAAAFQAAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAFgAAAAAAAAAWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "ix"
					},
					"AgAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					2,
					"left_delete",
					null,
					"AgAAACMAAAAAAAAAIwAAAAAAAAABAAAALiIAAAAAAAAAIgAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "Model"
					},
					"BQAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACcAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " MSg"
					},
					"BAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAACsAAAAAAAAAKwAAAAAAAAABAAAAZyoAAAAAAAAAKgAAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "sg,"
					},
					"AwAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " up"
					},
					"AwAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert_completion",
					{
						"completion": "update",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "update"
					},
					"AgAAAC4AAAAAAAAALgAAAAAAAAACAAAAdXAuAAAAAAAAADQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADQAAAAAAAAANQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " vu"
					},
					"AwAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAADcAAAAAAAAANwAAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "iew"
					},
					"AwAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoAAAAAAAAAOwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAADoAAAAAAAAAOgAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADoAAAAAAAAAOwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " sub"
					},
					"BAAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA9AAAAAAAAAAAAAAA9AAAAAAAAAD4AAAAAAAAAAAAAAD4AAAAAAAAAPwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert_completion",
					{
						"completion": "subscriptions",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "subscriptions"
					},
					"AgAAADwAAAAAAAAAPAAAAAAAAAADAAAAc3ViPAAAAAAAAABJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/eniac314/prog/elm/murol2.0/src/Internals/CommonStyleHelpers.elm",
			"settings":
			{
				"buffer_size": 9286,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"up",
				"Package Control: Upgrade Package"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"term",
				"Terminal: Open"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"teminus ope",
				"Terminus: Toggle Panel"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"open",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"terminus ",
				"Terminus: Close All"
			],
			[
				"terminus open",
				"Terminus: Toggle Panel"
			],
			[
				"terminus: io",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"Package Control: up",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"floo",
				"Floobits - Settings (~/.floorc.json)"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"pac",
				"Package Control: Upgrade Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 106.0,
		"history":
		[
			"terminus",
			"teminus",
			"Terminus: Open Default Shell in Tab"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/eniac314/prog/elm/elm-trix",
		"/home/eniac314/prog/elm/elm-trix/src",
		"/home/eniac314/prog/elm/elm-trix/src/Editor"
	],
	"file_history":
	[
		"/home/eniac314/prog/elm/elm-trix/src/Main.elm",
		"/home/eniac314/prog/elm/murol2.0/src/Internals/Icons.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Internal/ArtAdmin.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/appState/artworks",
		"/run/user/1000/gvfs/dav+sd:host=eniac314%2527s%2520public%2520files%2520on%2520eniac314-Meerkat._webdav._tcp.local/users.sql",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/.htaccess",
		"/run/user/1000/gvfs/dav+sd:host=eniac314%2527s%2520public%2520files%2520on%2520eniac314-Meerkat._webdav._tcp.local/user.sql",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/index.html",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Style/Helpers.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Shared/Types.elm",
		"/home/eniac314/prog/elm/kasugaeRetreat/index.html",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Internal/Helpers.elm",
		"/home/eniac314/prog/elm/kasugaeRetreat/src/Main.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/assets/Website layout.jpg",
		"/home/eniac314/Desktop/test.svg",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/api.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Auth/Auth.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/PicAdmin/PicAdmin.elm",
		"/home/eniac314/prog/elm/murol2.0/src/PageEditor/PageEditor.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Style/Icons.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/Internals/DropdownSelect.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/phpinfo.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/composer.json",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/modules/artAdmin/save_state_patch.inc.php",
		"/var/www/murol2.0/.htaccess.prod",
		"/var/www/paniersSaison/.htaccess",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/.htaccess.prod",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/.htaccess_prod",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/admin.html",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Shared/Helpers.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Shared/Views.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/modules/artAdmin/art_upload.inc.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/appState/masonrySettings",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/modules/artAdmin/load_state.inc.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/modules/artAdmin/save_state.inc.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Admin.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/js/color-thief.umd.js",
		"/var/www/html/public/js/color-thief.js",
		"/home/eniac314/prog/elm/paniersSaison/src/Style/Helpers.elm",
		"/home/eniac314/prog/elm/laTerreDuChat/favicon.ico",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Auth/Internal/Login.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/apacheBackup/includes/config.inc.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/.gitignore",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/includes/prodDB.inc.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/includes/config.inc.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/errors.log",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/errors_short.log",
		"/home/eniac314/prog/elm/paniersSaison/src/Admin.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/elm.json",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/appState/tags",
		"/media/eniac314/4F9C57EA750A63CE/toProcess/convert.py",
		"/home/eniac314/Desktop/tmp/convert.py",
		"/home/eniac314/prog/elm/elm-datepicker/src/Demo.elm",
		"/home/eniac314/prog/elm/laTerreDuChat/php backup/getLegacyMeta.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/memo",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/DatePicker/DatePicker.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Internal/Logger.elm",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/apacheBackup/vendor/paragonie/halite/src/Asymmetric/SecretKey.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/src/Internal/Icons.elm",
		"/home/eniac314/prog/elm/elm-datepicker/elm.json",
		"/home/eniac314/prog/elm/elm-datepicker/src/DatePicker.elm",
		"/home/eniac314/prog/elm/elm-datepicker/examples/simple-with-validate-date/SimpleWithValidate.elm",
		"/home/eniac314/prog/elm/elm-datepicker/?",
		"/home/eniac314/prog/scripts/fixApachePerms",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/apacheBackup/public/api.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/public/js/load-image.all.min.js",
		"/home/eniac314/prog/elm/paniersSaison/apacheBackup/admin.html",
		"/home/eniac314/prog/elm/laTerreDuChat/php backup/getPics.php",
		"/home/eniac314/prog/elm/laTerreDuChat2.0/html/includes/utils.inc.php",
		"/home/eniac314/prog/elm/paniersSaison/src/Internals/ImageController.elm",
		"/home/eniac314/prog/elm/paniersSaison/apacheBackup/deleteFile.php",
		"/home/eniac314/prog/elm/paniersSaison/apacheBackup/picAdmin/deletePicLocal.php",
		"/home/eniac314/prog/elm/paniersSaison/notes",
		"/home/eniac314/monsterHunter/log",
		"/home/eniac314/Desktop/weather/src/Weather.elm",
		"/home/eniac314/Desktop/customWeather.php",
		"/home/eniac314/prog/elm/paniersSaison/apacheBackup/timelapse/realtimePic.php",
		"/home/eniac314/prog/elm/paniersSaison/apacheBackup/timelapse/private.php",
		"/home/eniac314/prog/elm/paniersSaison/apacheBackup/timelapse/timelapse.php",
		"/home/eniac314/prog/elm/murol2.0/apacheBackup/js/trix.js",
		"/home/eniac314/prog/elm/murol2.0/src/Document/Json/DocumentDecoder.elm",
		"/home/eniac314/prog/elm/laTerreDuChat/php backup/showPic.php",
		"/home/eniac314/prog/elm/paniersSaison/src/Internals/Helpers.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/Pages/GenericPage/Article/ArticleRenderer.elm",
		"/home/eniac314/prog/elm/paniersSaison/html/utils.php",
		"/home/eniac314/prog/elm/paniersSaison/src/Internals/Uploader.elm",
		"/home/eniac314/prog/elm/elmVideo/src/Main.elm",
		"/home/eniac314/prog/elm/paniersSaison/html/getFiche.php",
		"/home/eniac314/prog/elm/gilInfo2.0/src/Main.elm",
		"/home/eniac314/prog/elm/paniersSaison/html/getGeneralDirectory.php",
		"/home/eniac314/prog/elm/paniersSaison/html/updateFiche.php",
		"/home/eniac314/prog/elm/murol2.0/html/getAllPublications.php",
		"/home/eniac314/prog/elm/murol2.0/html/saveDelib.php",
		"/home/eniac314/prog/elm/murol2.0/html/saveMurolInfo.php",
		"/home/eniac314/prog/elm/murol2.0/html/saveBulletin.php",
		"/var/www/paniersSaison/timelapse/isSunUp.php",
		"/home/eniac314/.floorc.json",
		"/home/eniac314/prog/elm/wadokei/index.html",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/getIndexes.php",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/getRecipeClientIndex.php",
		"/home/eniac314/prog/elm/murol2.0/apacheBackup/index.html",
		"/home/eniac314/prog/elm/murol2.0/src/SearchEngine.elm",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/saveIndexesBytes.php",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/recipeIndex.bin",
		"/home/eniac314/prog/elm/laTerreDuChat/php backup/fileUploadPic.php",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/wholeTextIndex.bin",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/getFeuilleLiaison.php",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/semaine:37-08-2020/semaine:37-08-2020.txt",
		"/home/eniac314/prog/elm/paniersSaison/src/Pages/GenericPage/GenericPageAdmin.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/Pages/GenericPage/GenericPage.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/Pages/GenericPage/GenericPageShared.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/Internals/Timelapse.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/Style/Palette.elm",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/getFeuillesLiaison.php",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/semaine:16-04-2020/semaine:16-04-2020.txt",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/getRawFeuillesLiaison.php",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/getRawFeuilleLiaison.php",
		"/home/eniac314/prog/elm/paniersSaison/src/Auth/AuthPlugin.elm",
		"/home/eniac314/prog/elm/frenchStemmer/",
		"/home/eniac314/prog/elm/frenchStemmer/src/FrenchStemmer.elm",
		"/home/eniac314/prog/elm/paniersSaison/html/feuillesLiaison/saveIndexes.php",
		"/home/eniac314/prog/elm/gites2.0/assets/elm/src/Internals/DropdownSelect.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/Pages/PagesAdmin.elm",
		"/home/eniac314/prog/elm/paniersSaison/src/Pages/GenericPage/Article/ArticleEditor.elm",
		"/home/eniac314/prog/elm/paniersSaison/html/backups/backup.php",
		"/home/eniac314/prog/elm/paniersSaison/html/timelapse/timelapse.php",
		"/home/eniac314/prog/elm/paniersSaison/src/Internals/LocalStoragePort.elm",
		"/home/eniac314/prog/elm/murol2.0/apacheBackup/murolAdmin.html"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"link2",
			"linkPicker",
			"InsertInternalLink",
			"widgetViewWrapper",
			"linkPicker",
			"linkPickerWrapper",
			"view",
			"model.externalMsg",
			"Html",
			"::[]",
			"hexToDocColor",
			"parseColor",
			"reversed",
			"alignCen",
			"Icons.",
			"toogleB",
			"toogleButton",
			"alignJustify",
			"alignJ",
			"setAl",
			"SetAlignMent",
			"decodeEd",
			"docAttrToCss",
			"wholeTextBlocAttrs",
			"docAttrToCss"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"config.outMsg",
			"Html.Html",
			""
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/eniac314/prog/elm/murol2.0/src/PageEditor/EditorPlugins/TrixTextBlockPlugin.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 63084,
						"regions":
						{
						},
						"selection":
						[
							[
								43562,
								43646
							]
						],
						"settings":
						{
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21488.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/eniac314/prog/elm/murol2.0/src/Internals/Icons.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17413,
						"regions":
						{
						},
						"selection":
						[
							[
								1097,
								1097
							]
						],
						"settings":
						{
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/eniac314/prog/elm/murol2.0/src/Document/DocumentViews/DocumentView.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56360,
						"regions":
						{
						},
						"selection":
						[
							[
								20374,
								20386
							]
						],
						"settings":
						{
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9856.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/eniac314/prog/elm/murol2.0/src/Document/DocumentViews/StyleSheets.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24350,
						"regions":
						{
						},
						"selection":
						[
							[
								17119,
								17119
							]
						],
						"settings":
						{
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8720.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Main.elm",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44011,
						"regions":
						{
						},
						"selection":
						[
							[
								1920,
								1920
							]
						],
						"settings":
						{
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 576.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/Editor/Trix.elm",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44788,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": true,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/eniac314/prog/elm/murol2.0/src/Internals/CommonStyleHelpers.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9286,
						"regions":
						{
						},
						"selection":
						[
							[
								4943,
								6703
							]
						],
						"settings":
						{
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3464.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 234.0
	},
	"output.Terminus 2":
	{
		"height": 102.0
	},
	"output.Terminus 3":
	{
		"height": 114.0
	},
	"output.Terminus 4":
	{
		"height": 114.0
	},
	"output.Terminus 5":
	{
		"height": 114.0
	},
	"output.Terminus 6":
	{
		"height": 114.0
	},
	"output.elm_format":
	{
		"height": 250.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "elm-trix.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"secre",
				"apacheBackup/vendor/paragonie/halite/src/Asymmetric/SecretKey.php"
			],
			[
				"getFeuill",
				"html/feuillesLiaison/getFeuilleLiaison.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 266.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
